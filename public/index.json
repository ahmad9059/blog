[{"content":"€å€Å ÿß€å⁄© ÿßÿ±ÿØŸà ÿ¨ŸÖŸÑ€Å €Å€í€î\n","permalink":"http://localhost:1313/posts/temp-article/","summary":"\u003cp\u003e\u003c!-- raw HTML omitted --\u003e€å€Å ÿß€å⁄© ÿßÿ±ÿØŸà ÿ¨ŸÖŸÑ€Å €Å€í€î\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003c!-- raw HTML omitted --\u003e","title":"temp article"},{"content":"\nReact.js is a JavaScript library for building user interfaces. Developed by Facebook (now Meta) in 2013. It is component-based, declarative, and allows for efficient UI updates. Key Features of React Component-Based Architecture: UI is built using reusable components. Virtual DOM: Updates only the changed parts, making React fast. Unidirectional Data Flow: Props and state maintain a predictable data structure. JSX (JavaScript XML): A syntax extension that lets you write HTML inside JavaScript. Hooks: Allow functional components to have state and other features. Mutable vs Immutable Mutable (Changeable) Mutable data types can be changed after creation. Example: Objects \u0026amp; Arrays are mutable. let arr = [1, 2, 3]; arr.push(4); // Modifies the original array console.log(arr); // [1, 2, 3, 4] Immutable (Unchangeable) Immutable data cannot be changed directly. Instead, you create a new copy. Example: Strings \u0026amp; Numbers are immutable. let str = \u0026#34;Hello\u0026#34;; str[0] = \u0026#34;M\u0026#34;; // This won\u0026#39;t change the string console.log(str); // \u0026#34;Hello\u0026#34; Example of immutable object handling (creating a new object instead of modifying the original):\nconst person = { name: \u0026#34;Ahmad\u0026#34;, age: 19 }; const updatedPerson = { ...person, age: 20 }; console.log(updatedPerson); // { name: \u0026#34;Ahmad\u0026#34;, age: 20 } Arrays \u0026amp; Objects Destructuring Array Destructuring Extract values from an array and assign them to variables. const numbers = [10, 20, 30]; const [a, b, c] = numbers; console.log(a, b, c); // 10 20 30 Object Destructuring const person = { name: \u0026#34;Ahmad\u0026#34;, age: 19, city: \u0026#34;Multan\u0026#34; }; const { name, age } = person; console.log(name, age); // Ahmad 19 Import \u0026amp; Export in JavaScript Exporting in JavaScript Named Export (Multiple Exports) export const name = \u0026#34;Ahmad\u0026#34;; export const age = 19; export function greet() { return \u0026#34;Hello!\u0026#34;; } Default Export (Single Export per File) export default function greet() { return \u0026#34;Hello!\u0026#34;; } Importing in JavaScript Named Import import { name, age, greet } from \u0026#34;./module.js\u0026#34;; console.log(name, age); // Ahmad 19 console.log(greet()); // Hello! Default Import import greet from \u0026#34;./module.js\u0026#34;; console.log(greet()); // Hello! Import Everything import * as data from \u0026#34;./module.js\u0026#34;; console.log(data.name); // Ahmad console.log(data.greet()); // Hello! Concept Description Mutable Can be changed (Objects, Arrays). Immutable Cannot be changed (Strings, Numbers). Primitive Types Stored by value (string, number, boolean, etc.). Reference Types Stored by reference (object, array, function). Destructuring Extracts values from arrays/objects into variables. Import/Export Used to share JavaScript files/modules. Spread (...) Expands arrays/objects into individual values. Rest (...) Gathers multiple values into an array. Map \u0026amp; Filter in JavaScript for React map() Method map() is used to iterate over an array and return a new array with modified elements. It does not modify the original array. Syntax:\nconst newArray = array.map((element, index, array) =\u0026gt; { return modifiedElement; }); Example:\nconst numbers = [1, 2, 3, 4]; const doubled = numbers.map(num =\u0026gt; num * 2); console.log(doubled); // [2, 4, 6, 8] filter() Method filter() is used to filter elements based on a condition. It returns a new array with only the elements that satisfy the condition. The original array remains unchanged. Syntax:\nconst newArray = array.filter((element, index, array) =\u0026gt; { return condition; }); Example:\nconst numbers = [1, 2, 3, 4, 5, 6]; const evenNumbers = numbers.filter(num =\u0026gt; num % 2 === 0); console.log(evenNumbers); // [2, 4, 6] Method Purpose Returns map() Transforms each element in an array A new array with modified values filter() Selects elements that match a condition A new array with filtered values map() + filter() First filters elements, then transforms them A new modified and filtered array ‚úÖ Use map() to modify each element in an array.\n‚úÖ Use filter() to remove unwanted elements from an array.\n‚úÖ Always use a key prop in React when rendering lists.\nDifference Between Library \u0026amp; Framework Feature Library Framework Definition A collection of reusable code that helps developers perform specific tasks. A full-fledged structure that dictates how the code should be organized. Control You control when and how to use the library. The framework controls the flow of execution. Flexibility More flexible, can be used with other tools. Less flexible, enforces a specific architecture. Example React.js (UI library), Lodash, jQuery Angular, Django, Ruby on Rails Key Difference React (Library): You decide how to structure the app. Angular (Framework): It dictates the structure. Real DOM vs Virtual DOM What is the DOM (Document Object Model)? The DOM represents the structure of an HTML document as a tree. JavaScript can manipulate the DOM to update elements dynamically. What is Real DOM? The actual structure of an HTML document in the browser. When a change is made, the entire page re-renders. Slow performance for frequent updates. What is Virtual DOM? A lightweight copy of the Real DOM. React updates the Virtual DOM first, then compares it with the previous version using diffing. Only the changed parts of the Real DOM get updated, making React much faster. Difference Between Real DOM \u0026amp; Virtual DOM Feature Real DOM Virtual DOM Definition Actual representation of the webpage. Lightweight copy of the Real DOM. Updates Directly updates the UI. Updates in memory first, then syncs with the Real DOM. Performance Slower (entire page re-renders). Faster (only updates changed parts). Efficiency Expensive updates, slow rendering. Optimized updates, fast rendering. Used in Vanilla JavaScript, jQuery. React, Vue.js. Why Virtual DOM is Important in React? ‚úÖ Faster updates compared to Real DOM.\n‚úÖ Better performance for dynamic content.\n‚úÖ Efficient UI rendering with minimal reflows.\nVite vs Create React App (CRA) in React.js 1. Vite üöÄ Modern, fast, and optimized build tool for React. Uses ES modules (ESM) and Hot Module Replacement (HMR) for instant updates. Super fast startup (no bundling in development). Supports TypeScript, JSX, and more out-of-the-box. Tree-shaking \u0026amp; optimized builds for production. Install React with Vite\nnpm create vite@latest npm install npm run dev 2. Create React App (CRA) üèóÔ∏è Traditional way to set up React projects. Uses Webpack (slower than Vite). Slower builds and HMR compared to Vite. Good for beginners, but outdated for large apps. Install React with CRA\nnpx create-react-app my-app cd my-app npm start JSX (JavaScript XML) \u0026amp; React Vite Folder Structure 1. JSX (JavaScript XML) JSX is a syntax extension for JavaScript used in React. Looks like HTML inside JavaScript but gets converted to JavaScript functions or React.createElement. Allows embedding JavaScript inside {}. Must return a single parent element (use \u0026lt;\u0026gt;...\u0026lt;/\u0026gt; if needed). const App = () =\u0026gt; { const name = \u0026#34;Ahmad\u0026#34;; return \u0026lt;h1\u0026gt;Hello, {name}!\u0026lt;/h1\u0026gt;; }; export default App; 2. React Vite Folder Structure . ‚îú‚îÄ‚îÄ eslint.config.js # ESLint configuration (optional) ‚îú‚îÄ‚îÄ index.html # Main HTML file (root of the app) ‚îú‚îÄ‚îÄ node_modules/ # Installed dependencies ‚îú‚îÄ‚îÄ package.json # Project metadata \u0026amp; dependencies ‚îú‚îÄ‚îÄ package-lock.json # Exact versions of installed packages ‚îú‚îÄ‚îÄ public/ # Static assets (images, fonts, etc.) ‚îú‚îÄ‚îÄ README.md # Project documentation ‚îú‚îÄ‚îÄ src/ # Main source code directory ‚îÇ ‚îú‚îÄ‚îÄ App.jsx # Main React component ‚îÇ ‚îú‚îÄ‚îÄ main.jsx # React entry file (renders App) ‚îÇ ‚îú‚îÄ‚îÄ assets/ # Images, styles, etc. ‚îÇ ‚îú‚îÄ‚îÄ components/ # Reusable UI components ‚îÇ ‚îú‚îÄ‚îÄ pages/ # Page components (if using routing) ‚îÇ ‚îî‚îÄ‚îÄ styles/ # Global CSS files (if needed) ‚îî‚îÄ‚îÄ vite.config.js # Vite configuration file Key Points ‚úÖ src/ contains all React components \u0026amp; logic.\n‚úÖ index.html is the main HTML template.\n‚úÖ Vite uses main.jsx to mount the React app into #root.\n‚úÖ Public files are served as-is from /public/.\nReact Components \u0026amp; How They Work 1. Component in React A component is a reusable, independent UI piece in React. Two types: Functional Components (recommended, use hooks). Class Components (older, uses this.state). Components return JSX and manage their own logic \u0026amp; state. const MyComponent = () =\u0026gt; { return \u0026lt;h1\u0026gt;Hello, React!\u0026lt;/h1\u0026gt;; }; export default MyComponent; 2. How They Work ‚úÖ We create components inside the src/components/ folder (e.g., MyComponent.jsx).\n‚úÖ Components are imported into App.jsx, which acts as the main component.\n‚úÖ main.jsx is responsible for rendering App.jsx inside the root \u0026lt;div\u0026gt; in index.html.\n‚úÖ ReactDOM.createRoot(document.getElementById('root')) creates the Virtual DOM and syncs\nFlow of Code in React Create a component (MyComponent.jsx): const MyComponent = () =\u0026gt; \u0026lt;h1\u0026gt;Hello, React!\u0026lt;/h1\u0026gt;; export default MyComponent; import it inside App.jsx: import MyComponent from \u0026#34;./components/MyComponent\u0026#34;; const App = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;MyComponent /\u0026gt; \u0026lt;/div\u0026gt; ); }; export default App; Render App.jsx inside main.jsx: import React from \u0026#34;react\u0026#34;; import ReactDOM from \u0026#34;react-dom/client\u0026#34;; import App from \u0026#34;./App\u0026#34;; ReactDOM.createRoot(document.getElementById(\u0026#34;root\u0026#34;)).render(\u0026lt;App /\u0026gt;); index.html contains root div: \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;root\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; Key Points ‚úÖ Components are modular \u0026amp; reusable in React.\n‚úÖ main.jsx renders App.jsx inside the root div.\n‚úÖ React Virtual DOM updates only changed parts for better performance. üöÄ\nConditional Rendering in React Conditional rendering in React allows components to render dynamically based on conditions.\nUsing if-else Statements\nfunction Greeting(props) { if (props.isLoggedIn) { return \u0026lt;h1\u0026gt;Welcome Back!\u0026lt;/h1\u0026gt;; } else { return \u0026lt;h1\u0026gt;Please Sign In\u0026lt;/h1\u0026gt;; } } Using Ternary Operator (? :)\nfunction Greeting({ isLoggedIn }) { return \u0026lt;h1\u0026gt;{isLoggedIn ? \u0026#34;Welcome Back!\u0026#34; : \u0026#34;Please Sign In\u0026#34;}\u0026lt;/h1\u0026gt;; } Event Handling in React React follows the Synthetic Event system, making event handling efficient across different browsers.\nHandling Click Events\nfunction Button() { function handleClick() { alert(\u0026#34;Button Clicked!\u0026#34;); } return \u0026lt;button onClick={handleClick}\u0026gt;Click Me\u0026lt;/button\u0026gt;; } Passing Arguments in Event Handlers\nfunction Greeting({ name }) { function sayHello(name) { alert(`Hello, ${name}!`); } return \u0026lt;button onClick={() =\u0026gt; sayHello(name)}\u0026gt;Greet\u0026lt;/button\u0026gt;; } Handling Keyboard Events\nfunction InputBox() { function handleKeyPress(event) { if (event.key === \u0026#34;Enter\u0026#34;) { alert(\u0026#34;Enter key pressed!\u0026#34;); } } return \u0026lt;input type=\u0026#34;text\u0026#34; onKeyPress={handleKeyPress} /\u0026gt;; } ‚úÖ Conditional Rendering: Use if-else, ternary (? :), \u0026amp;\u0026amp;, or switch-case for rendering components based on conditions.\n‚úÖ Event Handling: Use event handlers like onClick, onKeyPress, onSubmit, etc., with functions.\n‚úÖ Pass Parameters: Use arrow functions for passing arguments in event handlers.\n‚úÖ Prevent Default Behavior: Use event.preventDefault() to stop default browser actions like form submissions.\nState in React State is an object that holds dynamic data that affects a component‚Äôs rendering. Unlike props, state is mutable and can be changed within a component. When state changes, React re-renders the component to reflect the updates. Types of State in React Local State: Managed within a single component using useState(). Example: Form inputs, modals, toggles. Global State: Shared across multiple components. Managed using Context API, Redux, or other state management libraries. Server State: Data fetched from an API that needs to be integrated into UI. Managed using tools like React Query, SWR, or Redux Thunk. URL State: State stored in the URL (query parameters, path, etc.). Managed using React Router. Understanding useState() Hook useState() is a React Hook that allows functional components to manage state. It returns an array with two values: The current state value. A function to update the state. Syntax:\nconst [state, setState] = useState(initialValue); Example: Counter App\nimport { useState } from \u0026#34;react\u0026#34;; function Counter() { const [count, setCount] = useState(0); // Initial state is 0 return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Count: {count}\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt;Increment\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } export default Counter; useState(0): Initializes count to 0. setCount(count + 1): Updates the state, causing a re-render. Updating State Correctly 1. Using Functional Updates (Best Practice)\nWhen the new state depends on the previous state, use a function inside setState(). setCount((prevCount) =\u0026gt; prevCount + 1); This ensures correct updates, especially in async operations. 2. Updating Objects in State\nUse spread operator (...) to avoid modifying the original state. const [user, setUser] = useState({ name: \u0026#34;Ahmad\u0026#34;, age: 19 }); setUser(prevUser =\u0026gt; ({ ...prevUser, age: prevUser.age + 1 })); 3. Updating Arrays in State\nUse spread operator (...) to update arrays. const [items, setItems] = useState([1, 2, 3]); setItems(prevItems =\u0026gt; [...prevItems, 4]); // Adds new item ‚úÖ State is a way to store data inside a component.\n‚úÖ useState() is used to manage local state in functional components.\n‚úÖ Always use the updater function when updating state based on previous values.\n‚úÖ Never modify state directly, always use setState().\nProps (Properties) in React What are Props? Props stand for Properties. Props are read-only data passed from a parent component to a child component. They allow components to be dynamic and reusable by passing different data to them. Think of props as function arguments for components. How Props Work Parent component passes props to a child component. Child component receives them as a parameter (usually an object). The child accesses props using props.propName. Syntax 1. Passing Props \u0026lt;ChildComponent name=\u0026#34;Ahmad\u0026#34; age={19} /\u0026gt; 2. Receiving Props function ChildComponent(props) { return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Name: {props.name}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Age: {props.age}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } ‚úÖ OR Using Destructuring function ChildComponent({ name, age }) { return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Name: {name}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Age: {age}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } üß© Key Points Props are immutable: You cannot change props inside the child component. Unidirectional flow: Data flows from parent to child (one-way data binding). Can be any data type: String, number, boolean, array, object, function, etc. Used to customize components and make them reusable. CSS Modules A CSS Module is a CSS file in which all class and animation names are scoped locally by default. This means that styles defined in one component won‚Äôt affect other components, preventing style conflicts. Used in React.js to maintain modular, reusable, and conflict-free CSS How It Works A CSS file is treated as a module when named with the .module.css extension. Example: MyComponent.module.css In React, you import it as an object where each CSS class becomes a property of that object. üìÑ Example File: Button.module.css\n.button { background-color: blue; color: white; } Example Usage in Component import styles from \u0026#39;./Button.module.css\u0026#39;; function Button() { return \u0026lt;button className={styles.button}\u0026gt;Click me\u0026lt;/button\u0026gt;; } Behind the Scenes CSS Modules use a build tool like Webpack to automatically transform class names into unique identifiers. Example: .button in the source might become .Button_button__3hWkj in the final DOM. The mapping ensures local scoping and uniqueness across components. Comparison with Other Styling Methods Method Scoped Reusable Global Impact Setup Required CSS Modules ‚úÖ ‚úÖ ‚ùå Minimal Inline Styles ‚úÖ ‚ùå ‚ùå None Global CSS ‚ùå ‚úÖ ‚úÖ None CSS-in-JS (e.g. styled-components) ‚úÖ ‚úÖ ‚ùå More setup Form Handling in React.js Form handling refers to how input data is captured from HTML forms (like \u0026lt;input\u0026gt;, \u0026lt;textarea\u0026gt;, \u0026lt;select\u0026gt;) and managed using state or references in React.\nKey Concepts: React forms are usually managed through state (controlled) or refs (uncontrolled). You handle form submissions via an onSubmit event handler. You use onChange to capture input updates. Uncontrolled Components \u0026amp; useRef() An uncontrolled component lets the DOM manage the input value, and React accesses it using a ref.\nUsed to directly access a DOM element Doesn‚Äôt re-render the component on value change const inputRef = useRef(); const handleSubmit = () =\u0026gt; { console.log(inputRef.current.value); }; \u0026lt;input type=\u0026#34;text\u0026#34; ref={inputRef} /\u0026gt; Controlled Components A controlled component is an input element whose value is controlled by React state.\nconst [name, setName] = useState(\u0026#34;\u0026#34;); \u0026lt;input type=\u0026#34;text\u0026#34; value={name} onChange={(e) =\u0026gt; setName(e.target.value)} /\u0026gt; Full Example:\nimport React, { useState } from \u0026#34;react\u0026#34;; function Form() { const [val, setVal] = useState({ name: \u0026#34;\u0026#34;, email: \u0026#34;\u0026#34; }); const handleSubmit = (event) =\u0026gt; { event.preventDefault(); console.log(val); }; return ( \u0026lt;\u0026gt; \u0026lt;form action=\u0026#34;\u0026#34; onSubmit={handleSubmit}\u0026gt; \u0026lt;input onChange={(event) =\u0026gt; setVal({ ...val, name: event.target.value })} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; placeholder=\u0026#34;Email\u0026#34; onChange={(event) =\u0026gt; setVal({ ...val, email: event.target.value })} /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/\u0026gt; ); } export default Form; React Hook Form (Library) React Hook Form is a popular library for building performant and flexible forms in React.\nWhy Use It? Reduces boilerplate code Built-in validation Integrates well with UI libraries like Material UI, Chakra UI, etc. Basic Example:\nimport { useForm } from \u0026#34;react-hook-form\u0026#34;; const { register, handleSubmit } = useForm(); const onSubmit = (data) =\u0026gt; console.log(data); \u0026lt;form onSubmit={handleSubmit(onSubmit)}\u0026gt; \u0026lt;input {...register(\u0026#34;username\u0026#34;)} /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; Full Example\nimport React from \u0026#34;react\u0026#34;; import { useForm } from \u0026#34;react-hook-form\u0026#34;; function Form() { const { register, handleSubmit } = useForm(); return ( \u0026lt;\u0026gt; \u0026lt;form action=\u0026#34;\u0026#34; onSubmit={handleSubmit((data) =\u0026gt; console.log(data))}\u0026gt; \u0026lt;input {...register(\u0026#34;name\u0026#34;)} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;input {...register(\u0026#34;age\u0026#34;)} type=\u0026#34;age\u0026#34; placeholder=\u0026#34;age\u0026#34; /\u0026gt; \u0026lt;input {...register(\u0026#34;email\u0026#34;)} type=\u0026#34;email\u0026#34; placeholder=\u0026#34;email\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/\u0026gt; ); } export default Form; Dynamic Routing in React.js Dynamic Routing means that the routing is handled at runtime (not at compile time like in traditional HTML websites).\nIn React.js, dynamic routing is implemented using React Router, a library that enables navigation among views of various components.\nUnlike traditional routing where routes are hardcoded in a file (like routes.php), React dynamically loads components based on the current URL.\nInstallation of react-router-dom\nnpm install react-router-dom Core Components of React Router BrowserRouter ‚Äì Wraps the app and enables routing. Routes ‚Äì A container for all the Route components. Route ‚Äì Defines the path and component to render. Link / NavLink ‚Äì Used for navigation without reloading the page. useParams ‚Äì Hook to access URL parameters (useful for dynamic routes). Basic Routing Setup import { BrowserRouter, Routes, Route } from \u0026#34;react-router-dom\u0026#34;; import Home from \u0026#39;./Home\u0026#39;; import About from \u0026#39;./About\u0026#39;; function App() { return ( \u0026lt;BrowserRouter\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/\u0026#34; element={\u0026lt;Home /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/about\u0026#34; element={\u0026lt;About /\u0026gt;} /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/BrowserRouter\u0026gt; ); } What is Dynamic Routing? Dynamic routing allows us to create routes where parts of the URL are variables, e.g., /user/1, /user/2, etc.\n\u0026lt;Route path=\u0026#34;/user/:id\u0026#34; element={\u0026lt;UserProfile /\u0026gt;} /\u0026gt; In this case, :id is a route parameter.\nAccessing Dynamic Parameters: useParams useParams() is a React Router hook used to access dynamic parameters from the current URL. It is most useful with dynamic routes like /user/:id, /post/:slug, etc. import { useParams } from \u0026#34;react-router-dom\u0026#34;; function UserProfile() { const { id } = useParams(); return \u0026lt;h1\u0026gt;User ID: {id}\u0026lt;/h1\u0026gt;; } useNavigate() in React Router useNavigate() is a hook provided by react-router-dom. It is used to programmatically navigate to different routes (without clicking a \u0026lt;Link\u0026gt; or \u0026lt;NavLink\u0026gt;). It replaces the older useHistory() from React Router v5. const navigate = useNavigate(); function handleClick() { navigate(\u0026#34;/about\u0026#34;); } üîÅ Navigate with Parameters navigate(`/user/${userId}`); ‚èÆÔ∏è Navigate Back or Forward navigate(-1); // Go back navigate(1); // Go forward Feature Description navigate(\u0026quot;/path\u0026quot;) Navigate to a route navigate(-1) Go back navigate(1) Go forward { replace: true } Replace history entry { state: {...} } Pass data with navigation NavLink in React Router NavLink is a special version of the \u0026lt;Link\u0026gt; component in react-router-dom that adds styling attributes to the rendered element when it matches the current URL.\nIt‚Äôs perfect when you want to highlight the active page in a navigation menu (e.g., changing the color or adding underline).\n\u0026lt;NavLink to=\u0026#34;/home\u0026#34;\u0026gt;Home\u0026lt;/NavLink\u0026gt; \u0026lt;NavLink to=\u0026#34;/about\u0026#34;\u0026gt;About\u0026lt;/NavLink\u0026gt; Active Styling with NavLink By default, NavLink applies an active class when the route matches.\nYou can also provide your own styles or class names based on the active state using:\n‚úÖ className as a Function\n\u0026lt;NavLink to=\u0026#34;/home\u0026#34; className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;inactive-link\u0026#34;} \u0026gt; Home \u0026lt;/NavLink\u0026gt; ‚úÖ style as a Function\n\u0026lt;NavLink to=\u0026#34;/about\u0026#34; style={({ isActive }) =\u0026gt; ({ color: isActive ? \u0026#34;green\u0026#34; : \u0026#34;gray\u0026#34;, textDecoration: isActive ? \u0026#34;underline\u0026#34; : \u0026#34;none\u0026#34; })} \u0026gt; About \u0026lt;/NavLink\u0026gt; Example with Full NavBar import { NavLink } from \u0026#34;react-router-dom\u0026#34;; import \u0026#34;./styles.css\u0026#34;; // Assume you have .active-link class here function Navbar() { return ( \u0026lt;nav\u0026gt; \u0026lt;NavLink to=\u0026#34;/\u0026#34; end className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;\u0026#34;}\u0026gt; Home \u0026lt;/NavLink\u0026gt; \u0026lt;NavLink to=\u0026#34;/about\u0026#34; className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;\u0026#34;}\u0026gt; About \u0026lt;/NavLink\u0026gt; \u0026lt;NavLink to=\u0026#34;/contact\u0026#34; className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;\u0026#34;}\u0026gt; Contact \u0026lt;/NavLink\u0026gt; \u0026lt;/nav\u0026gt; ); } Summary of NavLink Prop/Feature Description to=\u0026quot;/path\u0026quot; Target route className Function that gives conditional class style Function that returns conditional style end Ensures exact matching isActive Boolean indicating current URL match \u0026lt;Outlet /\u0026gt; in React Router \u0026lt;Outlet /\u0026gt; is a placeholder component used to render child routes inside a parent route. It\u0026rsquo;s like saying: ‚ÄúHere is where the nested component will appear.‚Äù ‚úÖ How It Works Visiting /dashboard/profile will render: Dashboard component Profile component inside the \u0026lt;Outlet /\u0026gt; Visiting /dashboard/settings will render: Dashboard component Settings component inside the \u0026lt;Outlet /\u0026gt; import { Outlet } from \u0026#34;react-router-dom\u0026#34;; function Dashboard() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Dashboard Layout\u0026lt;/h1\u0026gt; {/* Nested route component will be rendered here */} \u0026lt;Outlet /\u0026gt; \u0026lt;/div\u0026gt; ); } API Integration in React.js using AJAX (fetch / axios) API integration in React lets your app communicate with backends, external services, or databases. AJAX (Asynchronous JavaScript and XML) is used to make asynchronous requests to APIs.\n1. Using fetch useEffect(() =\u0026gt; { fetch(\u0026#39;https://api.example.com/data\u0026#39;) .then(res =\u0026gt; res.json()) .then(data =\u0026gt; setData(data)) .catch(err =\u0026gt; console.error(err)); }, []); fetch() returns a Promise. Must manually handle JSON parsing (res.json()). 2. Using axios npm install axios // install this package to use axios import axios from \u0026#34;axios\u0026#34;; import React from \u0026#34;react\u0026#34;; const App = () =\u0026gt; { const api = \u0026#34;https://fakestoreapi.com/products\u0026#34;; // üì• Function to GET products from the API const getProducts = () =\u0026gt; { axios .get(api) .then((res) =\u0026gt; console.log(\u0026#34;GET:\u0026#34;, res)) .catch((err) =\u0026gt; console.error(\u0026#34;GET Error:\u0026#34;, err)); }; // üì§ Function to POST (add) a new product to the API const addProducts = () =\u0026gt; { axios .post(api, { id: 0, title: \u0026#34;Sample Product\u0026#34;, price: 0.1, description: \u0026#34;This is a test product.\u0026#34;, category: \u0026#34;sample-category\u0026#34;, image: \u0026#34;http://example.com/image.jpg\u0026#34;, }) .then((res) =\u0026gt; console.log(\u0026#34;POST:\u0026#34;, res)) .catch((err) =\u0026gt; console.error(\u0026#34;POST Error:\u0026#34;, err)); }; return ( \u0026lt;div className=\u0026#34;p-5\u0026#34;\u0026gt; {/* üü¢ Button to trigger GET request */} \u0026lt;button onClick={getProducts} className=\u0026#34;px-3 py-2 m-2 bg-blue-500 rounded-lg text-white\u0026#34; \u0026gt; Get Data \u0026lt;/button\u0026gt; {/* üîµ Button to trigger POST request */} \u0026lt;button onClick={addProducts} className=\u0026#34;px-3 py-2 m-2 bg-green-600 rounded-lg text-white\u0026#34; \u0026gt; Send Data \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); }; export default App; Example (with async/await) useEffect(() =\u0026gt; { const fetchData = async () =\u0026gt; { try { const response = await axios.get(\u0026#39;https://api.example.com/data\u0026#39;); setData(response.data); } catch (err) { console.error(err); } finally { setLoading(false); } }; fetchData(); }, []); React Component Lifecycle The component lifecycle refers to the sequence of methods/functions that are invoked during the life of a React component ‚Äî from its creation to its removal from the DOM.\nüß± 3 Main Phases: 1. Mounting Component is being created and inserted into the DOM.\nconstructor() ‚Üí (Class component only) render() componentDidMount() ‚úÖ (ideal for API calls, subscriptions) 2. Updating When props or state change.\nshouldComponentUpdate() ‚Üí (optional) render() componentDidUpdate() ‚úÖ (runs after update) 3. Unmounting Component is removed from the DOM.\ncomponentWillUnmount() ‚úÖ (cleanup tasks: timers, subscriptions, etc.) Functional Components use useEffect for all of this! A React Hook for handling side effects (e.g. API calls, DOM updates, subscriptions). Runs after the component renders. Basic Syntax useEffect(() =\u0026gt; { // effect logic return () =\u0026gt; { // optional cleanup }; }, [dependencies]); Dependency Array []: runs once after initial render (like componentDidMount) [var]: runs when var changes No array: runs after every render Note: When we [] square bracket in useEffect() component only update the changed part and if we don\u0026rsquo;t add square bracket component re-render means first it deleted and then again created.\nüí° Common Uses API calls Event listeners Timers Cleanups (return function) Full Example useEffect(() =\u0026gt; { console.log(\u0026#34;About Component is Created\u0026#34;); return () =\u0026gt; { console.log(\u0026#34;About Comonent is Deleted\u0026#34;); }; Example: Cleanup (like componentWillUnmount) useEffect(() =\u0026gt; { const timer = setInterval(() =\u0026gt; { console.log(\u0026#34;Running interval...\u0026#34;); }, 1000); return () =\u0026gt; { clearInterval(timer); // üßπ cleanup console.log(\u0026#34;Interval cleared\u0026#34;); }; }, []); What is React Reconciliation React Reconciliation is the process React uses to update the DOM efficiently when the state or props of a component change.\nThis makes updates fast and efficient, instead of redrawing the whole UI.\nNote: üîç Think of reconciliation as React saying: \u0026ldquo;Okay, what exactly changed? Let me only update that part.\u0026rdquo;\nTerm What it Means Triggered By Happens In Updating When React detects a change in props or state. setState, parent re-render, context change, etc. Component lifecycle Re-rendering When the component‚Äôs render method runs again (or JSX is re-evaluated in function components). After an update (or forced render) Virtual DOM const [val, setVal] = useState(\u0026#34;This is Normal Data\u0026#34;); const [val2, setVal2] = useState(\u0026#34;This is Very Large Data\u0026#34;); useEffect(() =\u0026gt; { console.log(\u0026#34;About Component is Created\u0026#34;); return () =\u0026gt; { console.log(\u0026#34;About Comonent is Deleted\u0026#34;); }; }, [val2]); // component only re-render when val2 is changed otherwise it update only changed part. Axios for Session Management \u0026amp; Separation 1. Why Use a Separate Axios File? Centralizes config (base URL, headers, interceptors) Cleaner code, reusable instance Easy to maintain sessions (cookies, tokens) Can add error handlers globally 2. Basic Axios Setup (Separate File) üóÇÔ∏è File: axiosInstance.js\nimport axios from \u0026#34;axios\u0026#34;; // Create an Axios instance const instance = axios.create({ baseURL: \u0026#34;https://fakestoreapi.com/\u0026#34;, // üè† Your backend URL withCredentials: true, // ‚úÖ Important for session cookies }); export default instance; 3. What withCredentials: true Does Allows Axios to send cookies and authentication headers Required when working with sessions (esp. JWT or Express sessions) Must also be enabled on backend (CORS settings) 4. Using It in Components import axios from \u0026#34;../axiosInstance\u0026#34;; const getProducts = async () =\u0026gt; { try { const res = await axios.get(\u0026#34;/products\u0026#34;); console.log(res.data); } catch (err) { console.error(err); } }; Concept Purpose withCredentials Send cookies for session management axios.create() Reusable config for base URL, etc. interceptors Add headers (like auth) automatically instance.get() Use anywhere like normal Axios ReactJS Context API A way to share data between components without passing props manually at every level. Solves prop drilling (passing data from parent to child repeatedly). When to Use Context API? When you need to share state across many components (e.g., theme, user authentication, language, etc.) Good for global state management in small to medium-sized apps. Key Components of Context API React.createContext() Creates a context object. const MyContext = React.createContext(); \u0026lt;Context.Provider\u0026gt; Wraps components to provide the context value. \u0026lt;MyContext.Provider value={someData}\u0026gt; \u0026lt;ChildComponent /\u0026gt; \u0026lt;/MyContext.Provider\u0026gt; useContext(Context) A hook to access the context value in a functional component. const value = useContext(MyContext); Example: Basic Usage // 1. Create Context const ThemeContext = React.createContext(); // 2. Create a Provider Component const ThemeProvider = ({ children }) =\u0026gt; { const [theme, setTheme] = React.useState(\u0026#34;light\u0026#34;); return ( \u0026lt;ThemeContext.Provider value={{ theme, setTheme }}\u0026gt; {children} \u0026lt;/ThemeContext.Provider\u0026gt; ); }; // 3. Use Context in a Child Component const ThemeToggler = () =\u0026gt; { const { theme, setTheme } = React.useContext(ThemeContext); return ( \u0026lt;button onClick={() =\u0026gt; setTheme(theme === \u0026#34;light\u0026#34; ? \u0026#34;dark\u0026#34; : \u0026#34;light\u0026#34;)}\u0026gt; Switch to {theme === \u0026#34;light\u0026#34; ? \u0026#34;dark\u0026#34; : \u0026#34;light\u0026#34;} mode \u0026lt;/button\u0026gt; ); }; // 4. Wrap in App const App = () =\u0026gt; ( \u0026lt;ThemeProvider\u0026gt; \u0026lt;ThemeToggler /\u0026gt; \u0026lt;/ThemeProvider\u0026gt; ); Redux Toolkit (RTK) What is Redux Redux is a state management library used with JavaScript apps (especially React) to manage and share application-wide state in a predictable way.\nWhat is React-Redux? React-Redux is the official binding library that allows React components to interact with the Redux store using hooks like:\nuseSelector() ‚Äì read state useDispatch() ‚Äì send actions It acts as a bridge between Redux and React.\nWhy Redux Toolkit is Useful ‚úÖ Reduces boilerplate code (less code, same result) ‚úÖ Built-in support for async actions using createAsyncThunk ‚úÖ Uses Immer.js internally so you can write mutable-style logic safely ‚úÖ Easy and clean setup via configureStore and createSlice ‚úÖ Encourages best practices by default Core Concepts Concept Description Store Holds the global state Slice A piece of the store: includes state + reducers Action An object describing a change Reducer A function that updates state based on action Dispatch A way to send actions to the store Selector Reads state from the store Redux Toolkit vs Context API Feature Redux Toolkit Context API üß† Purpose Complex state management Simple state sharing üîÅ Re-renders Optimized with useSelector() Causes re-renders of all consumers üîå DevTools Built-in support for Redux DevTools ‚ùå No DevTools üßµ Async Logic Built-in with createAsyncThunk Needs custom setup üì¶ Scalability Highly scalable (slices, modular code) Not ideal for large apps üîß Boilerplate Minimal with RTK Less than raw Redux, but Context still has limitations üîí Predictability More structured and strict More flexible but can lead to mess Use Context API: For theme, language, auth user ‚Äì simple state Use Redux Toolkit: For complex state logic, shared global data, multiple components, async logic Redux Flow Diagram: üì¶ Store ‚Äì Global State Container The store is where all the application state lives. It combines different reducers (e.g., user, products, carts) into one centralized global state. The store is created using configureStore() in Redux Toolkit. üß© Reducers ‚Äì Handle State Changes Reducers are functions that decide how the state should change in response to actions. Each reducer manages its own slice of state (e.g., user state, products state, carts state). Redux Toolkit allows you to define reducers inside createSlice(). üéØ Action ‚Äì Event Trigger An action is a plain JavaScript object that describes what happened. Actions are sent from components using dispatch() and are automatically created via createSlice() in RTK. For example:\n{ type: \u0026quot;cart/addToCart\u0026quot;, payload: { id: 1, name: \u0026quot;Product A\u0026quot; } } üßµ From App.jsx (Any Component) Any component (like App.jsx or its children) can: Read data using useSelector() ‚Äì it\u0026rsquo;s read-only, not mutable. Send actions using useDispatch() to update the global state. Installation and Usage 1. Install Redux Toolkit and React-Redux Add the Redux Toolkit and React-Redux packages to your project:\nnpm install @reduxjs/toolkit react-redux 2. Create a Redux Store Create a file named src/app/store.js. Import the configureStore API from Redux Toolkit. We\u0026rsquo;ll start by creating an empty Redux store, and exporting it:\nimport { configureStore } from \u0026#39;@reduxjs/toolkit\u0026#39; export const store = configureStore({ reducer: {}, }) 3. Provide the Redux Store to React Once the store is created, we can make it available to our React components by putting a React-Redux \u0026lt;Provider\u0026gt; around our application in src/index.js. Import the Redux store we just created, put a \u0026lt;Provider\u0026gt; around your \u0026lt;App\u0026gt;, and pass the store as a prop:\ncreateRoot(document.getElementById(\u0026#34;root\u0026#34;)).render( \u0026lt;Provider store={store}\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;/Provider\u0026gt; ); Note: Redux installed and below is example usage\n4. Create a Redux State Slice import { createSlice } from \u0026#39;@reduxjs/toolkit\u0026#39; const initialState = { value: 0, } export const counterSlice = createSlice({ name: \u0026#39;counter\u0026#39;, initialState, reducers: { increment: (state) =\u0026gt; { // Redux Toolkit allows us to write \u0026#34;mutating\u0026#34; logic in reducers. It // doesn\u0026#39;t actually mutate the state because it uses the Immer library, // which detects changes to a \u0026#34;draft state\u0026#34; and produces a brand new // immutable state based off those changes state.value += 1 }, decrement: (state) =\u0026gt; { state.value -= 1 }, incrementByAmount: (state, action) =\u0026gt; { state.value += action.payload }, }, }) // Action creators are generated for each case reducer function export const { increment, decrement, incrementByAmount } = counterSlice.actions export default counterSlice.reducer 5. Add Slice Reducers to the Store import { configureStore } from \u0026#39;@reduxjs/toolkit\u0026#39; import counterReducer from \u0026#39;../features/counter/counterSlice\u0026#39; export const store = configureStore({ reducer: { counter: counterReducer, }, }) 6. Use Redux State and Actions in React Components import React from \u0026#39;react\u0026#39; import { useSelector, useDispatch } from \u0026#39;react-redux\u0026#39; import { decrement, increment } from \u0026#39;./counterSlice\u0026#39; export function Counter() { const count = useSelector((state) =\u0026gt; state.counter.value) const dispatch = useDispatch() return ( \u0026lt;div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button aria-label=\u0026#34;Increment value\u0026#34; onClick={() =\u0026gt; dispatch(increment())} \u0026gt; Increment \u0026lt;/button\u0026gt; \u0026lt;span\u0026gt;{count}\u0026lt;/span\u0026gt; \u0026lt;button aria-label=\u0026#34;Decrement value\u0026#34; onClick={() =\u0026gt; dispatch(decrement())} \u0026gt; Decrement \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) } There is always room for improvement and continuous learning, but we\u0026rsquo;ll end this note/article here. We\u0026rsquo;ve gained valuable knowledge about React ‚Äî congratulations!\n","permalink":"http://localhost:1313/posts/reactjs/","summary":"\u003cp\u003e\u003cimg alt=\"JS Image\" loading=\"lazy\" src=\"/posts/assets/react/react.webp\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReact.js is a JavaScript library for building \u003cstrong\u003euser interfaces\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eDeveloped by \u003cstrong\u003eFacebook\u003c/strong\u003e (now Meta) in 2013.\u003c/li\u003e\n\u003cli\u003eIt is \u003cstrong\u003ecomponent-based\u003c/strong\u003e, \u003cstrong\u003edeclarative\u003c/strong\u003e, and allows for efficient UI updates.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"key-features-of-react\"\u003eKey Features of React\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eComponent-Based Architecture\u003c/strong\u003e: UI is built using reusable components.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVirtual DOM\u003c/strong\u003e: Updates only the changed parts, making React fast.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUnidirectional Data Flow\u003c/strong\u003e: Props and state maintain a predictable data structure.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eJSX (JavaScript XML)\u003c/strong\u003e: A syntax extension that lets you write HTML inside JavaScript.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHooks\u003c/strong\u003e: Allow functional components to have state and other features.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"mutable-vs-immutable\"\u003eMutable vs Immutable\u003c/h2\u003e\n\u003ch3 id=\"mutable-changeable\"\u003eMutable (Changeable)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eMutable data types \u003cstrong\u003ecan be changed\u003c/strong\u003e after creation.\u003c/li\u003e\n\u003cli\u003eExample: \u003cstrong\u003eObjects \u0026amp; Arrays\u003c/strong\u003e are mutable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e arr \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#bd93f9\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#bd93f9\"\u003e3\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003earr.push(\u003cspan style=\"color:#bd93f9\"\u003e4\u003c/span\u003e); \u003cspan style=\"color:#6272a4\"\u003e// Modifies the original array\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#6272a4\"\u003e\u003c/span\u003econsole.log(arr); \u003cspan style=\"color:#6272a4\"\u003e// [1, 2, 3, 4]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"immutable-unchangeable\"\u003eImmutable (Unchangeable)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eImmutable data \u003cstrong\u003ecannot be changed\u003c/strong\u003e directly. Instead, you create a new copy.\u003c/li\u003e\n\u003cli\u003eExample: \u003cstrong\u003eStrings \u0026amp; Numbers\u003c/strong\u003e are immutable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e str \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estr[\u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;M\u0026#34;\u003c/span\u003e; \u003cspan style=\"color:#6272a4\"\u003e// This won\u0026#39;t change the string\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#6272a4\"\u003e\u003c/span\u003econsole.log(str); \u003cspan style=\"color:#6272a4\"\u003e// \u0026#34;Hello\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eExample of immutable object handling (creating a new object instead of modifying the original):\u003c/p\u003e","title":"React ‚Äì A JavaScript Library"},{"content":"\nHow anyone can be more effective with less effort by learning how to identify and leverage the 80/20 principle\u0026ndash;the well-known, unpublicized secret that 80 percent of all our results in business and in life stem from a mere 20 percent of our efforts.\nThe 80/20 principle is one of the great secrets of highly effective people and organizations.\nDid you know, for example, that 20 percent of customers account for 80 percent of revenues? That 20 percent of our time accounts for 80 percent of the work we accomplish? The 80/20 Principle shows how we can achieve much more with much less effort, time, and resources, simply by identifying and focusing our efforts on the 20 percent t at really counts. Although the 80/20 principle has long influenced today\u0026rsquo;s business world, author Richard Koch reveals how the principl works and shows how we can use it in a systematic and practical way to vastly increase our effectiveness, and improve our careers and o r companies.\nThe unspoken corollary to the 80/20 principle is that little of what we spend our time on actually counts. But by concentrating on those things that do, we can unlock the enormous potential of the magic 20 percent, and transform our effectiveness in our jobs, our careers, our businesses, and our lives.\n1) 80/20: The Basics The 80/20 Principle:\n80% of your effort, action, or input will lead to only 20% of your results, output, rewards, or victories. 20% of your efforts, action, or input is what leads to the majority of your results, output, rewards and victories. It is a proven nonlinear approach to everything that happens. You will see this consistently across the board 20% of the pea pods will have 80% of the peas 80% of the money in this world is controlled by 20% of the people 80% of your carpet wear will be on 20% of your carpet 80% of your profits come from 20% of your customers 2) You Can Be great The 80/20 principle states that it is possible for anyone to achieve greatness.\nThe key: Do not spend your time trying to figure out how much effort you will need to become great at something.\nInstead: Figure out what is the right thing for you to do.\njWhat is it that makes you great? What is it that makes you come alive? What is that area where you are the best? If you\u0026rsquo;re spending your time on everything else, you\u0026rsquo;re just going to be wasting your life away, never getting to that point of greatness.\nSo find that area where you can be great and just push on that. Continue to work on that.\nThat may be where you\u0026rsquo;re expending minimum effort but are getting the most benefit from. That is the area where you will get exponential results.\n3) Choose Your Allies One of the most important decisions you can make in your life concerns your allies \u0026ndash; figuring out who are the people you are going to spend time with.\nBut in most cases, people are doing this wrong.\nThe allies they have are by default. They just happened to run into certain kinds of people and hence they associated with them. That how they choose \u0026ndash; or how they don‚Äôt choose \u0026ndash; their allies.\nThese are the wrong kinds of ‚Äúallies.‚Äù Your allies should not be chosen by default People have too many allies. There are just too many people in their lives who do not add much value.\nPeople do not know how to use their allies, how to be able to leverage them.\nThe key to 80/20 thinking Say this: ‚ÄúI\u0026rsquo;m going to choose my allies who are going to help me move forward in my life.‚Äù\nYou\u0026rsquo;re not going to do it by default. It\u0026rsquo;s going to be by design.\nPick a few allies that are powerful. Pick a few that are going to really help you move the needle forward. Don‚Äôt have too many. And then use them properly. Leverage their strengths and they will leverage yours. That\u0026rsquo;s the power of allies. You help each other out and you build each other up and get exponential results in the process.\n4) Design Your Own Game How people play the game of life\nThey play their game of life by default They play the game of life that their parents want them to play, that the society wants them to play They continue to lose at that game because they never designed the game that they are in. But as 80/20 thinkers, we need to design our game \u0026ndash; the game that we most want to play \u0026ndash; then it will be really easy for us to win at that game.\nThose with default conditioning are actually playing someone else\u0026rsquo;s game. They\u0026rsquo;re simply wasting their time playing others‚Äô games, society‚Äôs games, and so on \u0026ndash; anything but their own game, which is what really matters.\nThe greatest innovations and the greatest accomplishments are always a result of people who are designing their own game and hence winning at those games. They\u0026rsquo;re designing their own races of life and are playing in those races, winning in those races, and that\u0026rsquo;s what we need to do.\nWe need to design our own game and win in those games to get exponential results.\n5) Achievement Island / Desert As you look back at your life, what you\u0026rsquo;ll see is That\nthere are short periods of time when you get extreme results there are long periods of time when you got almost no results Wonder what‚Äôs going on?\nThe key to harnessing the power of 80/20:\nRealize that we\u0026rsquo;re gonna have these short periods of extreme results (or the author‚Äôs so-called ‚ÄúAchievement Islands‚Äù)\nTo Do:\nMake a list of all the times in your life where you\u0026rsquo;ve had these Achievement Islands. Be guided by these questions: Where have you had extreme results in very short durations of time? What are the key characteristics of those situations? What are the things that stand out when you think about these moments of extreme results? What happened? Why did you get those results? On the other end, make a list of the times in your life where you almost got no results at all despite trying and trying (‚ÄúAchievement Deserts‚Äù). What happened? What were the common situations or characteristics that were happening during those long periods of time? Now your job is to focus as much as possible on the things where you were getting maximum results. Those are what will get you to move towards your Achievement Islands rather than your Achievement Deserts. 6) 80/20 in Relationships When it comes to relationships, 80/20 principle still holds true.\n80% of your relationships give you only 20% value 20% of your relationships give you 80% value So what you need to do is ensure that you\u0026rsquo;re spending 80% of your relationship time on only 20% of those relationships. These are your high-leverage people, the relationships that are creating the most value.\nWith that, spend only 20% on the remaining 80% people in your life.\nMany people tend to spray their effort with a lot of different relationships (the 80%) all over the place.\nThese are relationships that don\u0026rsquo;t bring them any long-term value. They have a lot of friends, but none of them are real. None of them are actually going to help them build anything useful or accomplish great goals. As an 80/20 practitioner, find a few powerful alliances. These are your key allies ( your 20%).\nDevelop deep relationships with them. Spend a lot of quality time with them in order to strengthen those 20% relationships. Richard Koch says that all we need is just 6-7 key allies, and then we can do tremendously in our lives. We don\u0026rsquo;t need 100, 200, or 500 friends. From there we can leverage the power of our relationships.\nStart figuring out who these people are, or those who will add that value to your life. Design your circle rather than let it happen b default, which happens unfortunately to most people.\n7) Ruthlessly Prune We need to cut down. We don\u0026rsquo;t need to add. We need to remove, to reduce, so that we can get massive results. This process is called ruthless pruning.\nThe problem that happens with most people:\n80% of their time is encroaching on their 20% time where they create the most value. 80% of their allies are encroaching on the 20% that create the most value for them. 80% of your customers actually take up so much value that you end up not having enough value to give to the 20% customers who create the most value for you. Mental energy expended on 80% of your projects is taking away mental energy from. the 20% projects that create the most value/exponential results for you. Actions expended on 80% of your projects do the same thing. They take away from the 20% projects that are creating the most leverage, the most value for you. The same happens with any area of business - marketing efforts, sales effort, strategic efforts, whatever it is.\nThat\u0026rsquo;s why one of the things Jack Welch at G.E said was: ‚ÄúWe\u0026rsquo;re only going to do things that we can be in the Top 2 to Top 3 in the world. If we\u0026rsquo;re not in the Top 2 or Top 3, then we\u0026rsquo;re going to stop doing those things.‚Äù\nHence, we\u0026rsquo;re going to only expend our energy on the 20% things and we\u0026rsquo;re going to ruthlessly prune the 80%, even if there is some result coming from it\u0026hellip; in order to exponentially grow the areas of business and life where we\u0026rsquo;re getting maximum results.\n8) Multiply Output In order to multiply our output, we need to move our resources from an unproductive place to a productive place, from an unproductive arena into an arena, where the resource can be productive.\nEXAMPLE: A hammer is great at hammering a nail but it\u0026rsquo;s not useful when it comes to cutting a piece of cloth. It\u0026rsquo;s not going to help.\nSimilarly, a pair of scissors is great at cutting a piece of cloth but entirely useless when it comes to hammering a nail.\nBoth these resources are very powerful but they have to be used in the right arena and that\u0026rsquo;s the key.\nThat\u0026rsquo;s the 80/20 \u0026ndash; the understanding that the resource needs to be used in the right arena where you get 10x, 100x, even 1000x more improvement or higher productivity.\nThe same holds with you. If you\u0026rsquo;re using your resources and your strengths properly, then you are living in the right arena. You are being highly productive.\nBut if you\u0026rsquo;re not using those strengths properly, if you are using them in the wrong arena, you are in the unproductive zone.\nAgain, our job is to move our resources from an unproductive area to a productive area. That‚Äôs when we can massively multiply our productivity.\nKEY POINTS: The basics - The 80/20 principle in a nutshell. You can be great - How the 80/20 principle can make you, and everyone else, great. Choosing allies - Why choosing your allies is important and how to identify them. Design your own game - Stop living your life by default. Achievement island and desert - Be clear with your ‚Äúachievement islands‚Äù and only build on them. Relationships - How the 80/20 principle applies to our relationships and how we can improve them. Ruthlessly prune - Why we need to reduce, not add, in our lives. Multiplying output - Use your strengths and resources properly in order to multiply your productivity. ","permalink":"http://localhost:1313/posts/80-20-rule/","summary":"\u003cp\u003e\u003cimg alt=\"cover-image\" loading=\"lazy\" src=\"/posts/assets/80-20/80-20.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eHow anyone can be more effective with less effort by learning how to identify and leverage the 80/20 principle\u0026ndash;the well-known, unpublicized secret that 80 percent of all our results in business and in life stem from a mere 20 percent of our efforts.\u003c/p\u003e\n\u003cp\u003eThe 80/20 principle is one of the great secrets of highly effective people and organizations.\u003c/p\u003e\n\u003cp\u003eDid you know, for example, that 20 percent of customers account for 80 percent of revenues? That 20 percent of our time accounts for 80 percent of the work we accomplish? \u003cstrong\u003eThe 80/20 Principle\u003c/strong\u003e shows how\nwe can achieve much more with much less effort, time, and resources, simply by identifying and focusing our efforts on the 20 percent t at really counts. Although the 80/20 principle has long influenced today\u0026rsquo;s business world, author Richard Koch reveals how the principl works and shows how we can use it in a systematic and practical way to vastly increase our effectiveness, and improve our careers and o r companies.\u003c/p\u003e","title":"The 80/20 Principle"},{"content":"\nIn this article, we‚Äôll walk through the complete process of building an AI chatbot web app powered by Google Gemini and deploying it to the web using Vercel. We‚Äôll use AssistantUI, a modern framework to create conversational experiences using powerful LLMs.\nStep 1: Install the Prerequisites Before we begin, make sure the following tools are installed on your machine:\nInstall Visual Studio Code (VS Code). Install Node.js (Node.js). Install Git (Git). Step 2: Set Up the Project Directory Create a folder named chatbot:\nmkdir chatbot \u0026amp;\u0026amp; cd chatbot Open the folder in VS\ncode . Step 3: Scaffold the Assistant UI App npx assistant-ui@latest create This command will prompt you to select a template. Choose the chat template. This will create a new folder named assistant-ui with the necessary files and dependencies.\nStep 4: Set Up Dependencies Move into the generated project folder (likely chatbot):\ncd chatbot Install the required SDKs:\nnpm install ai @assistant-ui/react-ai-sdk @ai-sdk/google Step 5: Integrate Google Gemini API Open the file:\n/app/api/chat/route.ts Clear all content in the file and paste the following code:\nimport { google } from \u0026#34;@ai-sdk/google\u0026#34;; import { streamText } from \u0026#34;ai\u0026#34;; export const maxDuration = 30; export async function POST(req: Request) { const { messages } = await req.json(); const result = streamText({ model: google(\u0026#34;gemini-2.0-flash\u0026#34;), messages, }); return result.toDataStreamResponse(); } Get your Google Gemini API Key from the Google AI Studio.\nStep 6: Store Your API Key Create a new environment file in the root directory:\n.env.local Add the following line:\nGOOGLE_GENERATIVE_AI_API_KEY=\u0026#34;Your_API_KEY\u0026#34; Make sure to replace Your_API_KEY with your actual API key.\nStep 7: Run the Development Server Start your app locally:\nnpm run dev Your application will be live at:\nhttp://localhost:3000 Step 8: Build for Production Build your app for production:\nnpm run build This command will create a .vercel folder in your project directory.\nClean up: Delete the node_modules folder and .env.local file before uploading to GitHub for security reasons.\nStep 9: Upload your code to GitHub Create a new repository on GitHub. Initialize a new Git repository in your project folder: git init Add your files to the repository: git add . Commit your changes: git commit -m \u0026#34;Initial commit\u0026#34; Add the remote repository: git remote add origin https://github.com/\u0026lt;username\u0026gt;/chatbot.git Push your changes: git push -u origin main Step 10: Deploy to vercel Go to Vercel and sign in with your GitHub account. Click on the \u0026ldquo;New Project\u0026rdquo; button. Select your GitHub repository. Vercel will automatically detect the framework and set up the build settings. When prompted, add your API key as an environment variable:\nGOOGLE_GENERATIVE_AI_API_KEY = your_key_here Step 11: Your AI Chatbot is Live! Once the deployment is complete, you will receive a live URL for your chatbot. You can share this URL with anyone to access your AI chatbot.\nFinal Notes Make sure to keep your API key secure and do not expose it in your public repositories. This setup gives you a solid starting point to create intelligent AI interfaces. You can now customize the UI, add more features, or even connect this to a backend for storing user interactions. ","permalink":"http://localhost:1313/posts/chatbot/","summary":"\u003cp\u003e\u003cimg alt=\"Thumbnail Image\" loading=\"lazy\" src=\"/posts/assets/tech/chatbot.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eIn this article, we‚Äôll walk through the complete process of building an AI chatbot web app powered by Google Gemini and deploying it to the web using Vercel. We‚Äôll use AssistantUI, a modern framework to create conversational experiences using powerful LLMs.\u003c/p\u003e\n\u003ch2 id=\"step-1-install-the-prerequisites\"\u003eStep 1: Install the Prerequisites\u003c/h2\u003e\n\u003cp\u003eBefore we begin, make sure the following tools are installed on your machine:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInstall Visual Studio Code (\u003ca href=\"https://code.visualstudio.com\"\u003eVS Code\u003c/a\u003e).\u003c/li\u003e\n\u003cli\u003eInstall Node.js (\u003ca href=\"https://nodejs.org/en/download/\"\u003eNode.js\u003c/a\u003e).\u003c/li\u003e\n\u003cli\u003eInstall Git (\u003ca href=\"https://git-scm.com/downloads\"\u003eGit\u003c/a\u003e).\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-set-up-the-project-directory\"\u003eStep 2: Set Up the Project Directory\u003c/h2\u003e\n\u003cp\u003eCreate a folder named chatbot:\u003c/p\u003e","title":"Build an AI Chatbot Web App with Google Gemini and Deploy on Vercel"},{"content":"Installing MS SQL Server along with Azure Data Studio on Arch Linux requires a combination of Microsoft packages and some extra tweaks since SQL Server isn\u0026rsquo;t natively available for Arch and Azure Data Studio is mainly targeted for Debian/Red Hat based distros.\nStep 1: Install Azure Data Studio Azure Data Studio is available via AUR.\nyay -S azuredatastudio-bin This installs the latest prebuilt version from Microsoft.\nOption 2: Manual (optional) If you want to manually install:\nDownload .tar.gz from Azure Data Studio official packages Extract it: tar -xvzf azuredatastudio-linux-x64.tar.gz cd azuredatastudio-linux-x64 ./azuredatastudio Step 2: Install Microsoft SQL Server (Docker Method ‚Äì Recommended) Microsoft SQL Server is not supported natively on Arch, but the Docker container is fully functional and easiest to manage.\nInstall Docker if you haven‚Äôt: sudo pacman -S docker sudo systemctl enable --now docker sudo usermod -aG docker $USER newgrp docker Pull SQL Server Image: docker pull mcr.microsoft.com/mssql/server:2022-latest Run the Container: docker run -e \u0026#34;ACCEPT_EULA=Y\u0026#34; -e \u0026#34;SA_PASSWORD=YourStrong!Passw0rd\u0026#34; \\ -p 1433:1433 --name sql_server \\ -d mcr.microsoft.com/mssql/server:2022-latest Note: Make sure to use a strong password (uppercase, lowercase, number, symbol, and \u0026gt;8 characters).\nStep 3: Connect SQL Server to Azure Data Studio Launch Azure Data Studio. Click on New Connection. Fill out the fields: Server: localhost Authentication: SQL Login User: sa Password: YourStrong!Passw0rd Hit Connect Step 4: (Optional) Autostart Docker with Hyprland If you want SQL Server to start with your system:\nsudo systemctl enable docker Or add a Hyprland hook to start the container at login:\ndocker start sql_server Conclusion You now have a fully functional SQL Server instance running on Arch Linux via Docker, and you can manage it using Azure Data Studio. This setup allows you to leverage the power of SQL Server without needing to run a full Windows environment.\n","permalink":"http://localhost:1313/posts/sqlserver/","summary":"\u003cp\u003eInstalling MS SQL Server along with Azure Data Studio on Arch Linux requires a combination of Microsoft packages and some extra tweaks since SQL Server isn\u0026rsquo;t natively available for Arch and Azure Data Studio is mainly targeted for Debian/Red Hat based distros.\u003c/p\u003e\n\u003ch2 id=\"step-1-install-azure-data-studio\"\u003eStep 1: Install Azure Data Studio\u003c/h2\u003e\n\u003cp\u003eAzure Data Studio is available via AUR.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eyay -S azuredatastudio-bin\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis installs the latest prebuilt version from Microsoft.\u003c/p\u003e\n\u003ch3 id=\"option-2-manual-optional\"\u003eOption 2: Manual (optional)\u003c/h3\u003e\n\u003cp\u003eIf you want to manually install:\u003c/p\u003e","title":"MS SQL Server and Azure Data Studio on Arch Linux"},{"content":"Database Database is a collection of interrelated data.\nA database is an organized collection of data that can be easily accessed, managed, and updated. It stores data in tables, rows, and columns, allowing efficient retrieval and manipulation. Examples include MySQL, PostgreSQL, and MongoDB. DBMS DBMS(Database Management System) is software used to create, manage, and organize databases.\nA DBMS is software that manages and controls database operations like storing, retrieving, and updating data. It ensures data consistency, security, and integrity while providing an interface for users to interact with the database. Examples include MySQL, Oracle, and Microsoft SQL Server. üöÄ What is RDBMS RDBMS (Relational Database Management System) - is a DBMS based on the concept of tables (also called relations). Data is organized into tables(also known as relations) with rows(records) and columns(attributes). E.g., MySQL, PostgreSQL, SQL Server etc. SQL SQL is Structured Query Language - used to store, manipulate and retrieve data from RDBMS.\nWe use SQL for CRUD Operations:\nCREATE - To Create databases, tables, insert tuples etc. READ - To read data present int the database. UPDATE - Modify already insert data. DELETE - Delete database, table or specific data point/tuple/row or multiple rows. NOTE : SQL keywords are NOT case sensitive. E.g., select is the same as SELECT in SQL.\nCreate Database We can use the the following command to create the database.\nCREATE DATABASE database_name; Delete Database We Can use the DROP command to delete the database.\nDROP DATABASE database_name; Select/Use the Database We can use the USE command to select db and perform operation.\nUSE db_name; SQL vs MySQL SQL is a language used to perform CRUD operations in Relational DB, while MySQL is a RDBMS that uses SQL.\nCreating Table We can create the table in db using the CREATE TABLE command whole syntax is given below.\nCREATE TABLE table_name( column_name1 datatype constraint; column_name2 datatype constraint; column_name3 datatype constraint; ); SQL Data Types In SQL, data types define the kind of data that can be stored in a column or variable.\nDatatype Description Usage CHAR String (0-255), can store characters of fixed length CHAR(50) VARCHAR String (0-255), can store characters up to given length VARCHAR(50) BLOB String (0-65535), can store binary large object BLOB(1000) INT Integer (-2,147,483,648 to 2,147,483,647) INT TINYINT Integer (-128 to 127) TINYINT BIGINT Integer (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807) BIGINT BIT Can store x-bit values. x can range from 1 to 64 BIT(2) FLOAT Decimal number - with precision to 23 digits FLOAT DOUBLE Decimal number - with 24 to 53 digits DOUBLE BOOLEAN Boolean values 0 or 1 BOOLEAN DATE Date in format of YYYY-MM-DD ranging from 1000-01-01 to 9999-12-31 DATE TIME HH:MM:SS TIME YEAR Year in 4-digit format ranging from 1901 to 2155 YEAR Note - CHAR is for fixed length \u0026amp; VARCHAR is for variable length strings. Generally, VARCHAR is better as it only occupies necessary memory \u0026amp; works more efficiently.\nSigned \u0026amp; Unsigned : We can also use UNSIGNED with datatypes when we only have positive values to add. Eg - UNSIGNED INT\nTINYINT UNSIGNED (0 to 255)\nTINYINT (-128 to 127)\nTypes of SQL Commands DDL(Database Definition Language): Used to create, alter, delete database objects like tables, indexes, etc. (CREATE, DROP, ALTER, RENAME, TRUNCATE). DQL(Database Query Language): Used to retrieve data from databases. (SELECT). DML(Database Manipulation Language): Used to modify the database. (INSERT, UPDATE, DELETE). DCL(Database Control Language): Used to grant \u0026amp; revoke permissions. (GRANT, REVOKE). TCL(Transaction Control Language): Used to manage transactions, (COMMIT, ROLLBACK, START TRANSACTIONS, SAVEPOINT). DATABASE related Queries CREATE DATABASE db_name; -- used to create database CREATE DATABASE IF NOT EXISTS db_name; -- create database if database not exist of this name. DROP DATABASE db_name; -- delete database DROP DATABASE IF EXISTS db_name; -- delete database if exists SHOW DATABASES; -- show all databases SHOW TABLES; -- used to show all tables in particular database Table related Queries Create Tables We can use the following syntax to create the table or design the scheme of table.\nCREATE TABLE table_name( column_name1 datatype constraint; column_name2 datatype constraint; ); Example\nCREATE TABLE student( id INT PRIMARY KEY, name VARCHAR(50), age INT NOT NULL ); Select \u0026amp; View ALL columns SELECT * FROM table_name; -- display whole table Insert INSERT INTO table_name (colname1, colname2); VALUES (col1_v1, col2_v1), (col1_v2, col2_v2); Keys Primary Key It is a column (or set of columns) in a table that uniquely identifies each row. (a unique id). There is only 1 Primary Key and it should not be NOT null\nForeign Key A foreign key is a column (or set of columns) in a table that refers to the primary key in another table. There can be multiple FKs. FKs can be have duplicate \u0026amp; null values.\nSecondary Key Secondary key may or may not be unique field. Some times records are required to access by a field other than the primary key. In these situations another key that is used is called secondary key.\nComposite Key Composite key consists of two or more than two fields. Composite key is also designed as a primary key. It is created in a situation when no single field fulfills the property of uniqueness. To make unique more than one field are combined and used as primary key.\nConstraints SQL constraints are used to specify rules for data in a table.\nNOT NULL : columns cannot have null value. col1 INT NOT NULL UNIQUE : all values in column are different. col2 UNIQUE PRIMARY KEY : makes a column unique \u0026amp; not null but used only for one. id INT PRIMARY KEY. also declare as PRIMARY KEY (id). Foreign Key Prevent actions that would destroy links between tables.\nCREATE TABLE temp( cust_id INT, FOREIGN KEY (cust_id) references customer(id) ); DEFAULT sets the default value of a column\nsalary INT DEFAULT default_value; CHECK It can limit the values allowed in a column.\nCREATE TABLE city( id INT PRIMARY KEY, city VARCHAR(50), age INT, CONSTRAINT age_check CHECK (age\u0026gt;= 16 AND city=\u0026#34;Delhi\u0026#34;) ); CREATE TABLE newTab ( age INT CHECK (age\u0026gt;=18) ); Select in Detail SELECT The SELECT statement is used to select data from a database.\nSELECT col1,col2 FROM table_name; To Select All SELECT * FROM table_name; Tip: DISTINCT Keyword Removes duplicate rows from query results.\nSyntax:\nSELECT DISTINCT column1, column2 FROM table_name; Where Clause To define some conditions\nSELECT col1,col2 from table WHERE condition(s). SELECT * FROM student WHERE marks \u0026gt; 80; SELECT * FROM student WHERE city=\u0026#34;Multan\u0026#34;; Operator in WHERE Arithmetic Operators : + , - , * , / , % Comparison Operators : = , != , \u0026gt; , \u0026gt;= , \u0026lt; , \u0026lt;= Logical Operators : AND, OR, NOT, IN, BETWEEN, ALL, LIKE, ANY Bitwise Operators : \u0026amp; , | Operators AND (to check for both conditions to be true) SELECT * FROM student WHERE marks \u0026gt; 80 AND city=\u0026#34;Multan\u0026#34;; OR (to check for one of the conditions to be true) SELECT * FROM student WHERE marks \u0026gt; 90 OR city=\u0026#34;Lahore\u0026#34;; BETWEEN : select for a given range SELECT * FROM student WHERE marks BETWEEN 80 AND 90; IN : (matches any value in the list) SELECT * FROM student WHERE city IN (\u0026#34;Multan\u0026#34;,\u0026#34;Karachi\u0026#34;) NOT : (to negate the given condition) SELECT * FROM student WHERE city NOT IN (\u0026#34;Multan\u0026#34;, \u0026#34;Karachi\u0026#34;) Limit Clause The limit clause is used to sets an upper limit on number of(tuples)rows to be returned.\nSELECT * FROM student LIMIT 3; SELECT col1,col2 FROM table_name LIMIT number; Order by Clause To sort in ascending (ASC) or descending (DESC) order.\nSELECT * FROM student ORDER BY city ASC; SELECT col1,col2 FROM table_name ORDER BY col_name(s) ASC; Aggregate Functions Aggregate functions perform a calculation on a set of values, and return a single value.\nCOUNT() MAX() MIN() SUM() AVG() Get Maximum Marks\nSELECT MAX(marks) FROM student; Get Average marks\nSELECT AVG(marks) FROM student; Group By Clause Group rows that have the same values into summary rows. It collect data from multiple records(rows) and groups the result by one ore more column.\nGenerally we use the group by with some aggregation function.\nCount number of students in each city\nSELECT city, count(name) FROM student GROUP BY city; HAVING Clause Similar to WHERE i.e., applies some condition on rows. Used when we want to apply any condition after grouping.\nCount number of students in each city where max marks cross 90.\nSELECT city, count(rollno) FROM student GROUP BY city HAVING MAX(marks) \u0026gt; 90; General Order SELECT column(s) FROM table_name WHERE condition GROUP BY column(s) HAVING condition ORDER BY column(s) ASC;\nExample:\nSELECT city FROM student WHERE grade = \u0026#34;A\u0026#34; GROUP BY city HAVING MAX(marks) \u0026gt; 90 ORDER BY city DESC; Table related Queries UPDATE is used to update existing rows in a table.\nUPDATE table_name SET col1=val1, col2=val2 WHERE condition; UPDATE student SET grade = \u0026#34;O\u0026#34; WHERE grade = \u0026#34;A\u0026#34;; DELETE is used to delete the existing rows in a table\nDELETE FROM table_name WHERE condition; DELETE FROM student WHERE marks \u0026lt; 33; Foreign Key A foreign key (FK) is a column or a set of columns in a table that establishes a link between data in two tables. It refers to the primary key (PK) in another table, ensuring data integrity and enforcing referential constraints.\nCREATE TABLE Orders ( order_id INT PRIMARY KEY, customer_id INT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); Cascading for FK On Delete Cascade When we create a foreign key using this option, it deletes the referencing rows in the child table when the referenced row is deleted in the parent table which has a primary key.\nOn Update Cascade When we create a foreign key using UPDATE CASCADE the referencing rows are updated in the child table when the referenced row is updated in the parent table which has a primary key.\nCREATE TABLE teacher( id INT PRIMARY KEY, name VARCHAR(50), dept_id INT, FOREIGN KEY (dept_id) references dept(id) ON UPDATE CASCADE ON DELETE CASCADE ); Alter The ALTER is used to change the schema of table in a database.\nADD Column ALTER TABLE table_name ADD COLUMN column_name datatype constraint; DROP Column ALTER TABLE table_name DROP COLUMN column_name; RENAME Column ALTER TABLE table_name RENAME TO new_table_name; CHANGE Column(rename) ALTER TABLE table_name CHANGE COLUMN old_name new_name new_datatype new_constraint; MODIFY Column(modify datatype/ constraint) ALTER TABLE table_name MODIFY col_name new_datatype new_constraint; Truncate The TRUNCATE is used to delete the data of table in database.\nTRUNCATE TABLE table_name ; Joins in SQL JOIN is used to combine rows from two or more tables, based on a related column between them.\n1. Inner Join Returns records that have matching values in both tables Syntax\nSELECT column(s) FROM tableA INNER JOIN tableB ON tableA.col_name = tableB.col_name; Example\nSELECT * FROM student INNER JOIN course ON student.student_id = course.student_id; Tip: SQL aliases are used to give a table, or a column in a table, a temporary name. Aliases are often used to make column names more readable. An alias only exists for the duration of that query. An alias is created with the¬†AS¬†keyword.\nSELECT CustomerID AS ID FROM Customers; 2. Left Join Returns all records from the left table, and the matched records from the right table. Syntax\nSELECT columns(s) FROM talbeA LEFT JOIN tableB ON tableA.col_name = tableB.col_name; Example\nSELECT * FROM student as s LEFT JOIN course as c ON s.student_id = c.student_id; 3. Right Join Returns all records from the right table, and the matched records from the left table\nSyntax\nSELECT column(s) FROM tableA RIGHT JOIN tableB ON tableA.col_name = tableB.col_name; Example\nSELECT * FROM student as s RIGHT JOIN course as c ON s.student_id = c.student_id; 4. Full Join Returns all records when there is a match in either left or right table\nSELECT * FROM student AS s LEFT JOIN course AS c ON s.student_id = c.student_id UNION SELECT * FROM student AS s LEFT JOIN course AS c ON s.student_id = c.student_id; Left Exclusive Join Exclusive joins in SQL are used to retrieve records that exist in one table but not in the other when performing a LEFT JOIN or RIGHT JOIN.\nA Left Exclusive Join retrieves records from the left table that do not have matching records in the right table.\nSELECT * FROM student AS a LEFT JOIN course AS b ON a.id = b.id WHERE b.id IS NULL; Right Exclusive Join A Right Exclusive Join retrieves records from the right table that do not have matching records in the left table.\nSELECT * FROM student AS a RIGHT JOIN course AS b ON a.id = b.id WHERE a.id IS NULL; Self Join It is a regular join but the table is joined with itself.\nSELECT column(s) FROM table as a JOIN table as b ON a.col_name = b.col_name Union It is used to combine the result-set of two or more SELECT statements. Gives UNIQUE records.\nevery SELECT should have same no. of columns columns must have similar data types columns in every SELECT should be in same order SELECT column(s) FROM tableA UNION SELECT column(s) FROM tableB and we can also use the UNION ALL to give all the values including the duplicates records.\nSQL Sub Queries A Subquery or Inner query or a Nested query is a query within another SQL query. It is used to return data that will be used in the main query as a condition.\nIt involves 2 select statements.\nSyntax SELECT column(s) FROM table_name WHERE col_name operator ( subquery ); Example with FROM SELECT MAX(marks) FROM (SELECT marks FROM student WHERE city = \u0026#39;Delhi\u0026#39;) AS temp; MySQL Views A view is a virtual table based on the result-set of an SQL statement.\nA view always shows up-to-date data. The database engine recreates the view, every time a user queries it.\nCREATE VIEW v1 AS SELECT rollno, name, marks FROM student; Stored Procedures in MySQL A Stored Procedure is a precompiled set of SQL statements stored in the database that can be executed repeatedly. It helps encapsulate logic in a modular way, improving reusability, maintainability, and performance.\nBenefits of Stored Procedures Modularity ‚Äì Write once, use many times. Performance ‚Äì Precompiled for faster execution. Security ‚Äì Users can be granted access to run procedures without giving access to underlying tables. Reduced network traffic ‚Äì Fewer queries sent between application and server. Syntax: Creating a Stored Procedure DELIMITER // CREATE PROCEDURE procedure_name ( IN param1 datatype, OUT param2 datatype, INOUT param3 datatype ) BEGIN -- SQL statements go here END // DELIMITER ; Example:\nDELIMITER // CREATE PROCEDURE GetEmployeeByID(IN emp_id INT) BEGIN SELECT * FROM employees WHERE id = emp_id; END // DELIMITER ; Calling a Stored Procedure CALL GetEmployeeByID(1); If there are OUT or INOUT parameters:\nCALL ProcedureName(@out_param); SELECT @out_param; Types of Parameters Type Description IN Input only (passed by value). OUT Output only (value returned). INOUT Both input and output (passed by reference). Modifying or Dropping Stored Procedures DROP PROCEDURE IF EXISTS procedure_name; Alter is not supported: You must drop and recreate the procedure. Control Structures in Stored Procedures IF-ELSE Used to execute different blocks of code based on a condition.\nIF condition THEN -- statements ELSE -- statements END IF; Example:\nDELIMITER // CREATE PROCEDURE CheckAge(IN age INT) BEGIN IF age \u0026gt;= 18 THEN SELECT \u0026#39;You are an adult\u0026#39; AS result; ELSE SELECT \u0026#39;You are a minor\u0026#39; AS result; END IF; END // DELIMITER ; -- Call the procedure CALL CheckAge(20); -- Output: You are an adult CALL CheckAge(15); -- Output: You are a minor CASE Statement Used as an alternative to multiple IF statements when checking several conditions.\nSyntax:\nCASE variable WHEN value1 THEN statement1; WHEN value2 THEN statement2; ELSE statement_default; END CASE; Example:\nDELIMITER // CREATE PROCEDURE GradeResult(IN grade CHAR(1)) BEGIN CASE grade WHEN \u0026#39;A\u0026#39; THEN SELECT \u0026#39;Excellent\u0026#39; AS Result; WHEN \u0026#39;B\u0026#39; THEN SELECT \u0026#39;Good\u0026#39; AS Result; WHEN \u0026#39;C\u0026#39; THEN SELECT \u0026#39;Average\u0026#39; AS Result; ELSE SELECT \u0026#39;Fail or Invalid Grade\u0026#39; AS Result; END CASE; END // DELIMITER ; -- Call the procedure CALL GradeResult(\u0026#39;A\u0026#39;); -- Output: Excellent CALL GradeResult(\u0026#39;D\u0026#39;); -- Output: Fail or Invalid Grade WHILE Loop Repeats a block of statements while the condition is true.\nSyntax\nWHILE condition DO -- statements END WHILE; Example:\nDELIMITER // CREATE PROCEDURE CountToFive() BEGIN DECLARE i INT DEFAULT 1; WHILE i \u0026lt;= 5 DO SELECT CONCAT(\u0026#39;Count: \u0026#39;, i) AS Output; SET i = i + 1; END WHILE; END // DELIMITER ; -- Call the procedure CALL CountToFive(); ## REPEAT Loop Similar to WHILE, but checks the condition after executing the block.\nSyntax:\nREPEAT -- statements UNTIL condition END REPEAT; Example:\nDELIMITER // CREATE PROCEDURE RepeatExample() BEGIN DECLARE i INT DEFAULT 1; REPEAT SELECT CONCAT(\u0026#39;Repeat Count: \u0026#39;, i) AS Output; SET i = i + 1; UNTIL i \u0026gt; 5 END REPEAT; END // DELIMITER ; -- Call the procedure CALL RepeatExample(); Error Handling Use DECLARE ... HANDLER to define how to handle errors.\nSyntax\nDECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN -- Error handling code END; Create the procedure with error handler\nDELIMITER // CREATE PROCEDURE InsertStudent ( IN student_id INT, IN student_name VARCHAR(50) ) BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SELECT \u0026#39;Error occurred while inserting student!\u0026#39; AS ErrorMessage; END; -- Attempt to insert student INSERT INTO students (id, name) VALUES (student_id, student_name); -- Continue execution even if error occurred SELECT \u0026#39;Insert attempt completed.\u0026#39; AS Status; END // DELIMITER ; Show Existing Stored Procedures SHOW PROCEDURE STATUS WHERE Db = \u0026#39;your_database\u0026#39;; Or to view the code:\nSHOW CREATE PROCEDURE procedure_name; ","permalink":"http://localhost:1313/posts/mysql/","summary":"\u003ch2 id=\"database\"\u003eDatabase\u003c/h2\u003e\n\u003cp\u003eDatabase is a collection of interrelated data.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA \u003cstrong\u003edatabase\u003c/strong\u003e is an organized collection of data that can be easily accessed, managed, and updated.\u003c/li\u003e\n\u003cli\u003eIt stores data in tables, rows, and columns, allowing efficient retrieval and manipulation.\u003c/li\u003e\n\u003cli\u003eExamples include MySQL, PostgreSQL, and MongoDB.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"dbms\"\u003eDBMS\u003c/h2\u003e\n\u003cp\u003eDBMS(Database Management System) is software used to create, manage, and organize databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA \u003cstrong\u003eDBMS\u003c/strong\u003e is software that manages and controls database operations like storing, retrieving, and updating data.\u003c/li\u003e\n\u003cli\u003eIt ensures data consistency, security, and integrity while providing an interface for users to interact with the database.\u003c/li\u003e\n\u003cli\u003eExamples include MySQL, Oracle, and Microsoft SQL Server. üöÄ\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"what-is-rdbms\"\u003eWhat is RDBMS\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eRDBMS (Relational Database Management System) - is a DBMS based on the concept of tables (also called relations).\u003c/li\u003e\n\u003cli\u003eData is organized into tables(also known as relations) with rows(records) and columns(attributes).\u003c/li\u003e\n\u003cli\u003eE.g., MySQL, PostgreSQL, SQL Server etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"sql\"\u003eSQL\u003c/h2\u003e\n\u003cp\u003eSQL is \u003cstrong\u003eStructured Query Language\u003c/strong\u003e - used to store, manipulate and retrieve data from RDBMS.\u003c/p\u003e","title":"Introduction to Databases - MySQL"},{"content":"Introduction to GSAP GSAP(Greensock Animation Platform) is a powerful JavaScript animation library that allows you to create high-performance animations for web applications. It is widely used for animating elements with precision and smoothness.\n2. Installing GSAP You can use GSAP in multiple ways:\nCDN\n\u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 3. Basic GSAP Syntax GSAP uses the .to(), .from(), and .fromTo() methods to animate elements.\ngsap.to() ‚Üí Animates from the current state to a new state. gsap.to(\u0026#34;.box\u0026#34;, { x: 200, duration: 1 }); gsap.from() ‚Üí Animates from a given state to the current state. gsap.from(\u0026#34;.box\u0026#34;, { opacity: 0, y: -50, duration: 1 }); gsap.fromTo() ‚Üí Specifies both the start and end states explicitly. gsap.fromTo(\u0026#34;.box\u0026#34;, { x: 0 }, { x: 300, duration: 1 }); 4. Key Properties x, y ‚Üí Move horizontally/vertically scale, scaleX, scaleY ‚Üí Scale size rotation, rotate ‚Üí Rotate element opacity ‚Üí Change transparency skewX, skewY ‚Üí Skew transformation stagger ‚Üí Create a delay between multiple elements Example\ngsap.to(\u0026#34;.box\u0026#34;, { x: 100, scale: 1.5, rotation: 360, duration: 2 }); 5. Timeline for Sequencing Animations GSAP‚Äôs gsap.timeline() helps chain animations in sequence.\nlet tl = gsap.timeline(); tl.to(\u0026#34;.box\u0026#34;, { x: 100, duration: 1 }) .to(\u0026#34;.box\u0026#34;, { y: 100, duration: 1 }) .to(\u0026#34;.box\u0026#34;, { rotation: 360, duration: 1 }); 6. Easing Functions Easing makes animations feel natural.\ngsap.to(\u0026#34;.box\u0026#34;, { x: 300, duration: 2, ease: \u0026#34;bounce.out\u0026#34; }); gsap.to(\u0026#34;.circle\u0026#34;, { y: -100, duration: 1, ease: \u0026#34;elastic.out(1, 0.3)\u0026#34; }); 7. Staggering Animations Use stagger to animate multiple elements with delay.\ngsap.to(\u0026#34;.boxes\u0026#34;, { y: 100, duration: 1, stagger: 0.2 }); 8. ScrollTrigger (GSAP Plugin) To trigger animations on scroll:\nCDN\n\u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Example:\ngsap.to(\u0026#34;.box\u0026#34;, { // Animates the element with class \u0026#34;box\u0026#34; x: 300, // Moves the element 300 pixels to the right duration: 2, // Animation lasts for 2 seconds scrollTrigger: { // Uses the ScrollTrigger plugin to trigger animation on scroll trigger: \u0026#34;.box\u0026#34;, // The animation starts when the \u0026#34;.box\u0026#34; element enters the viewport scroller: \u0026#34;body\u0026#34;, // Specifies the scrolling container (default is \u0026#34;body\u0026#34;) markers: true, // Displays visual markers (start and end points) for debugging start: \u0026#34;top 80%\u0026#34;, // Animation starts when the top of \u0026#34;.box\u0026#34; reaches 80% of the viewport height end: \u0026#34;top 30%\u0026#34;, // Animation ends when the top of \u0026#34;.box\u0026#34; reaches 30% of the viewport height scrub: true, // Makes the animation progress smoothly with scrolling } }); Explanation of ScrollTrigger Properties Property Description trigger Defines which element should trigger the animation when it enters/exits the viewport. scroller Specifies the scrollable container (default is body). Useful when working with scrollable divs. markers Adds visual markers to indicate where the animation starts and ends (for debugging). start Defines when the animation starts. \u0026quot;top 80%\u0026quot; means when the top of .box reaches 80% of the viewport height. end Defines when the animation ends. \u0026quot;top 30%\u0026quot; means when the top of .box reaches 30% of the viewport height. scrub Syncs the animation with the scroll position. If true, the animation plays forward and backward as the user scrolls. Delays the animation by 1 second, creating a smoother transition. if scrub is scrub: 2 it has range 1-5. pin The pin: true property locks (pins) an element in place while the user scrolls past it. Locomotive Locomotive Scroll is a powerful JavaScript library that provides smooth scrolling, parallax effects, and scroll-based animations. It enhances user experience by making scrolling feel more natural.\n1. Installation CDN (Easiest Way) Add this in your HTML file:\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/locomotive-scroll/dist/locomotive-scroll.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/locomotive-scroll/dist/locomotive-scroll.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; NPM/Yarn (Recommended for Projects) npm install locomotive-scroll 2. Basic Setup HTML Structure \u0026lt;body data-scroll-container\u0026gt; \u0026lt;div data-scroll-section\u0026gt; \u0026lt;h1 data-scroll data-scroll-speed=\u0026#34;2\u0026#34;\u0026gt;Smooth Scrolling\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; data-scroll-container ‚Üí Defines the scrollable container. data-scroll ‚Üí Enables scroll animations for elements. data-scroll-speed=\u0026quot;2\u0026quot; ‚Üí Adds a parallax effect. JavaScript Setup const scroll = new LocomotiveScroll({ el: document.querySelector(\u0026#34;[data-scroll-container]\u0026#34;), // Selects the scrollable container smooth: true, // Enables smooth scrolling lerp: 0.1, // Controls scroll smoothness (0 = instant, 1 = no smoothness) }); Key Features \u0026amp; Properties (1) Smooth Scrolling const scroll = new LocomotiveScroll({ el: document.querySelector(\u0026#34;[data-scroll-container]\u0026#34;), smooth: true, // Enables smooth scrolling smoothMobile: false, // Disable smooth scroll on mobile }); (2) Parallax Effects \u0026lt;h1 data-scroll data-scroll-speed=\u0026#34;3\u0026#34;\u0026gt;Parallax Effect\u0026lt;/h1\u0026gt; data-scroll-speed=\u0026quot;3\u0026quot; ‚Üí Moves the text at a different speed than the scroll. (3) Sticky Elements \u0026lt;div data-scroll data-scroll-sticky\u0026gt; \u0026lt;p\u0026gt;I\u0026#39;m sticky!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; data-scroll-sticky ‚Üí Keeps the element fixed while scrolling. (4) Scroll-based Animations scroll.on(\u0026#34;call\u0026#34;, (value, way) =\u0026gt; { if (value === \u0026#34;animate\u0026#34; \u0026amp;\u0026amp; way === \u0026#34;enter\u0026#34;) { document.querySelector(\u0026#34;.box\u0026#34;).classList.add(\u0026#34;active\u0026#34;); } }); Runs animations when an element enters/exits the viewport. (5) Scroll Events scroll.on(\u0026#34;scroll\u0026#34;, (instance) =\u0026gt; { console.log(instance.scroll.y); // Get current scroll position }); Triggers custom functions on scroll events. (6) Destroy \u0026amp; Rebuild Scroll scroll.destroy(); // Stops LocomotiveJS scroll.init(); // Re-initializes scrolling Useful when dynamically updating content. (7). LocomotiveJS with GSAP GSAP works great with LocomotiveJS for advanced animations.\nscroll.on(\u0026#34;scroll\u0026#34;, (args) =\u0026gt; { let progress = args.scroll.y / args.limit; gsap.to(\u0026#34;.progress-bar\u0026#34;, { scaleX: progress }); }); This creates a scroll progress bar animation. Summary Feature Usage Smooth Scrolling smooth: true in the JS setup Parallax Effect data-scroll-speed=\u0026quot;X\u0026quot; Sticky Sections data-scroll-sticky Scroll-based Animations scroll.on(\u0026quot;scroll\u0026quot;, callback) Integration with GSAP ScrollTrigger.scrollerProxy() ","permalink":"http://localhost:1313/posts/gsap-locomotive/","summary":"\u003ch2 id=\"introduction-to-gsap\"\u003eIntroduction to GSAP\u003c/h2\u003e\n\u003cp\u003eGSAP(Greensock Animation Platform) is a powerful JavaScript animation library that allows you to create high-performance animations for web applications. It is widely used for animating elements with precision and smoothness.\u003c/p\u003e\n\u003ch2 id=\"2-installing-gsap\"\u003e2. Installing GSAP\u003c/h2\u003e\n\u003cp\u003eYou can use GSAP in multiple ways:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCDN\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003escript\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003esrc\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003escript\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"3-basic-gsap-syntax\"\u003e3. Basic GSAP Syntax\u003c/h2\u003e\n\u003cp\u003eGSAP uses the \u003ccode\u003e.to()\u003c/code\u003e, \u003ccode\u003e.from()\u003c/code\u003e, and \u003ccode\u003e.fromTo()\u003c/code\u003e methods to animate elements.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003egsap.to()\u003c/code\u003e\u003c/strong\u003e ‚Üí Animates from the current state to a new state.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egsap.to(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;.box\u0026#34;\u003c/span\u003e, { x\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e200\u003c/span\u003e, duration\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003egsap.from()\u003c/code\u003e\u003c/strong\u003e ‚Üí Animates from a given state to the current state.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egsap.from(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;.box\u0026#34;\u003c/span\u003e, { opacity\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e, y\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#bd93f9\"\u003e50\u003c/span\u003e, duration\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003egsap.fromTo()\u003c/code\u003e\u003c/strong\u003e ‚Üí Specifies both the start and end states explicitly.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egsap.fromTo(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;.box\u0026#34;\u003c/span\u003e, { x\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e }, { x\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e300\u003c/span\u003e, duration\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"4-key-properties\"\u003e4. Key Properties\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ex, y\u003c/code\u003e ‚Üí Move horizontally/vertically\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003escale, scaleX, scaleY\u003c/code\u003e ‚Üí Scale size\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erotation, rotate\u003c/code\u003e ‚Üí Rotate element\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eopacity\u003c/code\u003e ‚Üí Change transparency\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eskewX, skewY\u003c/code\u003e ‚Üí Skew transformation\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estagger\u003c/code\u003e ‚Üí Create a delay between multiple elements\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eExample\u003c/em\u003e\u003c/p\u003e","title":"GSAP \u0026 Locomotive Scroll"},{"content":"DOM Manipulation in JavaScript DOM (Document Object Model) Manipulation in JavaScript refers to modifying HTML elements dynamically using JavaScript. This includes selecting, modifying, adding, or removing elements from the webpage.\nSelecting Elements in the DOM Before modifying elements, we need to select them. Here are the different ways:\nMethod Description Example document.getElementById(id) Selects an element by its ID document.getElementById(\u0026quot;myDiv\u0026quot;) document.getElementsByClassName(className) Selects elements by class name (returns an HTMLCollection) document.getElementsByClassName(\u0026quot;myClass\u0026quot;) document.getElementsByTagName(tagName) Selects elements by tag name (returns an HTMLCollection) document.getElementsByTagName(\u0026quot;p\u0026quot;) document.querySelector(selector) Selects the first element that matches the CSS selector document.querySelector(\u0026quot;.myClass\u0026quot;) document.querySelectorAll(selector) Selects all elements that match the CSS selector (returns a NodeList) document.querySelectorAll(\u0026quot;div\u0026quot;) Examples of Selection Methods 1. Selecting an Element by ID let title = document.getElementById(\u0026#34;main-title\u0026#34;); console.log(title.innerText); // Logs the text inside the element 2. Selecting Elements by Class Name let items = document.getElementsByClassName(\u0026#34;item\u0026#34;); console.log(items[0].innerText); // Logs the first element\u0026#39;s text 3. Selecting Elements by Tag Name let paragraphs = document.getElementsByTagName(\u0026#34;p\u0026#34;); console.log(paragraphs.length); // Logs the number of \u0026lt;p\u0026gt; elements 4. Selecting an Element Using querySelector() Returns only the first matching element.\nlet firstItem = document.querySelector(\u0026#34;.item\u0026#34;); // Selects the first `.item` console.log(firstItem.innerText); 5. Selecting Multiple Elements Using querySelectorAll() Returns a NodeList, supports .forEach().\nlet allItems = document.querySelectorAll(\u0026#34;.item\u0026#34;); // Selects all `.item` allItems.forEach((item) =\u0026gt; console.log(item.innerText)); innerHTML vs innerText vs textContent in JavaScript 1. innerHTML ‚úÖ Gets or sets the HTML content (including tags) inside an element.\n‚úÖ Parses and renders HTML if assigned.\n‚ùå Can expose security risks (XSS attacks) if inserting user input.\nlet h1 = document.querySelector(\u0026#34;h1\u0026#34;); h1.innerHTML += \u0026#34; \u0026lt;i\u0026gt;hello\u0026lt;/i\u0026gt;\u0026#34;; 2. innerText ‚úÖ Gets or sets only the visible text inside an element.\n‚úÖ Ignores hidden elements (like display: none;).\n‚ùå Does not retain HTML tags.\nlet h1 = document.querySelector(\u0026#34;h1\u0026#34;); h1.innerText += \u0026#34;Hack the Planat\u0026#34;; 3. textContent ‚úÖ Gets or sets all text (including hidden text) inside an element.\n‚úÖ Preserves whitespace and hidden elements (e.g., display: none;).\n‚ùå Does not interpret HTML tags.\nlet h1 = document.querySelector(\u0026#34;h1\u0026#34;); h1.textContent += \u0026#34; Hack the Planat\u0026#34;; Key Differences Between innerHTML, innerText, and textContent Property HTML Support Includes Hidden Text? Performance Security Risks? innerHTML ‚úÖ Supports HTML ‚úÖ Yes ‚ùå Slower (parses HTML) ‚ùå Vulnerable to XSS innerText ‚ùå No HTML ‚ùå No ‚úÖ Faster ‚úÖ Safe textContent ‚ùå No HTML ‚úÖ Yes ‚úÖ Fastest ‚úÖ Safe Manipulating Styles \u0026amp; Classes in JavaScript JavaScript allows us to dynamically change the styles and classes of HTML elements using:\nelement.style ‚Äì for inline styles element.classList ‚Äì for adding, removing, toggling, and checking classes 1. element.style (Manipulating Inline Styles) ‚úÖ Modifies individual CSS properties directly\n‚úÖ Only applies inline styles, does NOT affect CSS classes\n‚ùå Does not allow setting multiple styles at once using a string\n\u0026lt;div id=\u0026#34;box\u0026#34; style=\u0026#34;width: 100px; height: 100px; background: red;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;button onclick=\u0026#34;changeStyle()\u0026#34;\u0026gt;Change Style\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; function changeStyle() { let box = document.getElementById(\u0026#34;box\u0026#34;); box.style.backgroundColor = \u0026#34;blue\u0026#34;; // Change background color box.style.width = \u0026#34;200px\u0026#34;; // Change width box.style.height = \u0026#34;200px\u0026#34;; // Change height } \u0026lt;/script\u0026gt; ‚úÖ Before Clicking: Red box (100x100)\n‚úÖ After Clicking: Blue box (200x200)\n2. element.classList (Manipulating Classes) ‚úÖ Adds, removes, toggles, and checks classes efficiently\n‚úÖ Does NOT override existing styles like style does\nMethods of classList Method Description Example add(className) Adds a class element.classList.add(\u0026quot;new-class\u0026quot;) remove(className) Removes a class element.classList.remove(\u0026quot;old-class\u0026quot;) toggle(className) Toggles a class (adds if not present, removes if present) element.classList.toggle(\u0026quot;active\u0026quot;) contains(className) Checks if a class exists element.classList.contains(\u0026quot;hidden\u0026quot;) replace(oldClass, newClass) Replaces an old class with a new one element.classList.replace(\u0026quot;old\u0026quot;, \u0026quot;new\u0026quot;) \u0026lt;style\u0026gt; .box { width: 100px; height: 100px; background: red; } .big { width: 200px; height: 200px; } .blue { background: blue; } \u0026lt;/style\u0026gt; \u0026lt;div id=\u0026#34;box\u0026#34; class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSize()\u0026#34;\u0026gt;Toggle Size\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;toggleColor()\u0026#34;\u0026gt;Toggle Color\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; let box = document.getElementById(\u0026#34;box\u0026#34;); function toggleSize() { box.classList.toggle(\u0026#34;big\u0026#34;); // Toggles between small and big size } function toggleColor() { box.classList.toggle(\u0026#34;blue\u0026#34;); // Toggles background color } \u0026lt;/script\u0026gt; Creating and Deleting Elements in JavaScript DOM Manipulation Once you\u0026rsquo;ve selected elements in the DOM, the next step in DOM manipulation is creating new elements and removing existing ones dynamically.\ndocument.createElement(tagName) ‚Üí Creates a new element parent.appendChild(childElement) ‚Üí Adds an element inside another element parent.removeChild(childElement) ‚Üí Removes a child element from its parent Creating Elements ‚Äì document.createElement() ‚úÖ Creates a new element in memory (not yet visible in the DOM).\n‚úÖ You can set attributes, styles, and inner content before adding it to the DOM.\n‚ùå Must be appended manually to be visible in the DOM.\nconst newDiv = document.createElement(\u0026#39;div\u0026#39;); // Creates a \u0026lt;div\u0026gt; element newDiv.textContent = \u0026#34;Hello, this is a new div!\u0026#34;; // Adds text inside the div newDiv.classList.add(\u0026#39;new-class\u0026#39;); // Adds a class to the div console.log(newDiv); // Logs the newly created \u0026lt;div\u0026gt; Appending Elements ‚Äì appendChild() ‚úÖ Inserts a new child element inside a parent. ‚úÖ Moves elements if they already exist (won\u0026rsquo;t duplicate them).\nconst parent = document.getElementById(\u0026#39;container\u0026#39;); // Select an existing parent element parent.appendChild(newDiv); // Adds the new div inside the parent element insertBefore() ‚Äì Insert Before a Specific Element Inserts a new element before an existing child element.\nconst firstChild = parent.firstElementChild; // Get the first child of the parent parent.insertBefore(newDiv, firstChild); // Insert newDiv before the first child Removing Elements ‚Äì removeChild() ‚úÖ Deletes a child element from its parent.\n‚ùå If the element does not exist inside the parent, it throws an error.\nparent.removeChild(firstChild); // Removes the first child from the parent Removing an Element Directly (remove()) Instead of removeChild(), you can use element.remove() (modern method).\nnewDiv.remove(); // Removes the newly created \u0026lt;div\u0026gt; Summary Action Method Create an element document.createElement('tag') Add an element inside another appendChild(element), append(element) Insert before another element insertBefore(newElement, existingChild) Remove an element from the DOM removeChild(element), remove() What is addEventListener() An event listener is a method that allows you to wait for a specific event (like a click, keypress, hover, etc.) and run a function when the event occurs.\nelement.addEventListener(event, function, useCapture); Parameter Description event The type of event (e.g., \u0026quot;click\u0026quot;, \u0026quot;mouseover\u0026quot;, \u0026quot;keydown\u0026quot;) function The function to run when the event occurs useCapture (optional) true for event capturing, false for bubbling (default: false) Basic Example: Click Event\n\u0026lt;button id=\u0026#34;myBtn\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#34;myBtn\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function() { alert(\u0026#34;Button Clicked!\u0026#34;); }); \u0026lt;/script\u0026gt; Removing an Event Listener with removeEventListener() To remove an event, you must use a named function.\n\u0026lt;button id=\u0026#34;myBtn\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;remove\u0026#34;\u0026gt;Remove Event\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; function showAlert() { alert(\u0026#34;Button Clicked!\u0026#34;); } let btn = document.getElementById(\u0026#34;myBtn\u0026#34;); btn.addEventListener(\u0026#34;click\u0026#34;, showAlert); document.getElementById(\u0026#34;remove\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function() { btn.removeEventListener(\u0026#34;click\u0026#34;, showAlert); // Removes event }); \u0026lt;/script\u0026gt; Event Object (event) Every event passes an event object (e) that gives details about the event.\n\u0026lt;button id=\u0026#34;btn\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#34;btn\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function(event) { console.log(\u0026#34;Event Type:\u0026#34;, event.type); console.log(\u0026#34;Clicked Element:\u0026#34;, event.target); console.log(\u0026#34;Mouse Coordinates:\u0026#34;, event.clientX, event.clientY); }); \u0026lt;/script\u0026gt; JavaScript Events ‚Äì Cheat Sheet Category Event Description üñ±Ô∏è Mouse Events click Fires when an element is clicked dblclick Fires when an element is double-clicked mousedown Fires when a mouse button is pressed down mouseup Fires when a mouse button is released mousemove Fires when the mouse moves over an element mouseenter Fires when the mouse enters an element (does not bubble) mouseleave Fires when the mouse leaves an element (does not bubble) mouseover Fires when the mouse enters an element or its children (bubbles) mouseout Fires when the mouse leaves an element or its children (bubbles) contextmenu Fires when the right mouse button is clicked (opens the context menu) ‚å®Ô∏è Keyboard Events keydown Fires when any key is pressed down (includes special keys like Shift, Enter) keyup Fires when a key is released keypress (deprecated) Fires when a key is pressed (only for character keys) üìù Form Events submit Fires when a form is submitted change Fires when an input/select field value changes input Fires when the user types in an input field focus Fires when an element gains focus blur Fires when an element loses focus reset Fires when a form is reset üåç Window/Document Events load Fires when the entire page has loaded (including images) DOMContentLoaded Fires when the HTML document is fully loaded (before images \u0026amp; stylesheets) resize Fires when the window is resized scroll Fires when the user scrolls the page unload Fires when the user leaves the page beforeunload Fires when the user is about to leave the page (can show a confirmation) visibilitychange Fires when the page visibility changes (e.g., switching tabs) üìã Clipboard Events copy Fires when content is copied cut Fires when content is cut paste Fires when content is pasted üèóÔ∏è Drag \u0026amp; Drop Events drag Fires when an element is being dragged dragstart Fires when dragging starts dragend Fires when dragging ends dragover Fires when a dragged element is over a valid drop target dragenter Fires when a dragged element enters a drop target dragleave Fires when a dragged element leaves a drop target drop Fires when a dragged element is dropped üéµüìΩÔ∏è Media Events play Fires when media (audio/video) starts playing pause Fires when media is paused ended Fires when media reaches the end volumechange Fires when the volume is changed timeupdate Fires when the current playback position changes üëÄ Focus \u0026amp; Blur Events focus Fires when an element gains focus blur Fires when an element loses focus üì± Touch Events (Mobile) touchstart Fires when a touch point is placed on the screen touchmove Fires when a touch point moves across the screen touchend Fires when a touch point is removed from the screen ‚ö° Other Useful Events error Fires when an error occurs while loading an image, script, or resource online Fires when the browser goes online offline Fires when the browser goes offline hashchange Fires when the URL hash changes (window.location.hash) ","permalink":"http://localhost:1313/posts/dom-js/","summary":"\u003ch1 id=\"dom-manipulation-in-javascript\"\u003eDOM Manipulation in JavaScript\u003c/h1\u003e\n\u003cp\u003eDOM (Document Object Model) Manipulation in JavaScript refers to \u003cstrong\u003emodifying HTML elements dynamically\u003c/strong\u003e using JavaScript. This includes \u003cstrong\u003eselecting, modifying, adding, or removing elements\u003c/strong\u003e from the webpage.\u003c/p\u003e\n\u003ch2 id=\"selecting-elements-in-the-dom\"\u003eSelecting Elements in the DOM\u003c/h2\u003e\n\u003cp\u003eBefore modifying elements, we need to \u003cstrong\u003eselect\u003c/strong\u003e them. Here are the different ways:\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003cstrong\u003eMethod\u003c/strong\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementById(id)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects an element by its \u003cstrong\u003eID\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementById(\u0026quot;myDiv\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByClassName(className)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects elements by \u003cstrong\u003eclass name\u003c/strong\u003e (returns an HTMLCollection)\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByClassName(\u0026quot;myClass\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByTagName(tagName)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects elements by \u003cstrong\u003etag name\u003c/strong\u003e (returns an HTMLCollection)\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByTagName(\u0026quot;p\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelector(selector)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects \u003cstrong\u003ethe first\u003c/strong\u003e element that matches the CSS selector\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelector(\u0026quot;.myClass\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelectorAll(selector)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects \u003cstrong\u003eall\u003c/strong\u003e elements that match the CSS selector (returns a NodeList)\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelectorAll(\u0026quot;div\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"examples-of-selection-methods\"\u003eExamples of Selection Methods\u003c/h2\u003e\n\u003ch3 id=\"1-selecting-an-element-by-id\"\u003e1. Selecting an Element by ID\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e title \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edocument\u003c/span\u003e.getElementById(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;main-title\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole.log(title.innerText); \u003cspan style=\"color:#6272a4\"\u003e// Logs the text inside the element\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-selecting-elements-by-class-name\"\u003e2. Selecting Elements by Class Name\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e items \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edocument\u003c/span\u003e.getElementsByClassName(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;item\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole.log(items[\u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e].innerText); \u003cspan style=\"color:#6272a4\"\u003e// Logs the first element\u0026#39;s text\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-selecting-elements-by-tag-name\"\u003e3. Selecting Elements by Tag Name\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e paragraphs \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edocument\u003c/span\u003e.getElementsByTagName(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;p\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole.log(paragraphs.length); \u003cspan style=\"color:#6272a4\"\u003e// Logs the number of \u0026lt;p\u0026gt; elements\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"4-selecting-an-element-using-queryselector\"\u003e4. Selecting an Element Using querySelector()\u003c/h3\u003e\n\u003cp\u003eReturns \u003cstrong\u003eonly the first matching\u003c/strong\u003e element.\u003c/p\u003e","title":"DOM Manipulation in JavaScript"},{"content":"Arrays Objects allow you to store keyed collections of values. That‚Äôs fine.\nBut quite often we find that we need an¬†ordered collection, where we have a 1st, a 2nd, a 3rd element and so on. For example, we need that to store a list of something: users, goods, HTML elements etc.\nIt is not convenient to use an object here, because it provides no methods to manage the order of elements. We can‚Äôt insert a new property ‚Äúbetween‚Äù the existing ones. Objects are just not meant for such use.\nThere exists a special data structure named¬†Array, to store ordered collections.\nDeclaration There are two syntaxes for creating an empty array:\nlet arr = new Array(); let arr = []; Almost all the time, the second syntax is used. We can supply initial elements in the brackets:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; Array elements are numbered, starting with zero.\nWe can get an element by its number in square brackets:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits[0] ); // Apple alert( fruits[1] ); // Orange alert( fruits[2] ); // Plum We can replace an element:\nfruits[2] = \u0026#39;Pear\u0026#39;; // now [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;] ‚Ä¶Or add a new one to the array:\nfruits[3] = \u0026#39;Lemon\u0026#39;; // now [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;, \u0026#34;Lemon\u0026#34;] The total count of the elements in the array is its¬†length:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits.length ); // 3 We can also use alert to show the whole array.\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits ); // Apple,Orange,Plum An array can store elements of any type.\nFor instance:\n// mix of values let arr = [ \u0026#39;Apple\u0026#39;, { name: \u0026#39;John\u0026#39; }, true, function() { alert(\u0026#39;hello\u0026#39;); } ]; // get the object at index 1 and then show its name alert( arr[1].name ); // John // get the function at index 3 and run it arr[3](); // hello Get last elements with ‚Äúat‚Äù Let‚Äôs say we want the last element of the array.\nSome programming languages allow the use of negative indexes for the same purpose, like¬†fruits[-1].\nAlthough, in JavaScript it won‚Äôt work. The result will be¬†undefined, because the index in square brackets is treated literally.\nWe can explicitly calculate the last element index and then access it:¬†fruits[fruits.length - 1].\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits[fruits.length-1] ); // Plum A bit cumbersome, isn‚Äôt it? We need to write the variable name twice.\nLuckily, there‚Äôs a shorter syntax:¬†fruits.at(-1):\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; // same as fruits[fruits.length-1] alert( fruits.at(-1) ); // Plum In other words,¬†arr.at(i):\nis exactly the same as¬†arr[i], if¬†i \u0026gt;= 0. for negative values of¬†i, it steps back from the end of the array. Methods pop/push, shift/unshift A¬†queue¬†is one of the most common uses of an array. In computer science, this means an ordered collection of elements which supports two operations:\npush¬†appends an element to the end. shift¬†get an element from the beginning, advancing the queue, so that the 2nd element becomes the 1st. Arrays support both operations.\nIn practice we need it very often. For example, a queue of messages that need to be shown on-screen.\nThere‚Äôs another use case for arrays ‚Äì the data structure named¬†stack.\nIt supports two operations:\npush¬†adds an element to the end. pop¬†takes an element from the end. So new elements are added or taken always from the ‚Äúend‚Äù.\nA stack is usually illustrated as a pack of cards: new cards are added to the top or taken from the top:\nFor stacks, the latest pushed item is received first, that‚Äôs also called LIFO (Last-In-First-Out) principle. For queues, we have FIFO (First-In-First-Out).\nArrays in JavaScript can work both as a queue and as a stack. They allow you to add/remove elements, both to/from the beginning or the end.\nIn computer science, the data structure that allows this, is called¬†deque.\nMethods that work with the end of the array:\npop\nExtracts the last element of the array and returns it:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; alert( fruits.pop() ); // remove \u0026#34;Pear\u0026#34; and alert it alert( fruits ); // Apple, Orange Both¬†fruits.pop()¬†and¬†fruits.at(-1)¬†return the last element of the array, but¬†fruits.pop()¬†also modifies the array by removing it.\npush\nAppend the element to the end of the array:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;]; fruits.push(\u0026#34;Pear\u0026#34;); alert( fruits ); // Apple, Orange, Pear The call¬†fruits.push(...)¬†is equal to¬†fruits[fruits.length] = ....\nMethods that work with the beginning of the array:\nshift\nExtracts the first element of the array and returns it:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; alert( fruits.shift() ); // remove Apple and alert it alert( fruits ); // Orange, Pear unshift\nAdd the element to the beginning of the array:\nlet fruits = [\u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; fruits.unshift(\u0026#39;Apple\u0026#39;); alert( fruits ); // Apple, Orange, Pear Methods¬†push¬†and¬†unshift¬†can add multiple elements at once:\nlet fruits = [\u0026#34;Apple\u0026#34;]; fruits.push(\u0026#34;Orange\u0026#34;, \u0026#34;Peach\u0026#34;); fruits.unshift(\u0026#34;Pineapple\u0026#34;, \u0026#34;Lemon\u0026#34;); // [\u0026#34;Pineapple\u0026#34;, \u0026#34;Lemon\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Peach\u0026#34;] alert( fruits ); Objects As we know from the chapter¬†Data types, there are eight data types in JavaScript. Seven of them are called ‚Äúprimitive‚Äù, because their values contain only a single thing (be it a string or a number or whatever).\nIn contrast, objects are used to store keyed collections of various data and more complex entities. In JavaScript, objects penetrate almost every aspect of the language. So we must understand them first before going in-depth anywhere else.\nAn object can be created with figure brackets¬†{‚Ä¶}¬†with an optional list of¬†properties. A property is a ‚Äúkey: value‚Äù pair, where¬†key¬†is a string (also called a ‚Äúproperty name‚Äù), and¬†value¬†can be anything.\nWe can imagine an object as a cabinet with signed files. Every piece of data is stored in its file by the key. It‚Äôs easy to find a file by its name or add/remove a file.\nAn empty object (‚Äúempty cabinet‚Äù) can be created using one of two syntaxes:\nlet user = new Object(); // \u0026#34;object constructor\u0026#34; syntax let user = {}; // \u0026#34;object literal\u0026#34; syntax Usually, the figure brackets¬†{...}¬†are used. That declaration is called an¬†object literal.\nLiterals and properties We can immediately put some properties into¬†{...}¬†as ‚Äúkey: value‚Äù pairs:\nlet user = { // an object name: \u0026#34;John\u0026#34;, // by key \u0026#34;name\u0026#34; store value \u0026#34;John\u0026#34; age: 30 // by key \u0026#34;age\u0026#34; store value 30 }; A property has a key (also known as ‚Äúname‚Äù or ‚Äúidentifier‚Äù) before the colon¬†\u0026quot;:\u0026quot;¬†and a value to the right of it.\nIn the¬†user¬†object, there are two properties:\nThe first property has the name¬†\u0026quot;name\u0026quot;¬†and the value¬†\u0026quot;John\u0026quot;. The second one has the name¬†\u0026quot;age\u0026quot;¬†and the value¬†30. The resulting¬†user¬†object can be imagined as a cabinet with two signed files labeled ‚Äúname‚Äù and ‚Äúage‚Äù.\nWe can add, remove and read files from it at any time.\nProperty values are accessible using the dot notation:\n// get property values of the object: alert( user.name ); // John alert( user.age ); // 30 The value can be of any type. Let‚Äôs add a boolean one:\nuser.isAdmin = true To remove a property, we can use the¬†delete¬†operator:\ndelete user.age; We can also use multiword property names, but then they must be quoted:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, \u0026#34;likes birds\u0026#34;: true // multiword property name must be quoted }; The last property in the list may end with a comma:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, } That is called a ‚Äútrailing‚Äù or ‚Äúhanging‚Äù comma. Makes it easier to add/remove/move around properties, because all lines become alike.\nSquare brackets For multiword properties, the dot access doesn‚Äôt work:\n// this would give a syntax error user.likes birds = true JavaScript doesn‚Äôt understand that. It thinks that we address¬†user.likes, and then gives a syntax error when comes across unexpected¬†birds.\nThe dot requires the key to be a valid variable identifier. That implies: contains no spaces, doesn‚Äôt start with a digit and doesn‚Äôt include special characters ($¬†and¬†_¬†are allowed).\nThere‚Äôs an alternative ‚Äúsquare bracket notation‚Äù that works with any string:\nlet user = {}; // set user[\u0026#34;likes birds\u0026#34;] = true; // get alert(user[\u0026#34;likes birds\u0026#34;]); // true // delete delete user[\u0026#34;likes birds\u0026#34;]; Now everything is fine. Please note that the string inside the brackets is properly quoted (any type of quotes will do).\nSquare brackets also provide a way to obtain the property name as the result of any expression ‚Äì as opposed to a literal string ‚Äì like from a variable as follows:\nlet key = \u0026#34;likes birds\u0026#34;; // same as user[\u0026#34;likes birds\u0026#34;] = true; user[key] = true; Here, the variable¬†key¬†may be calculated at run-time or depend on the user input. And then we use it to access the property. That gives us a great deal of flexibility.\nFor instance:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; let key = prompt(\u0026#34;What do you want to know about the user?\u0026#34;, \u0026#34;name\u0026#34;); // access by variable alert( user[key] ); // John (if enter \u0026#34;name\u0026#34;) The dot notation cannot be used in a similar way:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; let key = \u0026#34;name\u0026#34;; alert( user.key ) // undefined Computed properties We can use square brackets in an object literal, when creating an object. That‚Äôs called¬†computed properties.\nFor instance:\nlet fruit = prompt(\u0026#34;Which fruit to buy?\u0026#34;, \u0026#34;apple\u0026#34;); let bag = { [fruit]: 5, // the name of the property is taken from the variable fruit }; alert( bag.apple ); // 5 if fruit=\u0026#34;apple\u0026#34; The meaning of a computed property is simple:¬†[fruit]¬†means that the property name should be taken from¬†fruit.\nSo, if a visitor enters¬†\u0026quot;apple\u0026quot;,¬†bag¬†will become¬†{apple: 5}.\nEssentially, that works the same as:\nlet fruit = prompt(\u0026#34;Which fruit to buy?\u0026#34;, \u0026#34;apple\u0026#34;); let bag = {}; // take property name from the fruit variable bag[fruit] = 5; ‚Ä¶But looks nicer.\nWe can use more complex expressions inside square brackets:\nlet fruit = \u0026#39;apple\u0026#39;; let bag = { [fruit + \u0026#39;Computers\u0026#39;]: 5 // bag.appleComputers = 5 }; Square brackets are much more powerful than dot notation. They allow any property names and variables. But they are also more cumbersome to write.\nSo most of the time, when property names are known and simple, the dot is used. And if we need something more complex, then we switch to square brackets.\nProperty value shorthand In real code, we often use existing variables as values for property names.\nFor instance:\nfunction makeUser(name, age) { return { name: name, age: age, // ...other properties }; } let user = makeUser(\u0026#34;John\u0026#34;, 30); alert(user.name); // John variable is so common, that there‚Äôs a special¬†property value shorthand¬†to make it shorter.\nInstead of¬†name:name¬†we can just write¬†name, like this:\nfunction makeUser(name, age) { return { name, // same as name: name age, // same as age: age // ... }; } We can use both normal properties and shorthands in the same object:\nlet user = { name, // same as name:name age: 30 }; Property names limitations As we already know, a variable cannot have a name equal to one of the language-reserved words like ‚Äúfor‚Äù, ‚Äúlet‚Äù, ‚Äúreturn‚Äù etc.\nBut for an object property, there‚Äôs no such restriction:\n// these properties are all right let obj = { for: 1, let: 2, return: 3 }; alert( obj.for + obj.let + obj.return ); // 6 In short, there are no limitations on property names. They can be any strings or symbols (a special type for identifiers, to be covered later).\nOther types are automatically converted to strings.\nFor instance, a number¬†0¬†becomes a string¬†\u0026quot;0\u0026quot;¬†when used as a property key:\nlet obj = { 0: \u0026#34;test\u0026#34; // same as \u0026#34;0\u0026#34;: \u0026#34;test\u0026#34; }; // both alerts access the same property (the number 0 is converted to string \u0026#34;0\u0026#34;) alert( obj[\u0026#34;0\u0026#34;] ); // test alert( obj[0] ); // test (same property) Property existence test, ‚Äúin‚Äù operator A notable feature of objects in JavaScript, compared to many other languages, is that it‚Äôs possible to access any property. There will be no error if the property doesn‚Äôt exist!\nReading a non-existing property just returns undefined. So we can easily test whether the property exists:\nlet user = {}; alert( user.noSuchProperty === undefined ); // true means \u0026#34;no such property\u0026#34; There‚Äôs also a special operator¬†\u0026quot;in\u0026quot;¬†for that.\nThe syntax is:\n\u0026#34;key\u0026#34; in object For instance:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; alert( \u0026#34;age\u0026#34; in user ); // true, user.age exists alert( \u0026#34;blabla\u0026#34; in user ); // false, user.blabla doesn\u0026#39;t exist Please note that on the left side of¬†in¬†there must be a¬†property name. That‚Äôs usually a quoted string.\nIf we omit quotes, that means a variable should contain the actual name to be tested. For instance:\nlet user = { age: 30 }; let key = \u0026#34;age\u0026#34;; alert( key in user ); // true, property \u0026#34;age\u0026#34; exists Why does the¬†in¬†operator exist? Isn‚Äôt it enough to compare against¬†undefined?\nWell, most of the time the comparison with¬†undefined¬†works fine. But there‚Äôs a special case when it fails, but¬†\u0026quot;in\u0026quot;¬†works correctly.\nIt‚Äôs when an object property exists, but stores¬†undefined:\nlet obj = { test: undefined }; alert( obj.test ); // it\u0026#39;s undefined, so - no such property? alert( \u0026#34;test\u0026#34; in obj ); // true, the property does exist! In the code above, the property¬†obj.test¬†technically exists. So the¬†in¬†operator works right.\nSituations like this happen very rarely, because¬†undefined¬†should not be explicitly assigned. We mostly use¬†null¬†for ‚Äúunknown‚Äù or ‚Äúempty‚Äù values. So the¬†in¬†operator is an exotic guest in the code.\nThe \u0026ldquo;for..in\u0026rdquo; loop To walk over all keys of an object, there exists a special form of the loop:¬†for..in. This is a completely different thing from the¬†for(;;)¬†construct that we studied before.\nThe syntax:\nfor (key in object) { // executes the body for each key among object properties } For instance, let‚Äôs output all properties of¬†user:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, isAdmin: true }; for (let key in user) { // keys alert( key ); // name, age, isAdmin // values for the keys alert( user[key] ); // John, 30, true } Note that all ‚Äúfor‚Äù constructs allow us to declare the looping variable inside the loop, like¬†let key¬†here.\nAlso, we could use another variable name here instead of¬†key. For instance,¬†\u0026quot;for (let prop in obj)\u0026quot;¬†is also widely used.\nObject methods, \u0026ldquo;this\u0026rdquo; ‚Äúthis‚Äù in methods It‚Äôs common that an object method needs to access the information stored in the object to do its job.\nFor instance, the code inside¬†user.sayHi()¬†may need the name of the¬†user.\nTo access the object, a method can use the¬†this¬†keyword.\nThe value of¬†this¬†is the object ‚Äúbefore dot‚Äù, the one used to call the method.\nFor instance:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, sayHi() { // \u0026#34;this\u0026#34; is the \u0026#34;current object\u0026#34; alert(this.name); } }; user.sayHi(); // John Here during the execution of¬†user.sayHi(), the value of¬†this¬†will be¬†user.\nTechnically, it‚Äôs also possible to access the object without¬†this, by referencing it via the outer variable:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, sayHi() { alert(user.name); // \u0026#34;user\u0026#34; instead of \u0026#34;this\u0026#34; } }; ‚Äúthis‚Äù is not bound In JavaScript, keyword¬†this¬†behaves unlike most other programming languages. It can be used in any function, even if it‚Äôs not a method of an object.\nThere‚Äôs no syntax error in the following example:\nfunction sayHi() { alert( this.name ); } The value of¬†this¬†is evaluated during the run-time, depending on the context.\nFor instance, here the same function is assigned to two different objects and has different ‚Äúthis‚Äù in the calls:\nlet user = { name: \u0026#34;John\u0026#34; }; let admin = { name: \u0026#34;Admin\u0026#34; }; function sayHi() { alert( this.name ); } // use the same function in two objects user.f = sayHi; admin.f = sayHi; // these calls have different this // \u0026#34;this\u0026#34; inside the function is the object \u0026#34;before the dot\u0026#34; user.f(); // John (this == user) admin.f(); // Admin (this == admin) admin[\u0026#39;f\u0026#39;](); // Admin (dot or square brackets access the method ‚Äì doesn\u0026#39;t matter) Arrow functions have no ‚Äúthis‚Äù Arrow functions are special: they don‚Äôt have their ‚Äúown‚Äù this. If we reference this from such a function, it‚Äôs taken from the outer ‚Äúnormal‚Äù function.\nFor instance, here arrow() uses this from the outer user.sayHi() method:\nlet user = { firstName: \u0026#34;Ilya\u0026#34;, sayHi() { let arrow = () =\u0026gt; alert(this.firstName); arrow(); } }; user.sayHi(); // Ilya That‚Äôs a special feature of arrow functions, it‚Äôs useful when we actually do not want to have a separate¬†this, but rather to take it from the outer context. Later in the chapter¬†Arrow functions revisited¬†we‚Äôll go more deeply into arrow functions.\nSummary Functions that are stored in object properties are called ‚Äúmethods‚Äù. Methods allow objects to ‚Äúact‚Äù like¬†object.doSomething(). Methods can reference the object as¬†this. The value of¬†this¬†is defined at run-time.\nWhen a function is declared, it may use¬†this, but that¬†this¬†has no value until the function is called. A function can be copied between objects. When a function is called in the ‚Äúmethod‚Äù syntax:¬†object.method(), the value of¬†this¬†during the call is¬†object. Please note that arrow functions are special: they have no¬†this. When¬†this¬†is accessed inside an arrow function, it is taken from outside.\nKey Points In Global Scope the value of this is window. In function the value of this is window In Method the value of this is object function inside the method es5(deceleration function) the value of this is window. function inside the method es6(expression function) the value of this is object. the value of this in constructor function is blank object. In event listener value of this will be according to the element. call/apply/bind call There‚Äôs a special built-in function method¬†func.call(context, ‚Ä¶args)¬†that allows to call a function explicitly setting¬†this.\nThe syntax is:\nfunc.call(context, arg1, arg2, ...) It runs¬†func¬†providing the first argument as¬†this, and the next as the arguments.\nTo put it simply, these two calls do almost the same:\nfunc(1, 2, 3); func.call(obj, 1, 2, 3) They both call¬†func¬†with arguments¬†1,¬†2¬†and¬†3. The only difference is that¬†func.call¬†also sets¬†this¬†to¬†obj.\nAs an example, in the code below we call¬†sayHi¬†in the context of different objects:¬†sayHi.call(user)¬†runs¬†sayHi¬†providing¬†this=user, and the next line sets¬†this=admin:\nfunction sayHi() { alert(this.name); } let user = { name: \u0026#34;John\u0026#34; }; let admin = { name: \u0026#34;Admin\u0026#34; }; // use call to pass different objects as \u0026#34;this\u0026#34; sayHi.call( user ); // John sayHi.call( admin ); // Admin apply Instead of¬†func.call(this, ...arguments)¬†we could use¬†func.apply(this, arguments).\nThe syntax of built-in method¬†func.apply¬†is:\nfunc.apply(context, args) It runs the¬†func¬†setting¬†this=context¬†and using an array-like object¬†args¬†as the list of arguments.\nThe only syntax difference between¬†call¬†and¬†apply¬†is that¬†call¬†expects a list of arguments, while¬†apply¬†takes an array-like object with them.\nSo these two calls are almost equivalent:\nfunc.call(context, ...args); func.apply(context, args); Example:\nfunction func(a, b, c) { console.log(this, a, b, c); } func.call(obj, [1, 2, 3]); bind() The¬†bind()¬†method of¬†Function¬†instances creates a new function that, when called, calls this function with its¬†this¬†keyword set to the provided value, and a given sequence of arguments preceding any provided when the new function is called.\nIt does not call function. It just return another function that we can store in variable to call it\nfunction func() { console.log(this); } let n = func.bind(\u0026#34;ahmad\u0026#34;); n(); Prototypal inheritance In JavaScript, objects have a special hidden property¬†[[Prototype]]¬†(as named in the specification), that is either¬†null¬†or references another object. That object is called ‚Äúa prototype‚Äù:\nWhen we read a property from¬†object, and it‚Äôs missing, JavaScript automatically takes it from the prototype. In programming, this is called ‚Äúprototypal inheritance‚Äù. And soon we‚Äôll study many examples of such inheritance, as well as cooler language features built upon it.\nThe property¬†[[Prototype]]¬†is internal and hidden, but there are many ways to set it.\nPrototypal inheritance in JavaScript is a mechanism that allows objects to inherit properties and methods from other objects. Instead of using classes like in classical inheritance (as in Java or C++), JavaScript uses prototypes.\nfunction makeHuman(name,age){ this.name = name; this.age = age; } makeHuman.prototype.greet = 12; makeHuman.prototype.func = function(){ console.log(this.name); } let human1 = new makeHuman(\u0026#34;ahmad\u0026#34;,20); let human2 = new makeHuman(\u0026#34;ali\u0026#34;,30); How It Works: Every JavaScript object has an internal property called [[Prototype]], which points to another object.\nWhen you try to access a property or method on an object, JavaScript first looks for it on the object itself.\nIf the property/method is not found, JavaScript looks up the prototype chain until it either finds the property or reaches null.\nThe value of ‚Äúthis‚Äù An interesting question may arise in the example above: what‚Äôs the value of¬†this¬†inside¬†set fullName(value)? Where are the properties¬†this.name¬†and¬†this.surname¬†written: into¬†user¬†or¬†admin?\nThe answer is simple:¬†this¬†is not affected by prototypes at all.\nNo matter where the method is found: in an object or its prototype. In a method call,¬†this¬†is always the object before the dot.\nSo, the setter call¬†admin.fullName=¬†uses¬†admin¬†as¬†this, not¬†user.\nThat is actually a super-important thing, because we may have a big object with many methods, and have objects that inherit from it. And when the inheriting objects run the inherited methods, they will modify only their own states, not the state of the big object.\nClosures in JS A closure in JavaScript is a function that remembers the variables from its lexical scope, even when the function is executed outside that scope.\nHow It Works: When a function is created inside another function, it captures the outer function‚Äôs variables, even after the outer function has finished executing.\nfunction counter() { let count = 0; return function() { count++; console.log(count); }; } const increment = counter(); increment(); // 1 increment(); // 2 What is an Event Listener in JavaScript? An event listener is a method that allows you to wait for a specific event (like a click, keypress, hover, etc.) and run a function when the event occurs.\n‚úÖ Example of addEventListener() document.getElementById(\u0026#34;btn\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function() { console.log(\u0026#34;Button Clicked!\u0026#34;); }); Here, addEventListener(\u0026quot;click\u0026quot;, function) listens for a click event on the button with id=\u0026quot;btn\u0026quot;. When clicked, it logs \u0026quot;Button Clicked!\u0026quot;. Common Events Event Description click When an element is clicked mouseover When the mouse hovers over an element keydown When a key is pressed submit When a form is submitted What is querySelector in JavaScript? querySelector() is a method used to select an element from the DOM using CSS selectors.\nExample of querySelector() const heading = document.querySelector(\u0026#34;h1\u0026#34;); // Selects the first `\u0026lt;h1\u0026gt;` element heading.style.color = \u0026#34;red\u0026#34;; // Changes its color to red Selecting Elements document.querySelector(\u0026#34;#myId\u0026#34;); // Selects an element by ID document.querySelector(\u0026#34;.myClass\u0026#34;); // Selects the first element with this class document.querySelector(\u0026#34;p\u0026#34;); // Selects the first \u0026lt;p\u0026gt; element Event Delegation in JavaScript Event Delegation is a pattern that allows you to handle events efficiently by attaching a single event listener to a parent element instead of adding multiple listeners to child elements.\nü§î Why Use Event Delegation? ‚úÖ Better Performance ‚Üí Avoids adding multiple event listeners.\n‚úÖ Handles Dynamic Elements ‚Üí Works even for elements added later via JavaScript.\n‚úÖ Less Memory Usage ‚Üí Reduces the number of event listeners.\nExample\nlet parent = document.querySelector(\u0026#34;#parent\u0026#34;); parent.addEventListener(\u0026#34;click\u0026#34;, function (ev) { if (ev.target.id === \u0026#34;play\u0026#34;) { console.log(\u0026#34;Play Song\u0026#34;); } else if (ev.target.id === \u0026#34;pause\u0026#34;) { console.log(\u0026#34;Pause Song\u0026#34;); } }); When Should You Use Event Delegation? Handling clicks on lists, tables, menus, or dynamically added elements. Handling form inputs when adding fields dynamically. Improving performance for elements inside large containers. Higher-Order Functions in JavaScript A Higher-Order Function (HOF) is a function that takes another function as an argument or returns a function.\nfunction func1(f1) { // func1 takes a function as an argument (HOF property) f1(); // Calls the passed function return function () { // Returns a new function (HOF property) console.log(\u0026#34;returned fun\u0026#34;); }; } fun = function () { console.log(\u0026#34;Passed Function\u0026#34;); }; let returned = func1(fun); // Call func1 with \u0026#39;fun\u0026#39; function returned(); // Call the returned function Built-in Higher-Order Functions in JavaScript Method Description map() Transforms an array by applying a function to each element. filter() Filters an array based on a condition. reduce() Reduces an array to a single value. forEach() Iterates over an array but does not return a new one. Handling Errors with `try\u0026hellip;catch The try...catch block allows you to handle errors gracefully. The try...catch statement is used to handle errors, and throw is used to create custom errors.\nBasic Example of try...catch\ntry { let x = y + 5; // ‚ùå ReferenceError: y is not defined } catch (error) { console.log(\u0026#34;An error occurred:\u0026#34;, error.message); } üîπ If an error occurs inside try, execution moves to catch, preventing a crash.\nUsing throw to Create Custom Error function divide(a, b) { if (b === 0) { throw new Error(\u0026#34;Cannot divide by zero!\u0026#34;); // üöÄ Custom error } return a / b; } try { console.log(divide(10, 0)); // ‚ùå Throws an error } catch (error) { console.log(\u0026#34;Error:\u0026#34;, error.message); } üîπ throw allows custom error messages instead of generic JavaScript errors.\nfinally Block (Always Executes) try { console.log(\u0026#34;Trying something...\u0026#34;); throw new Error(\u0026#34;Something went wrong!\u0026#34;); } catch (error) { console.log(\u0026#34;Caught Error:\u0026#34;, error.message); } finally { console.log(\u0026#34;This runs no matter what!\u0026#34;); } Custom Events in JavaScript A Custom Event in JavaScript is an event that you manually create and dispatch using the CustomEvent constructor. This allows communication between different parts of your application.\nCreating and Dispatching a Custom Event The CustomEvent constructor takes two arguments: 1Ô∏è‚É£ Event Name (string)\n2Ô∏è‚É£ Event Options (optional, includes detail for extra data)\nlet ev = new Event(\u0026#34;newEv\u0026#34;); document.querySelector(\u0026#34;button\u0026#34;).addEventListener(\u0026#34;newEv\u0026#34;, function () { console.log(\u0026#34;Custom Event\u0026#34;); }); document.querySelector(\u0026#34;button\u0026#34;).dispatchEvent(ev); Full Example: Custom Event with Data\n// Create and dispatch custom event const customEvent = new CustomEvent(\u0026#34;userLoggedIn\u0026#34;, { detail: { username: \u0026#34;ahmad9059\u0026#34;, role: \u0026#34;admin\u0026#34; } }); document.addEventListener(\u0026#34;userLoggedIn\u0026#34;, function (event) { console.log(`User: ${event.detail.username}, Role: ${event.detail.role}`); }); // Dispatch the event document.dispatchEvent(customEvent); When to Use Custom Events?\nFor component communication (e.g., sending data between different UI components). When working with user interactions that don\u0026rsquo;t have built-in events. For event-driven architectures where actions trigger custom behavior. ","permalink":"http://localhost:1313/posts/javascript-advanced/","summary":"\u003ch1 id=\"arrays\"\u003eArrays\u003c/h1\u003e\n\u003cp\u003eObjects allow you to store keyed collections of values. That‚Äôs fine.\u003c/p\u003e\n\u003cp\u003eBut quite often we find that we need an¬†\u003cem\u003eordered collection\u003c/em\u003e, where we have a 1st, a 2nd, a 3rd element and so on. For example, we need that to store a list of something: users, goods, HTML elements etc.\u003c/p\u003e\n\u003cp\u003eIt is not convenient to use an object here, because it provides no methods to manage the order of elements. We can‚Äôt insert a new property ‚Äúbetween‚Äù the existing ones. Objects are just not meant for such use.\u003c/p\u003e","title":"JavaScript Advanced Concepts"},{"content":"Synchronous vs Asynchronous JavaScript JavaScript is single-threaded, meaning it executes one operation at a time in a sequential manner. However, JavaScript provides mechanisms to handle tasks asynchronously, allowing it to perform operations without blocking the main execution thread.\n1. Synchronous JavaScript In synchronous execution, tasks run one after another, meaning JavaScript waits for one operation to complete before moving to the next. This can cause delays if a task takes a long time (e.g., reading a large file or making a network request).\nExample:\nconsole.log(\u0026#34;Start\u0026#34;); function syncFunction() { console.log(\u0026#34;Processing...\u0026#34;); } syncFunction(); console.log(\u0026#34;End\u0026#34;); Here, JavaScript executes statements one by one in order, blocking execution until each task is completed.\n2. Asynchronous JavaScript Asynchronous JavaScript allows tasks to run in the background without blocking the execution of other tasks. This is useful for operations like fetching data from an API, reading files, or handling timers.\nDoes NOT wait for one task to complete before moving to the next. Allows JavaScript to handle time-consuming operations (API calls, file reads, etc.) efficiently. Uses the Event Loop to manage async tasks. How Asynchronous JavaScript Works JavaScript uses the Event Loop and the Call Stack to handle asynchronous code efficiently. It uses:\nCallbacks(setTimeout,setInterval) Fetch API Axios Promises Async/Await Callbacks A callback function is passed as an argument to be executed later.given example use the both setTimeout and setInterval and clearInterval to stop the setInterval\nconsole.log(\u0026#34;Start of program\u0026#34;); // setTimeout: Delays execution by 3 seconds setTimeout(() =\u0026gt; { console.log(\u0026#34;setTimeout: This runs after 3 seconds\u0026#34;); }, 3000); // setInterval: Runs every 2 seconds let counter = 0; let intervalID = setInterval(() =\u0026gt; { counter++; console.log(`setInterval: Counter is ${counter}`); // Stop interval after 5 executions if (counter === 5) { clearInterval(intervalID); console.log(\u0026#34;clearInterval: Stopped interval after 5 executions\u0026#34;); } }, 2000); console.log(\u0026#34;End of program (before timeouts and intervals execute)\u0026#34;); Fetch API The fetch() API is asynchronous because it makes network requests without blocking the execution of other code. It returns a Promise, which resolves when the request completes.\nfetch(\u0026#34;https://jsonplaceholder.typicode.com/todos/1\u0026#34;) // Fetch data from API .then((response) =\u0026gt; response.json()) // Convert response to JSON .then((data) =\u0026gt; console.log(data)) // Log the data .catch((error) =\u0026gt; console.error(\u0026#34;Error fetching data:\u0026#34;, error)); üîπ How it works? 1Ô∏è‚É£ fetch() makes an HTTP request (returns a Promise).\n2Ô∏è‚É£ .json() parses the response into JavaScript object (also async, returns a Promise).\n3Ô∏è‚É£ .then() handles the resolved data.\n4Ô∏è‚É£ .catch() handles errors (e.g., network failure).\nAxios Axios is asynchronous because it makes network requests without blocking execution. It is built on top of JavaScript Promises, similar to fetch(), but with more features.\nWhy use Axios?\nNo need to manually parse JSON (Axios does it automatically). Better error handling (Fetch only rejects on network errors, while Axios rejects on HTTP errors too). More readable with async/await. axios.get(\u0026#34;https://jsonplaceholder.typicode.com/todos/1\u0026#34;) .then(response =\u0026gt; console.log(response.data)) // Axios auto-parses JSON .catch(error =\u0026gt; console.error(\u0026#34;Error fetching data:\u0026#34;, error)); üî• Comparison: Axios vs. Fetch Feature Axios Fetch JSON Parsing ‚úÖ Auto ‚ùå Manual (.json()) Error Handling ‚úÖ Rejects on HTTP errors ‚ùå Only rejects on network errors Request Headers ‚úÖ Easy ‚ùå Manual setup required async/await Support ‚úÖ Yes ‚úÖ Yes Default Timeout ‚úÖ Yes (timeout option) ‚ùå No üëâ Best Practice: Use Axios when working with APIs that require headers, authentication, or advanced error handling.\nPromise in JavaScript A Promise in JavaScript is an object that represents the eventual completion (or failure) of an asynchronous operation.\nüëâ It has three states:\nPending ‚Üí Initial state, neither resolved nor rejected. Fulfilled ‚Üí Operation completed successfully. Rejected ‚Üí Operation failed. let promise = new Promise(function (resolve, reject) { fetch(`https://randomuser.me/api/`) .then((raw) =\u0026gt; raw.json()) .then((result) =\u0026gt; { if (result.results[0].gender === \u0026#34;male\u0026#34;) { resolve(); } else { reject(); } }); }); promise .then(function () { console.log(\u0026#34;Male Received\u0026#34;); }) .catch(function () { console.log(\u0026#34;Female Received\u0026#34;); }); Callbacks in JavaScript A callback is a function passed as an argument to another function and executed later.\nüëâ Why use callbacks?\nHandle asynchronous operations (like fetching data, timers, or reading files). Execute code after another function completes. function getData(url, callback) { fetch(`https://randomuser.me/api/`) .then((raw) =\u0026gt; raw.json()) .then((result) =\u0026gt; { callback(result); }); } getData(\u0026#34;https://randomuser.me/api/\u0026#34;, function (result) { console.log( result.results[0].gender, result.results[0].name.first, result.results[0].email, ); }); async/await async/await is a modern way to handle asynchronous code in JavaScript.\nIt allows you to write asynchronous code in a way that looks synchronous, making it easier to read and debug.\nüëâ Key Features:\n‚úîÔ∏è **async: **The async keyword is used before a function definition to make it return a Promise. ‚úîÔ∏è await: The await keyword is used inside an async function to pause execution until a Promise resolves. ‚úîÔ∏è Avoids callback hell and complex .then() chains.\n‚úîÔ∏è Handles errors with try/catch.\nasync function func() { let n = await fetch(`https://randomuser.me/api/`); n = await n.json(); console.log(n.results[0].gender); } func(); When to Use async/await? ‚úîÔ∏è Fetching data from an API\n‚úîÔ∏è Performing database queries\n‚úîÔ∏è Reading/Writing files (in Node.js)\n‚úîÔ∏è Processing multiple async requests together\n‚úîÔ∏è Avoiding callback hell\nEvent Loop To understand the Event Loop, you need to know how JavaScript executes code. It has three main components:\nCall Stack The Call Stack follows the LIFO (Last In, First Out) principle. It executes synchronous JavaScript code line by line. function greet() { console.log(\u0026#34;Hello!\u0026#34;); } greet(); üìå Execution:\ngreet() is pushed onto the Call Stack. console.log(\u0026quot;Hello!\u0026quot;) runs and is popped from the stack. Web APIs (Async Tasks) JavaScript delegates async tasks (e.g., setTimeout, fetch, event listeners) to Web APIs. These APIs handle the task in the background and return the result later. Example:\nconsole.log(\u0026#34;Start\u0026#34;); setTimeout(() =\u0026gt; { console.log(\u0026#34;Inside setTimeout\u0026#34;); }, 1000); console.log(\u0026#34;End\u0026#34;); üìå Execution Flow:\nconsole.log(\u0026quot;Start\u0026quot;) ‚Üí Executes immediately. setTimeout() ‚Üí Sent to Web API, NOT executed immediately. console.log(\u0026quot;End\u0026quot;) ‚Üí Executes immediately. After 1 second, the callback (console.log(\u0026quot;Inside setTimeout\u0026quot;)) moves to Callback Queue. Callback Queue \u0026amp; Microtask Queue Callback Queue: Stores callbacks from setTimeout, setInterval, event listeners. Microtask Queue: Stores callbacks from Promises (.then(), catch(), finally()) and MutationObserver. Microtasks always run before Callbacks (higher priority). Example:\nconsole.log(\u0026#34;Start\u0026#34;); setTimeout(() =\u0026gt; console.log(\u0026#34;Timeout Callback\u0026#34;), 0); Promise.resolve().then(() =\u0026gt; console.log(\u0026#34;Promise Resolved\u0026#34;)); console.log(\u0026#34;End\u0026#34;); üìå Execution Flow:\nconsole.log(\u0026quot;Start\u0026quot;) ‚Üí Runs immediately. setTimeout() ‚Üí Sent to Web API (callback moved to Callback Queue). Promise.resolve().then(...) ‚Üí Sent to Microtask Queue. console.log(\u0026quot;End\u0026quot;) ‚Üí Runs immediately. Microtask Queue executes first ‚Üí console.log(\u0026quot;Promise Resolved\u0026quot;). Callback Queue executes ‚Üí console.log(\u0026quot;Timeout Callback\u0026quot;). How the Event Loop Works 1Ô∏è‚É£ JavaScript executes synchronous code in the Call Stack. 2Ô∏è‚É£ If an async task is encountered, it moves to the Web API. 3Ô∏è‚É£ Once completed, it moves the callback to the Callback Queue or Microtask Queue. 4Ô∏è‚É£ The Event Loop checks if the Call Stack is empty. 5Ô∏è‚É£ If empty, it first executes Microtasks, then moves Callbacks from the Callback Queue. 6Ô∏è‚É£ Repeats the process infinitely.\nüöÄ Key Takeaways ‚úî JavaScript is single-threaded but handles async tasks with the Event Loop.\n‚úî Microtask Queue (Promises) runs before the Callback Queue (setTimeout).\n‚úî The Event Loop ensures JavaScript never blocks execution.\n‚úî Long-running tasks should be asynchronous to avoid UI freezing.\nDifference Between Callbacks, Promises, and Async/Await Feature Callbacks Promises Async/Await Definition A function passed as an argument to another function and executed later. An object representing the eventual completion (or failure) of an asynchronous operation. A modern way to handle asynchronous code using async and await keywords. Syntax Nested functions, leading to callback hell. Uses .then(), .catch(), and .finally(). Uses async to declare functions and await to handle promises. Readability Hard to read and maintain due to callback nesting. More readable but still involves chaining. Clean and synchronous-like syntax. Error Handling Error-prone, requires manual handling (if-else or separate error callback). Uses .catch() to handle errors. Uses try...catch for better error handling. Chaining Difficult, leads to callback hell (Pyramid of Doom). Easy with .then() chaining. Simplifies chaining with await. Execution Flow Asynchronous but difficult to manage for multiple tasks. More manageable, but chaining can still be tricky. Most intuitive, executes sequentially like synchronous code. Best For Simple async operations, event listeners. Handling multiple asynchronous operations in a cleaner way. Writing clean, readable, and maintainable async code. Generators in JavaScript Generators are special functions in JavaScript that allow us to pause and resume execution. Unlike normal functions, they do not execute all at once; instead, they produce values one at a time as requested.\nKey Features of Generators ‚úî Uses the function* syntax (notice the * after function).\n‚úî Uses the yield keyword to pause execution and return values.\n‚úî The function doesn‚Äôt run immediately; instead, it returns an iterator object.\n‚úî The next() method resumes execution from the last yield.\nfunction* myGenerator() { console.log(\u0026#34;Start\u0026#34;); yield 1; // Pause and return 1 console.log(\u0026#34;Resume\u0026#34;); yield 2; // Pause and return 2 console.log(\u0026#34;End\u0026#34;); } const gen = myGenerator(); // Creates the generator object console.log(gen.next()); // { value: 1, done: false } console.log(gen.next().value); // 2 console.log(gen.next()); // { value: undefined, done: true } üìå How it Works? Calling myGenerator() doesn\u0026rsquo;t execute it immediately. It returns a generator object (gen). gen.next() starts execution until the first yield, returning { value: 1, done: false }. Calling gen.next() again resumes execution after the first yield, printing \u0026quot;Resume\u0026quot; and yielding { value: 2, done: false }. When there are no more yield statements, done: true is returned. Generator with for...of Loop Instead of calling next() manually, we can use a for...of loop.\nfunction* fruits() { yield \u0026#34;üçé Apple\u0026#34;; yield \u0026#34;üçå Banana\u0026#34;; yield \u0026#34;üçá Grapes\u0026#34;; } for (let fruit of fruits()) { console.log(fruit); } Generators vs Async/Await Feature Generators Async/Await Execution Can be paused/resumed using yield Pauses execution until a Promise resolves Returns Iterator object Promise Use Case Custom iteration, state management Handling async operations When to Use Generators? ‚úî Custom Iterators ‚Äì Iterating over data in a custom way.\n‚úî Lazy Execution ‚Äì Generate values on demand instead of all at once.\n‚úî Infinite Sequences ‚Äì Generate values infinitely without memory issues.\n‚úî Asynchronous Programming (with co-routines) ‚Äì Generators can be combined with Promises.\nWeb Worker Web Workers allow JavaScript to run background tasks in a separate thread without blocking the main UI thread. This helps in handling heavy computations and keeping the web page responsive.\nWhy Use Web Workers? ‚úî JavaScript is single-threaded (blocking UI when executing long tasks).\n‚úî Web Workers allow running tasks in parallel on a different thread.\n‚úî Helps in CPU-intensive tasks like image processing, large calculations, etc.\n‚úî Keeps the UI smooth and prevents the page from freezing.\nüöÄ Step 1: Create the Worker (heavyWorker.js)\nonmessage = function (data) { let ans = data.data.reduce((acc, item) =\u0026gt; item + acc, 0); postMessage(ans); }; üöÄ Step 2: Use the Worker in Your Main Script (main.js)\nlet nums = Array.from({ length: 10000 }, (_, b) =\u0026gt; b + 1); let worker = new Worker(\u0026#34;worker.js\u0026#34;); worker.postMessage(nums); worker.onmessage = function (data) { console.log(data.data); }; Limitations of Web Workers ‚ùå No DOM Access ‚Äì Cannot manipulate HTML directly.\n‚ùå Cannot use window, document, or alert() ‚Äì Only limited APIs like fetch(), WebSockets, and IndexedDB.\n‚ùå Same-Origin Policy ‚Äì Workers must be loaded from the same domain.\n‚ùå Extra Resource Consumption ‚Äì Creating multiple workers consumes more memory.\n","permalink":"http://localhost:1313/posts/asynchronous-js/","summary":"\u003ch2 id=\"synchronous-vs-asynchronous-javascript\"\u003eSynchronous vs Asynchronous JavaScript\u003c/h2\u003e\n\u003cp\u003eJavaScript is \u003cstrong\u003esingle-threaded\u003c/strong\u003e, meaning it executes one operation at a time in a sequential manner. However, JavaScript provides mechanisms to handle tasks asynchronously, allowing it to perform operations without blocking the main execution thread.\u003c/p\u003e\n\u003ch2 id=\"1-synchronous-javascript\"\u003e1. Synchronous JavaScript\u003c/h2\u003e\n\u003cp\u003eIn \u003cstrong\u003esynchronous execution\u003c/strong\u003e, tasks run one after another, meaning JavaScript waits for one operation to complete before moving to the next. This can cause delays if a task takes a long time (e.g., reading a large file or making a network request).\u003c/p\u003e","title":"Asynchronous JavaScript"},{"content":"\nJavaScript was originally created to bring static web pages to life, enabling them to respond dynamically to user interactions. Its code, known as scripts, is directly embedded within HTML documents and executed by the browser as soon as the page loads. Because these scripts are delivered and interpreted as plain text, they bypass the need for a separate compilation process‚Äîthis makes development swift and flexible.\nThis interpretive nature is a key characteristic of JavaScript and distinguishes it from compiled languages like Java. Whereas Java requires a compile step to transform code into bytecode before execution, JavaScript‚Äôs immediate execution model facilitates rapid testing and iterative development. Over time, JavaScript has evolved from a simple tool for adding interactivity to a robust language capable of handling complex web applications, manipulating the Document Object Model (DOM), and even running on servers through environments like Node.js.\nIn essence, JavaScript‚Äôs design philosophy‚Äîenabling live, responsive web experiences with minimal overhead‚Äîcontinues to shape the modern, dynamic web.\nTip: Brendan Eich¬†is the original developer of JavaScript\nWhy is it called¬†JavaScript?\nWhen JavaScript was created, it initially had another name: ‚ÄúLiveScript‚Äù. But Java was very popular at that time, so it was decided that positioning a new language as a ‚Äúyounger brother‚Äù of Java would help.\nBut as it evolved, JavaScript became a fully independent language with its own specification called¬†ECMAScript, and now it has no relation to Java at all.\nToday, JavaScript can execute not only in the browser, but also on the server, or actually on any device that has a special program called¬†the JavaScript engine.\nThe browser has an embedded engine sometimes called a ‚ÄúJavaScript virtual machine‚Äù.\nDifferent engines have different ‚Äúcodenames‚Äù. For example:\nV8¬†‚Äì in Chrome, Opera and Edge. SpiderMonkey¬†‚Äì in Firefox. ‚Ä¶There are other codenames like ‚ÄúChakra‚Äù for IE, ‚ÄúJavaScriptCore‚Äù, ‚ÄúNitro‚Äù and ‚ÄúSquirrelFish‚Äù for Safari, etc. The terms above are good to remember because they are used in developer articles on the internet. We‚Äôll use them too. For instance, if ‚Äúa feature X is supported by V8‚Äù, then it probably works in Chrome, Opera and Edge.\nHow do engines work?\nEngines are complicated. But the basics are easy.\nThe engine (embedded if it‚Äôs a browser) reads (‚Äúparses‚Äù) the script. Then it converts (‚Äúcompiles‚Äù) the script to machine code. And then the machine code runs, pretty fast. The engine applies optimizations at each step of the process. It even watches the compiled script as it runs, analyzes the data that flows through it, and further optimizes the machine code based on that knowledge.\nWhat makes JavaScript unique? There are at least three great things about JavaScript:\nFull integration with HTML/CSS. Simple things are done simply. Supported by all major browsers and enabled by default. Link JavaScript to HTML We can use a¬†\u0026lt;script\u0026gt;¬†tag to add JavaScript code to a page. The¬†type¬†and¬†language¬†attributes are not required. A script in an external file can be inserted with¬†\u0026lt;script src=\u0026quot;path/to/script.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;. Please note: As a rule, only the simplest scripts are put into HTML. More complex ones reside in separate files.\nThe benefit of a separate file is that the browser will download it and store it in its cache.\nOther pages that reference the same script will take it from the cache instead of downloading it, so the file is actually downloaded only once.\nThat reduces traffic and makes pages faster.\nSemicolons A semicolon may be omitted in most cases when a line break exists. This would also work:\nconsole.log(\u0026#39;Hello\u0026#39;) console.log(\u0026#39;World\u0026#39;) Here, JavaScript interprets the line break as an ‚Äúimplicit‚Äù semicolon. This is called an automatic semicolon insertion.\nIn most cases, a newline implies a semicolon. But ‚Äúin most cases‚Äù does not mean ‚Äúalways‚Äù!\nThere are cases when a newline does not mean a semicolon. For example:\nconsole.log(3 + 1 + 2); The code outputs 6 because JavaScript does not insert semicolons here. It is intuitively obvious that if the line ends with a plus \u0026ldquo;+\u0026rdquo;, then it is an ‚Äúincomplete expression‚Äù, so a semicolon there would be incorrect. And in this case, that works as intended.\nBut there are situations where JavaScript ‚Äúfails‚Äù to assume a semicolon where it is really needed.\nErrors which occur in such cases are quite hard to find and fix.\nAn example of an error\nIf you‚Äôre curious to see a concrete example of such an error, check this code out:\nconsole.log(\u0026#34;Hello\u0026#34;); [1, 2].forEach(console.log); Now let‚Äôs remove the semicolon after the console.log:\nconsole.log(\u0026#34;Hello\u0026#34;) [1, 2].forEach(console.log); The difference compared to the code above is only one character: the semicolon at the end of the first line is gone.\nIf we run this code, only the first¬†Hello¬†shows (and there‚Äôs an error, you may need to open the console to see it). There are no numbers any more.\nThat‚Äôs because JavaScript does not assume a semicolon before square brackets¬†[...]. So, the code in the last example is treated as a single statement.\nHere‚Äôs how the engine sees it:\nconsole.log(\u0026#34;Hello\u0026#34;)[1, 2].forEach(console.log); It\u0026rsquo;s recommend putting semicolons between statements even if they are separated by newlines. This rule is widely adopted by the community. Let‚Äôs note once again ‚Äì it is possible to leave out semicolons most of the time. But it‚Äôs safer ‚Äì especially for a beginner ‚Äì to use them.\nComments As time goes on, programs become more and more complex. It becomes necessary to add comments which describe what the code does and why.\nComments can be put into any place of a script. They don‚Äôt affect its execution because the engine simply ignores them.\nOne-line comments start with two forward slash characters //. The rest of the line is a comment. It may occupy a full line of its own or follow a statement. Like here:\n// This comment occupies a line of its own console.log(\u0026#39;Hello\u0026#39;); console.log(\u0026#39;World\u0026#39;); // This comment follows the statement Multiline comments start with a forward slash and an asterisk /* and end with an asterisk and a forward slash */. /* An example with two messages. This is a multiline comment. */ console.log(\u0026#39;Hello\u0026#39;); console.log(\u0026#39;World\u0026#39;); Nested comments are not supported! There may not be /\u0026hellip;/ inside another /\u0026hellip;/.\nSuch code will die with an error:\n/* /* nested comment ?!? */ not allowed */ console.log( \u0026#39;World\u0026#39; ); The modern mode, \u0026ldquo;use strict\u0026rdquo; The directive looks like a string:¬†\u0026quot;use strict\u0026quot;¬†or¬†'use strict'. When it is located at the top of a script, the whole script works the ‚Äúmodern‚Äù way.\n\u0026#34;use strict\u0026#34;; // this code works the modern way ... Advance that¬†\u0026quot;use strict\u0026quot;¬†can be put at the beginning of a function. Doing that enables strict mode in that function only. But usually people use it for the whole script.\nEnsure that ‚Äúuse strict‚Äù is at the top\nPlease make sure that¬†\u0026quot;use strict\u0026quot;¬†is at the top of your scripts, otherwise strict mode may not be enabled. Strict mode isn‚Äôt enabled here:\nconsole.log(\u0026#34;some code\u0026#34;); // \u0026#34;use strict\u0026#34; below is ignored--it must be at the top \u0026#34;use strict\u0026#34;; // strict mode is not activated Should we ‚Äúuse strict‚Äù? The question may sound obvious, but it‚Äôs not so.\nOne could recommend to start scripts with \u0026ldquo;use strict\u0026rdquo;‚Ä¶ But you know what‚Äôs cool?\nModern JavaScript supports ‚Äúclasses‚Äù and ‚Äúmodules‚Äù ‚Äì advanced language structures (we‚Äôll surely get to them), that enable use strict automatically. So we don‚Äôt need to add the \u0026ldquo;use strict\u0026rdquo; directive, if we use them.\nSo, for now \u0026ldquo;use strict\u0026rdquo;; is a welcome guest at the top of your scripts. Later, when your code is all in classes and modules, you may omit it.\nAs of now, we‚Äôve got to know about use strict in general.\nIn the next chapters, as we learn language features, we‚Äôll see the differences between the strict and old modes. Luckily, there aren‚Äôt many and they actually make our lives better.\nThe purpose of¬†\u0026quot;use strict\u0026quot;¬†is to indicate that the code should be executed in \u0026ldquo;strict mode\u0026rdquo;.\nWith strict mode, you can not, for example, use undeclared variables.\nJavaScript¬†Window - The Browser Object Model In JavaScript, window is a global object that represents the browser window or tab. It is the top-level object in the browser\u0026rsquo;s client-side execution environment and provides access to various properties and methods for controlling the browser window.\nconsole The console object provides access to the browser\u0026rsquo;s debugging console.\nconsole.log(\u0026#34;Hello, World!\u0026#34;); console.warn(\u0026#34;Be carefull\u0026#34;); console.error(\u0026#34;You made a mistake\u0026#34;); log(): Outputs a message to the console. warn(): Outputs a warning message to the console. error(): Outputs an error message to the console. clear(): Clears the console. Interaction: alert, prompt, confirm As we‚Äôll be using the browser as our demo environment, let‚Äôs see a couple of functions to interact with the user:¬†alert,¬†prompt¬†and¬†confirm.\nalert() The¬†alert()¬†method displays an alert box with a message and an OK button.\nThe¬†alert()¬†method is used when you want information to come through to the user.\nalert(\u0026#34;Hello\\nHow are you?\u0026#34;); prompt() The¬†prompt()¬†method displays a dialog box that prompts the user for input.\nThe¬†prompt()¬†method returns the input value if the user clicks \u0026ldquo;OK\u0026rdquo;, otherwise it returns¬†null.\nA prompt box is used if you want the user to input a value.\nWhen a prompt box pops up, the user will have to click either \u0026ldquo;OK\u0026rdquo; or \u0026ldquo;Cancel\u0026rdquo; to proceed.\nDo not overuse this method. It prevents the user from accessing other parts of the page until the box is closed.\nresult = prompt(title, [default]); let age = prompt(\u0026#39;How old are you?\u0026#39;, 100); console.log(`You are ${age} years old!`); // You are 100 years old! confirm() The¬†confirm()¬†method displays a dialog box with a message, an OK button, and a Cancel button.\nThe¬†confirm()¬†method returns¬†true¬†if the user clicked \u0026ldquo;OK\u0026rdquo;, otherwise¬†false.\nA confirm box is often used if you want the user to verify or accept something.\nA confirm box takes the focus away from the current window, and forces the user to read the message.\nDo not overuse this method. It prevents the user from accessing other parts of the page until the box is closed.\nVariables A¬†variable¬†is a ‚Äúnamed storage‚Äù for data. We can use variables to store goodies, visitors, and other data.\nTo create a variable in JavaScript, use the¬†let¬†keyword.\nThe statement below creates (in other words:¬†declares) a variable with the name ‚Äúmessage‚Äù:\nlet message; Now, we can put some data into it by using the assignment operator¬†=:\nlet message; message = \u0026#39;Hello\u0026#39;; // store the string \u0026#39;Hello\u0026#39; in the variable named message The string is now saved into the memory area associated with the variable. We can access it using the variable name:\nlet message; message = \u0026#39;Hello!\u0026#39;; console.log(message); // shows the variable content To be concise, we can combine the variable declaration and assignment into a single line:\nlet message = \u0026#39;Hello!\u0026#39;; // define the variable and assign the value console.log(message); // Hello! We can also declare multiple variables in one line:\nlet user = \u0026#39;John\u0026#39;, age = 25, message = \u0026#39;Hello\u0026#39;; That might seem shorter, but we don‚Äôt recommend it. For the sake of better readability, please use a single line per variable.\nThe multiline variant is a bit longer, but easier to read:\nlet user = \u0026#39;John\u0026#39;; let age = 25; let message = \u0026#39;Hello\u0026#39;; Technically, all these variants do the same thing. So, it‚Äôs a matter of personal taste and aesthetics.\nvar¬†instead of¬†let\nIn older scripts, you may also find another keyword:¬†var¬†instead of¬†let:\n`_var_` message `=` `'Hello'``;`\nThe¬†var¬†keyword is¬†almost¬†the same as¬†let. It also declares a variable but in a slightly different, ‚Äúold-school‚Äù way.\nbut the main difference Variables, declared with¬†var, are either function-scoped or global-scoped. They are visible through blocks.\nThere are subtle differences between¬†let¬†and¬†var, but they do not matter to us yet. We‚Äôll cover them in detail in the chapter¬†The old \u0026ldquo;var\u0026rdquo;.\nFunctional languages\nIt‚Äôs interesting to note that there exist so-called¬†pure functional¬†programming languages, such as¬†Haskell, that forbid changing variable values.\nIn such languages, once the value is stored ‚Äúin the box‚Äù, it‚Äôs there forever. If we need to store something else, the language forces us to create a new box (declare a new variable). We can‚Äôt reuse the old one.\nThough it may seem a little odd at first sight, these languages are quite capable of serious development. More than that, there are areas like parallel computations where this limitation confers certain benefits.\nConstants To declare a constant (unchanging) variable, use¬†const¬†instead of¬†let:\nconst myBirthday = \u0026#39;18.04.1982\u0026#39;; Variables declared using¬†const¬†are called ‚Äúconstants‚Äù. They cannot be reassigned. An attempt to do so would cause an error:\nconst myBirthday = \u0026#39;18.04.1982\u0026#39;; myBirthday = \u0026#39;01.01.2001\u0026#39;; // error, can\u0026#39;t reassign the constant! When a programmer is sure that a variable will never change, they can declare it with¬†const¬†to guarantee and communicate that fact to everyone.\nUppercase constants There is a widespread practice to use constants as aliases for difficult-to-remember values that are known before execution.\nSuch constants are named using capital letters and underscores.\nFor instance, let‚Äôs make constants for colors in so-called ‚Äúweb‚Äù (hexadecimal) format:\nconst COLOR_RED = \u0026#34;#F00\u0026#34;; const COLOR_GREEN = \u0026#34;#0F0\u0026#34;; const COLOR_BLUE = \u0026#34;#00F\u0026#34;; const COLOR_ORANGE = \u0026#34;#FF7F00\u0026#34;; // ...when we need to pick a color let color = COLOR_ORANGE; console.log(color); // #FF7F00 COLOR_ORANGE¬†is much easier to remember than¬†\u0026quot;#FF7F00\u0026quot;. It is much easier to mistype¬†\u0026quot;#FF7F00\u0026quot;¬†than¬†COLOR_ORANGE. When reading the code,¬†COLOR_ORANGE¬†is much more meaningful than¬†#FF7F00. When should we use capitals for a constant and when should we name it normally? Let‚Äôs make that clear.\nBeing a ‚Äúconstant‚Äù just means that a variable‚Äôs value never changes. But some constants are known before execution (like a hexadecimal value for red) and some constants are¬†calculated¬†in run-time, during the execution, but do not change after their initial assignment.\nconst pageLoadTime = /* time taken by a webpage to load */; The value of¬†pageLoadTime¬†is not known before the page load, so it‚Äôs named normally. But it‚Äôs still a constant because it doesn‚Äôt change after the assignment.\nIn other words, capital-named constants are only used as aliases for ‚Äúhard-coded‚Äù values.\nData types A value in JavaScript is always of a certain type. For example, a string or a number.\nWe can put any type in a variable. For example, a variable can at one moment be a string and then store a number:\n// no error let message = \u0026#34;hello\u0026#34;; message = 123456; Programming languages that allow such things, such as JavaScript, are called ‚Äúdynamically typed‚Äù, meaning that there exist data types, but variables are not bound to any of them.\n1. Number: The¬†number¬†type represents both integer and floating point numbers.\nlet n = 123; n = 12.345; There are many operations for numbers, e.g. multiplication¬†*, division¬†/, addition¬†+, subtraction¬†-, and so on.\nBesides regular numbers, there are so-called ‚Äúspecial numeric values‚Äù which also belong to this data type:¬†Infinity,¬†-Infinity¬†and¬†NaN.\nInfinity¬†represents the mathematical¬†Infinity¬†‚àû. It is a special value that‚Äôs greater than any number. console.log( 1 / 0 ); // Infinity Or just reference it directly:\nNaN¬†represents a computational error. It is a result of an incorrect or an undefined mathematical operation, for instance: console.log( \u0026#34;not a number\u0026#34; / 2 ); // NaN, such division is erroneous NaN¬†is sticky. Any further mathematical operation on¬†NaN¬†returns¬†NaN:\nconsole.log( NaN + 1 ); // NaN console.log( 3 * NaN ); // NaN console.log( \u0026#34;not a number\u0026#34; / 2 - 1 ); // NaN So, if there‚Äôs a¬†NaN¬†somewhere in a mathematical expression, it propagates to the whole result (there‚Äôs only one exception to that:¬†NaN ** 0¬†is¬†1).\nBigInt In JavaScript, the ‚Äúnumber‚Äù type cannot safely represent integer values larger than¬†(253-1)¬†(that‚Äôs¬†9007199254740991), or less than¬†-(253-1)¬†for negatives.\nTo be really precise, the ‚Äúnumber‚Äù type can store larger integers (up to¬†1.7976931348623157 * 10308), but outside of the safe integer range¬†¬±(253-1)¬†there‚Äôll be a precision error, because not all digits fit into the fixed 64-bit storage. So an ‚Äúapproximate‚Äù value may be stored.\nconsole.log(9007199254740991 + 1); // 9007199254740992 console.log(9007199254740991 + 2); // 9007199254740992 So to say, all odd integers greater than¬†(253-1)¬†can‚Äôt be stored at all in the ‚Äúnumber‚Äù type.\nFor most purposes¬†¬±(253-1)¬†range is quite enough, but sometimes we need the entire range of really big integers, e.g. for cryptography or microsecond-precision timestamps.\nBigInt¬†type was recently added to the language to represent integers of arbitrary length.\nA¬†BigInt¬†value is created by appending¬†n¬†to the end of an integer:\n// the \u0026#34;n\u0026#34; at the end means it\u0026#39;s a BigInt const bigInt = 1234567890123456789012345678901234567890n; 2. String A string in JavaScript must be surrounded by quotes.\nlet str = \u0026#34;Hello\u0026#34;; let str2 = \u0026#39;Single quotes are ok too\u0026#39;; let phrase = `can embed another ${str}`; In JavaScript, there are 3 types of quotes.\nDouble quotes:¬†\u0026quot;Hello\u0026quot;. Single quotes:¬†'Hello'. Backticks:¬†`Hello`. Double and single quotes are ‚Äúsimple‚Äù quotes. There‚Äôs practically no difference between them in JavaScript.\nBackticks are ‚Äúextended functionality‚Äù quotes. They allow us to embed variables and expressions into a string by wrapping them in¬†${‚Ä¶}, for example:\nlet name = \u0026#34;John\u0026#34;; // embed a variable console.log( `Hello, ${name}!` ); // Hello, John! // embed an expression console.log( `the result is ${1 + 2}` ); // the result is 3 There is no¬†character¬†type.\nIn some languages, there is a special ‚Äúcharacter‚Äù type for a single character. For example, in the C language and in Java it is called ‚Äúchar‚Äù.\nIn JavaScript, there is no such type. There‚Äôs only one type:¬†string. A string may consist of zero characters (be empty), one character or many of them.\n3. Boolean (logical type) The boolean type has only two values:¬†true¬†and¬†false.\nThis type is commonly used to store yes/no values:¬†true¬†means ‚Äúyes, correct‚Äù, and¬†false¬†means ‚Äúno, incorrect‚Äù.\nFor instance:\nlet nameFieldChecked = true; // yes, name field is checked let ageFieldChecked = false; // no, age field is not checked 4. The ‚Äúnull‚Äù value The special¬†null¬†value does not belong to any of the types described above.\nIt forms a separate type of its own which contains only the¬†null¬†value:\nlet age = null; In JavaScript,¬†null¬†is not a ‚Äúreference to a non-existing object‚Äù or a ‚Äúnull pointer‚Äù like in some other languages.\nIt‚Äôs just a special value which represents ‚Äúnothing‚Äù, ‚Äúempty‚Äù or ‚Äúvalue unknown‚Äù.\nThe code above states that¬†age¬†is unknown.\nThe \u0026ldquo;undefined\u0026rdquo; value The special value¬†undefined¬†also stands apart. It makes a type of its own, just like¬†null.\nThe meaning of¬†undefined¬†is ‚Äúvalue is not assigned‚Äù.\nIf a variable is declared, but not assigned, then its value is¬†undefined:\nlet age; console.log(age); // shows \u0026#34;undefined\u0026#34; Technically, it is possible to explicitly assign¬†undefined¬†to a variable:\nlet age = 100; // change the value to undefined age = undefined; console.log(age); // \u0026#34;undefined\u0026#34; ‚Ä¶But it\u0026rsquo;s don‚Äôt recommend doing that. Normally, one uses¬†null¬†to assign an ‚Äúempty‚Äù or ‚Äúunknown‚Äù value to a variable, while¬†undefined¬†is reserved as a default initial value for unassigned things.\nObjects and Symbols The¬†object¬†type is special.\nAll other types are called ‚Äúprimitive‚Äù because their values can contain only a single thing (be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex entities.\nBeing that important, objects deserve a special treatment. Deal with them later in the chapter¬†Objects, after we learn more about primitives.\nThe¬†symbol¬†type is used to create unique identifiers for objects. We have to mention it here for the sake of completeness, but also postpone the details till we know objects.\nThe typeof operator The¬†typeof¬†operator returns the type of the operand. It‚Äôs useful when we want to process values of different types differently or just want to do a quick check.\nA call to¬†typeof x¬†returns a string with the type name:\ntypeof undefined // \u0026#34;undefined\u0026#34; typeof 0 // \u0026#34;number\u0026#34; typeof 10n // \u0026#34;bigint\u0026#34; typeof true // \u0026#34;boolean\u0026#34; typeof \u0026#34;foo\u0026#34; // \u0026#34;string\u0026#34; typeof Symbol(\u0026#34;id\u0026#34;) // \u0026#34;symbol\u0026#34; typeof Math // \u0026#34;object\u0026#34; (1) typeof null // \u0026#34;object\u0026#34; (2) typeof alert// \u0026#34;function\u0026#34; (3) The¬†typeof(x)¬†syntax\nYou may also come across another syntax:¬†typeof(x). It‚Äôs the same as¬†typeof x.\nTo put it clear:¬†typeof¬†is an operator, not a function. The parentheses here aren‚Äôt a part of¬†typeof. It‚Äôs the kind of parentheses used for mathematical grouping.\nUsually, such parentheses contain a mathematical expression, such as¬†(2 + 2), but here they contain only one argument¬†(x). Syntactically, they allow to avoid a space between the¬†typeof¬†operator and its argument, and some people like it.\nSome people prefer¬†typeof(x), although the¬†typeof x¬†syntax is much more common.\nType Conversions Most of the time, operators and functions automatically convert the values given to them to the right type.\nFor example,¬†console.log¬†automatically converts any value to a string to show it. Mathematical operations convert values to numbers.\nThere are also cases when we need to explicitly convert a value to the expected type.\nString Conversion String conversion happens when we need the string form of a value.\nFor example,¬†console.log(value)¬†does it to show the value.\nWe can also call the¬†String(value)¬†function to convert a value to a string:\nlet value = true; console.log(typeof value); // boolean value = String(value); // now value is a string \u0026#34;true\u0026#34; console.log(typeof value); // string String conversion is mostly obvious. A¬†false¬†becomes¬†\u0026quot;false\u0026quot;,¬†null¬†becomes¬†\u0026quot;null\u0026quot;, etc.\nNumeric Conversion Numeric conversion in mathematical functions and expressions happens automatically.\nFor example, when division¬†/¬†is applied to non-numbers:\nconsole.log( \u0026#34;6\u0026#34; / \u0026#34;2\u0026#34; ); // 3, strings are converted to numbers We can use the¬†Number(value)¬†function to explicitly convert a¬†value¬†to a number:\nlet str = \u0026#34;123\u0026#34;; console.log(typeof str); // string let num = Number(str); // becomes a number 123 console.log(typeof num); // number Explicit conversion is usually required when we read a value from a string-based source like a text form but expect a number to be entered.\nIf the string is not a valid number, the result of such a conversion is¬†NaN. For instance:\nlet age = Number(\u0026#34;an arbitrary string instead of a number\u0026#34;); console.log(age); // NaN, conversion failed Numeric conversion rules:\nValue Becomes‚Ä¶ undefined NaN null 0 true¬†and¬†false 1¬†and¬†0 string Whitespaces (includes spaces, tabs¬†\\t, newlines¬†\\n¬†etc.) from the start and end are removed. If the remaining string is empty, the result is¬†0. Otherwise, the number is ‚Äúread‚Äù from the string. An error gives¬†NaN. console.log( Number(\u0026#34; 123 \u0026#34;) ); // 123 console.log( Number(\u0026#34;123z\u0026#34;) ); // NaN (error reading a number at \u0026#34;z\u0026#34;) console.log( Number(true) ); // 1 console.log( Number(false) ); // 0 Boolean Conversion Boolean conversion is the simplest one.\nIt happens in logical operations (later we‚Äôll meet condition tests and other similar things) but can also be performed explicitly with a call to¬†Boolean(value).\nThe conversion rule:\nValues that are intuitively ‚Äúempty‚Äù, like¬†0, an empty string,¬†null,¬†undefined, and¬†NaN, become¬†false. Other values become¬†true. console.log( Boolean(1) ); // true console.log( Boolean(0) ); // false console.log( Boolean(\u0026#34;hello\u0026#34;) ); // true console.log( Boolean(\u0026#34;\u0026#34;) ); // false Please note: the string with zero¬†\u0026quot;0\u0026quot;¬†is¬†true\nSome languages (namely PHP) treat¬†\u0026quot;0\u0026quot;¬†as¬†false. But in JavaScript, a non-empty string is always¬†true.\nalert( Boolean(\u0026#34;0\u0026#34;) ); // true alert( Boolean(\u0026#34; \u0026#34;) ); // spaces, also true (any non-empty string is true) Basic operators, maths We know many operators from school. They are things like addition¬†+, multiplication¬†*, subtraction¬†-, and so on.\nIn this chapter, we‚Äôll start with simple operators, then concentrate on JavaScript-specific aspects, not covered by school arithmetic.\nMaths The following math operations are supported:\nAddition¬†+, Subtraction¬†-, Multiplication¬†*, Division¬†/, Remainder¬†%, Exponentiation¬†**. Remainder The remainder operator¬†%, despite its appearance, is not related to percents.\nThe result of¬†a % b¬†is the¬†remainder¬†of the integer division of¬†a¬†by¬†b.\nFor instance:\nconsole.log(5 % 2); // 1, the remainder of 5 divided by 2 console.log(8 % 3); // 2, the remainder of 8 divided by 3 console.log(8 % 4); // 0, the remainder of 8 divided by 4 Exponentiation: The exponentiation operator¬†a ** b¬†raises¬†a¬†to the power of¬†b.\nIn school maths, we write that as ab.\nFor instance:\nconsole.log(2 ** 2); // 2¬≤ = 4 console.log(2 ** 3); // 2¬≥ = 8 console.log(2 ** 4); // 2‚Å¥ = 16 Just like in maths, the exponentiation operator is defined for non-integer numbers as well.\nFor example, a square root is an exponentiation by ¬Ω:\nconsole.log(4 ** (1 / 2)); // 2 (power of 1/2 is the same as a square root) console.log(8 ** (1 / 3)); // 2 (power of 1/3 is the same as a cubic root) String concatenation with binary Let‚Äôs meet the features of JavaScript operators that are beyond school arithmetics.\nUsually, the plus operator¬†+¬†sums numbers.\nBut, if the binary¬†+¬†is applied to strings, it merges (concatenates) them:\nlet s = \u0026#34;my\u0026#34; + \u0026#34;string\u0026#34;; console.log(s); // mystring Note that if any of the operands is a string, then the other one is converted to a string too.\nconsole.log( \u0026#39;1\u0026#39; + 2 ); // \u0026#34;12\u0026#34; console.log( 2 + \u0026#39;1\u0026#39; ); // \u0026#34;21\u0026#34; See, it doesn‚Äôt matter whether the first operand is a string or the second one.\nHere‚Äôs a more complex example:\nconsole.log(2 + 2 + \u0026#39;1\u0026#39; ); // \u0026#34;41\u0026#34; and not \u0026#34;221\u0026#34; Here, operators work one after another. The first¬†+¬†sums two numbers, so it returns¬†4, then the next¬†+¬†adds the string¬†1¬†to it, so it‚Äôs like¬†4 + '1' = '41'.\nconsole.log(\u0026#39;1\u0026#39; + 2 + 2); // \u0026#34;122\u0026#34; and not \u0026#34;14\u0026#34; The binary¬†+¬†is the only operator that supports strings in such a way. Other arithmetic operators work only with numbers and always convert their operands to numbers.\nHere‚Äôs the demo for subtraction and division:\nconsole.log( 6 - \u0026#39;2\u0026#39; ); // 4, converts \u0026#39;2\u0026#39; to a number console.log( \u0026#39;6\u0026#39; / \u0026#39;2\u0026#39; ); // 3, converts both operands to numbers Numeric conversion, unary The plus¬†+¬†exists in two forms: the binary form that we used above and the unary form.\nThe unary plus or, in other words, the plus operator¬†+¬†applied to a single value, doesn‚Äôt do anything to numbers. But if the operand is not a number, the unary plus converts it into a number.\nFor example:\n// No effect on numbers let x = 1; console.log( +x ); // 1 let y = -2; console.log( +y ); // -2 // Converts non-numbers console.log( +true ); // 1 console.log( +\u0026#34;\u0026#34; ); // 0 It actually does the same thing as¬†Number(...), but is shorter.\nThe binary plus would add them as strings:\nlet apples = \u0026#34;2\u0026#34;; let oranges = \u0026#34;3\u0026#34;; console.log( apples + oranges ); // \u0026#34;23\u0026#34;, the binary plus concatenates strings If we want to treat them as numbers, we need to convert and then sum them:\nlet apples = \u0026#34;2\u0026#34;; let oranges = \u0026#34;3\u0026#34;; // both values converted to numbers before the binary plus console.log( +apples + +oranges ); // 5 // the longer variant // console.log( Number(apples) + Number(oranges) ); // 5 From a mathematician‚Äôs standpoint, the abundance of pluses may seem strange. But from a programmer‚Äôs standpoint, there‚Äôs nothing special: unary pluses are applied first, they convert strings to numbers, and then the binary plus sums them up.\nOperator Precedence: If an expression has more than one operator, the execution order is defined by their¬†precedence, or, in other words, the default priority order of operators.\nPrecedence Name Sign ‚Ä¶ ‚Ä¶ ‚Ä¶ 14 unary plus + 14 unary negation - 13 exponentiation ** 12 multiplication * 12 division / 11 addition + 11 subtraction - ‚Ä¶ ‚Ä¶ ‚Ä¶ 2 assignment = ‚Ä¶ ‚Ä¶ ‚Ä¶ Assignment Let‚Äôs note that an assignment¬†=¬†is also an operator. It is listed in the precedence table with the very low priority of¬†2.\nThat‚Äôs why, when we assign a variable, like¬†x = 2 * 2 + 1, the calculations are done first and then the¬†=¬†is evaluated, storing the result in¬†x.\nlet x = 2 * 2 + 1; console.log( x ); // 5 Assignment = returns a value The fact of¬†=¬†being an operator, not a ‚Äúmagical‚Äù language construct has an interesting implication.\nAll operators in JavaScript return a value. That‚Äôs obvious for¬†+¬†and¬†-, but also true for¬†=.\nThe call¬†x = value¬†writes the¬†value¬†into¬†x¬†and then returns it.\nHere‚Äôs a demo that uses an assignment as part of a more complex expression:\nlet a = 1; let b = 2; let c = 3 - (a = b + 1); console.log( a ); // 3 console.log c ); // 0 In the example above, the result of expression¬†(a = b + 1)¬†is the value which was assigned to¬†a¬†(that is¬†3). It is then used for further evaluations.\nFunny code, isn‚Äôt it? We should understand how it works, because sometimes we see it in JavaScript libraries.\nAlthough, please don‚Äôt write the code like that. Such tricks definitely don‚Äôt make code clearer or readable.\nModify-in-place We often need to apply an operator to a variable and store the new result in that same variable.\nFor example:\nlet n = 2; n = n + 5; n = n * 2; This notation can be shortened using the operators¬†+=¬†and¬†*=:\nlet n = 2; n += 5; // now n = 7 (same as n = n + 5) n *= 2; // now n = 14 (same as n = n * 2) alert( n ); // 14 Increment/decrement Increasing or decreasing a number by one is among the most common numerical operations.\nSo, there are special operators for it:\nIncrement¬†++¬†increases a variable by 1: let counter = 2; counter++; // works the same as counter = counter + 1, but is shorter alert( counter ); // 3 Decrement¬†--¬†decreases a variable by 1: let counter = 2; counter--; // works the same as counter = counter - 1, but is shorter alert( counter ); // 1 Important: Increment/decrement can only be applied to variables. Trying to use it on a value like¬†5++¬†will give an error.\nThe operators¬†++¬†and¬†--¬†can be placed either before or after a variable.\nWhen the operator goes after the variable, it is in ‚Äúpostfix form‚Äù:¬†counter++. The ‚Äúprefix form‚Äù is when the operator goes before the variable:¬†++counter. Both of these statements do the same thing: increase¬†counter¬†by¬†1.\nIs there any difference? Yes, but we can only see it if we use the returned value of¬†++/--.\nLet‚Äôs clarify. As we know, all operators return a value. Increment/decrement is no exception. The prefix form returns the new value while the postfix form returns the old value (prior to increment/decrement).\nTo see the difference, here‚Äôs an example:\nlet counter = 1; let a = ++counter; // (*) alert(a); // 2 In the line¬†(*), the¬†prefix¬†form¬†++counter¬†increments¬†counter¬†and returns the new value,¬†2. So, the¬†alert¬†shows¬†2.\nNow, let‚Äôs use the postfix form:\nlet counter = 1; let a = counter++; // (*) changed ++counter to counter++ alert(a); // 1 In the line¬†(*), the¬†postfix¬†form¬†counter++¬†also increments¬†counter¬†but returns the¬†old¬†value (prior to increment). So, the¬†alert¬†shows¬†1.\nIncrement/decrement among other operators\nThe operators¬†++/--¬†can be used inside expressions as well. Their precedence is higher than most other arithmetical operations.\nFor instance:\nlet counter = 1; alert( 2 * ++counter ); // 4 Compare With:\nlet counter = 1; alert( 2 * counter++ ); // 2, because counter++ returns the \u0026#34;old\u0026#34; value Though technically okay, such notation usually makes code less readable. One line does multiple things ‚Äì not good.\nWhile reading code, a fast ‚Äúvertical‚Äù eye-scan can easily miss something like¬†counter++¬†and it won‚Äôt be obvious that the variable increased.\nWe advise a style of ‚Äúone line ‚Äì one action‚Äù:\nlet counter = 1; alert( 2 * counter ); counter++; Bitwise operators Bitwise operators treat arguments as 32-bit integer numbers and work on the level of their binary representation.\nThese operators are not JavaScript-specific. They are supported in most programming languages.\nThe list of operators:\nAND (¬†\u0026amp;¬†) OR (¬†|¬†) XOR (¬†^¬†) NOT (¬†~¬†) LEFT SHIFT (¬†\u0026lt;\u0026lt;¬†) RIGHT SHIFT (¬†\u0026gt;\u0026gt;¬†) ZERO-FILL RIGHT SHIFT (¬†\u0026gt;\u0026gt;\u0026gt;¬†) These operators are used very rarely, when we need to fiddle with numbers on the very lowest (bitwise) level. We won‚Äôt need these operators any time soon, as web development has little use of them, but in some special areas, such as cryptography, they are useful. You can read the¬†Bitwise Operators¬†chapter on MDN when a need arises.\nComma The comma operator¬†,¬†is one of the rarest and most unusual operators. Sometimes, it‚Äôs used to write shorter code, so we need to know it in order to understand what‚Äôs going on.\nThe comma operator allows us to evaluate several expressions, dividing them with a comma¬†,. Each of them is evaluated but only the result of the last one is returned.\nlet a = (1 + 2, 3 + 4); alert( a ); // 7 (the result of 3 + 4) Here, the first expression¬†1 + 2¬†is evaluated and its result is thrown away. Then,¬†3 + 4¬†is evaluated and returned as the result.\nComma has a very low precedence\nPlease note that the comma operator has very low precedence, lower than¬†=, so parentheses are important in the example above.\nWithout them:¬†a = 1 + 2, 3 + 4¬†evaluates¬†+¬†first, summing the numbers into¬†a = 3, 7, then the assignment operator¬†=¬†assigns¬†a = 3, and the rest is ignored. It‚Äôs like¬†(a = 1 + 2), 3 + 4.\nWhy do we need an operator that throws away everything except the last expression?\nSometimes, people use it in more complex constructs to put several actions in one line.\nFor example:\n// three operations in one line for (a = 1, b = 3, c = a * b; a \u0026lt; 10; a++) { ... } Comparisons We know many comparison operators from maths.\nIn JavaScript they are written like this:\nGreater/less than:¬†a \u0026gt; b,¬†a \u0026lt; b. Greater/less than or equals:¬†a \u0026gt;= b,¬†a \u0026lt;= b. Equals:¬†a == b, please note the double equality sign¬†==¬†means the equality test, while a single one¬†a = b¬†means an assignment. Not equals: In maths the notation is¬†‚â†, but in JavaScript it‚Äôs written as¬†a != b. In this article we‚Äôll learn more about different types of comparisons, how JavaScript makes them, including important peculiarities.\nAt the end you‚Äôll find a good recipe to avoid ‚ÄúJavaScript quirks‚Äù-related issues.\nBoolean is the result All comparison operators return a boolean value:\ntrue¬†‚Äì means ‚Äúyes‚Äù, ‚Äúcorrect‚Äù or ‚Äúthe truth‚Äù. false¬†‚Äì means ‚Äúno‚Äù, ‚Äúwrong‚Äù or ‚Äúnot the truth‚Äù. For example:\nconsole.log( 2 \u0026gt; 1 ); // true (correct) console.log( 2 == 1 ); // false (wrong) console.log( 2 != 1 ); // true (correct) A comparison result can be assigned to a variable, just like any value:\nlet result = 5 \u0026gt; 4; // assign the result of the comparison console.log( result ); // true String comparison To see whether a string is greater than another, JavaScript uses the so-called ‚Äúdictionary‚Äù or ‚Äúlexicographical‚Äù order.\nIn other words, strings are compared letter-by-letter.\nFor example:\nconsole.log( \u0026#39;Z\u0026#39; \u0026gt; \u0026#39;A\u0026#39; ); // true console.log( \u0026#39;Glow\u0026#39; \u0026gt; \u0026#39;Glee\u0026#39; ); // true console.log( \u0026#39;Bee\u0026#39; \u0026gt; \u0026#39;Be\u0026#39; ); // true The algorithm to compare two strings is simple:\nCompare the first character of both strings. If the first character from the first string is greater (or less) than the other string‚Äôs, then the first string is greater (or less) than the second. We‚Äôre done. Otherwise, if both strings‚Äô first characters are the same, compare the second characters the same way. Repeat until the end of either string. If both strings end at the same length, then they are equal. Otherwise, the longer string is greater. In the first example above, the comparison¬†'Z' \u0026gt; 'A'¬†gets to a result at the first step.\nThe second comparison¬†'Glow'¬†and¬†'Glee'¬†needs more steps as strings are compared character-by-character:\nG¬†is the same as¬†G. l¬†is the same as¬†l. o¬†is greater than¬†e. Stop here. The first string is greater. Not a real dictionary, but Unicode order\nThe comparison algorithm given above is roughly equivalent to the one used in dictionaries or phone books, but it‚Äôs not exactly the same.\nFor instance, case matters. A capital letter¬†\u0026quot;A\u0026quot;¬†is not equal to the lowercase¬†\u0026quot;a\u0026quot;. Which one is greater? The lowercase¬†\u0026quot;a\u0026quot;. Why? Because the lowercase character has a greater index in the internal encoding table JavaScript uses (Unicode). We‚Äôll get back to specific details and consequences of this in the chapter¬†Strings.\nComparison of different types When comparing values of different types, JavaScript converts the values to numbers.\nFor example:\nconsole.log( \u0026#39;2\u0026#39; \u0026gt; 1 ); // true, string \u0026#39;2\u0026#39; becomes a number 2 console.log( \u0026#39;01\u0026#39; == 1 ); // true, string \u0026#39;01\u0026#39; becomes a number 1 For boolean values,¬†true¬†becomes¬†1¬†and¬†false¬†becomes¬†0.\nFor example:\nalert( true == 1 ); // true alert( false == 0 ); // true A funny consequence\nIt is possible that at the same time:\nTwo values are equal. One of them is¬†true¬†as a boolean and the other one is¬†false¬†as a boolean. For example:\nlet a = 0; alert( Boolean(a) ); // false let b = \u0026#34;0\u0026#34;; alert( Boolean(b) ); // true alert(a == b); // true! From JavaScript‚Äôs standpoint, this result is quite normal. An equality check converts values using the numeric conversion (hence¬†\u0026quot;0\u0026quot;¬†becomes¬†0), while the explicit¬†Boolean¬†conversion uses another set of rules.\nStrict equality A regular equality check¬†==¬†has a problem. It cannot differentiate¬†0¬†from¬†false:\nalert( 0 == false ); // true The same thing happens with an empty string:\nalert( \u0026#39;\u0026#39; == false ); // true This happens because operands of different types are converted to numbers by the equality operator¬†==. An empty string, just like¬†false, becomes a zero.\nWhat to do if we‚Äôd like to differentiate¬†0¬†from¬†false?\nA strict equality operator¬†===¬†checks the equality without type conversion.\nIn other words, if¬†a¬†and¬†b¬†are of different types, then¬†a === b¬†immediately returns¬†false¬†without an attempt to convert them.\nLet‚Äôs try it:\nalert( 0 === false ); // false, because the types are different There is also a ‚Äústrict non-equality‚Äù operator¬†!==¬†analogous to¬†!=.\nThe strict equality operator is a bit longer to write, but makes it obvious what‚Äôs going on and leaves less room for errors.\nComparison with null and undefined There‚Äôs a non-intuitive behavior when¬†null¬†or¬†undefined¬†are compared to other values.\nFor a strict equality check¬†===\nThese values are different, because each of them is a different type.\nalert( null === undefined ); // false For a non-strict check¬†==\nThere‚Äôs a special rule. These two are a ‚Äúsweet couple‚Äù: they equal each other (in the sense of¬†==), but not any other value.\nFor maths and other comparisons¬†\u0026lt; \u0026gt; \u0026lt;= \u0026gt;=\nnull/undefined¬†are converted to numbers:¬†null¬†becomes¬†0, while¬†undefined¬†becomes¬†NaN.\nNow let‚Äôs see some funny things that happen when we apply these rules. And, what‚Äôs more important, how to not fall into a trap with them.\nStrange result: null vs 0 Let‚Äôs compare¬†null¬†with a zero:\nalert( null \u0026gt; 0 ); // (1) false alert( null == 0 ); // (2) false alert( null \u0026gt;= 0 ); // (3) true Mathematically, that‚Äôs strange. The last result states that ‚Äúnull¬†is greater than or equal to zero‚Äù, so in one of the comparisons above it must be¬†true, but they are both false.\nThe reason is that an equality check¬†==¬†and comparisons¬†\u0026gt; \u0026lt; \u0026gt;= \u0026lt;=¬†work differently. Comparisons convert¬†null¬†to a number, treating it as¬†0. That‚Äôs why (3)¬†null \u0026gt;= 0¬†is true and (1)¬†null \u0026gt; 0¬†is false.\nOn the other hand, the equality check¬†==¬†for¬†undefined¬†and¬†null¬†is defined such that, without any conversions, they equal each other and don‚Äôt equal anything else. That‚Äôs why (2)¬†null == 0¬†is false.\nAn incomparable undefined The value¬†undefined¬†shouldn‚Äôt be compared to other values:\nalert( undefined \u0026gt; 0 ); // false (1) alert( undefined \u0026lt; 0 ); // false (2) alert( undefined == 0 ); // false (3) Why does it dislike zero so much? Always false!\nWe get these results because:\nComparisons¬†(1)¬†and¬†(2)¬†return¬†false¬†because¬†undefined¬†gets converted to¬†NaN¬†and¬†NaN¬†is a special numeric value which returns¬†false¬†for all comparisons. The equality check¬†(3)¬†returns¬†false¬†because¬†undefined¬†only equals¬†null,¬†undefined, and no other value. Avoid Problems Why did we go over these examples? Should we remember these peculiarities all the time? Well, not really. Actually, these tricky things will gradually become familiar over time, but there‚Äôs a solid way to avoid problems with them:\nTreat any comparison with¬†undefined/null¬†except the strict equality¬†===¬†with exceptional care. Don‚Äôt use comparisons¬†\u0026gt;= \u0026gt; \u0026lt; \u0026lt;=¬†with a variable which may be¬†null/undefined, unless you‚Äôre really sure of what you‚Äôre doing. If a variable can have these values, check for them separately. Conditional branching: if, \u0026lsquo;?\u0026rsquo; Sometimes, we need to perform different actions based on different conditions.\nTo do that, we can use the¬†if¬†statement and the conditional operator¬†?, that‚Äôs also called a ‚Äúquestion mark‚Äù operator.\nThe ‚Äúif‚Äù statement The¬†if(...)¬†statement evaluates a condition in parentheses and, if the result is¬†true, executes a block of code.\nFor example:\nlet year = prompt(\u0026#34;In which year was ECMAScript-2015 specification published?\u0026#34;,\u0026#34;\u0026#34;); if (year == 2015) alert(\u0026#34;You are right!\u0026#34;); In the example above, the condition is a simple equality check (year == 2015), but it can be much more complex.\nIf we want to execute more than one statement, we have to wrap our code block inside curly braces:\nif (year == 2015) { alert( \u0026#34;That\u0026#39;s correct!\u0026#34; ); alert( \u0026#34;You\u0026#39;re so smart!\u0026#34; ); } We recommend wrapping your code block with curly braces¬†{}¬†every time you use an¬†if¬†statement, even if there is only one statement to execute. Doing so improves readability\nBoolean conversion The¬†if (‚Ä¶)¬†statement evaluates the expression in its parentheses and converts the result to a boolean.\nLet‚Äôs recall the conversion rules from the chapter¬†Type Conversions:\nA number¬†0, an empty string¬†\u0026quot;\u0026quot;,¬†null,¬†undefined, and¬†NaN¬†all become¬†false. Because of that they are called ‚Äúfalsy‚Äù values. Other values become¬†true, so they are called ‚Äútruthy‚Äù. So, the code under this condition would never execute:\nif (0) { // 0 is falsy ... } ‚Ä¶and inside this condition ‚Äì it always will:\nif (1) { // 1 is truthy ... } We can also pass a pre-evaluated boolean value to¬†if, like this:\nlet cond = (year == 2015); // equality evaluates to true or false if (cond) { ... } The ‚Äúelse‚Äù clause The if statement may contain an optional else block. It executes when the condition is falsy.\nFor example:\nlet year = prompt(\u0026#39;In which year was the ECMAScript-2015 specification published?\u0026#39;, \u0026#39;\u0026#39;); if (year == 2015) { alert( \u0026#39;You guessed it right!\u0026#39; ); } else { alert( \u0026#39;How can you be so wrong?\u0026#39; ); // any value except 2015 } Several conditions: ‚Äúelse if‚Äù Sometimes, we‚Äôd like to test several variants of a condition. The else if clause lets us do that.\nFor example:\nlet year = prompt(\u0026#39;In which year was the ECMAScript-2015 specification published?\u0026#39;, \u0026#39;\u0026#39;); if (year \u0026lt; 2015) { alert( \u0026#39;Too early...\u0026#39; ); } else if (year \u0026gt; 2015) { alert( \u0026#39;Too late\u0026#39; ); } else { alert( \u0026#39;Exactly!\u0026#39; ); } In the code above, JavaScript first checks¬†year \u0026lt; 2015. If that is falsy, it goes to the next condition¬†year \u0026gt; 2015. If that is also falsy, it shows the last¬†alert.\nThere can be more¬†else if¬†blocks. The final¬†else¬†is optional.\nConditional operator ‚Äò?‚Äô Sometimes, we need to assign a variable depending on a condition.\nFor instance:\nlet accessAllowed; let age = prompt(\u0026#39;How old are you?\u0026#39;, \u0026#39;\u0026#39;); if (age \u0026gt; 18) { accessAllowed = true; } else { accessAllowed = false; } alert(accessAllowed); The so-called ‚Äúconditional‚Äù or ‚Äúquestion mark‚Äù operator lets us do that in a shorter and simpler way.\nThe operator is represented by a question mark ?. Sometimes it‚Äôs called ‚Äúternary‚Äù, because the operator has three operands. It is actually the one and only operator in JavaScript which has that many.\nThe syntax is:\nlet result = condition ? value1 : value2; The¬†condition¬†is evaluated: if it‚Äôs truthy then¬†value1¬†is returned, otherwise ‚Äì¬†value2.\nFor example:\nlet accessAllowed = (age \u0026gt; 18) ? true : false; Technically, we can omit the parentheses around¬†age \u0026gt; 18. The question mark operator has a low precedence, so it executes after the comparison¬†\u0026gt;.\nThis example will do the same thing as the previous one:\n// the comparison operator \u0026#34;age \u0026gt; 18\u0026#34; executes first anyway // (no need to wrap it into parentheses) let accessAllowed = age \u0026gt; 18 ? true : false; But parentheses make the code more readable, so we recommend using them.\nPlease note: In the example above, you can avoid using the question mark operator because the comparison itself returns¬†true/false:\n// the same let accessAllowed = age \u0026gt; 18; Multiple ‚Äò?‚Äô A sequence of question mark operators¬†?¬†can return a value that depends on more than one condition.\nFor instance:\nlet age = prompt(\u0026#34;age?\u0026#34;, 18); let message = age \u0026lt; 3 ? \u0026#34;Hi, baby!\u0026#34; : age \u0026lt; 18 ? \u0026#34;Hello!\u0026#34; : age \u0026lt; 100 ? \u0026#34;Greetings!\u0026#34; : \u0026#34;What an unusual age!\u0026#34;; alert(message); It may be difficult at first to grasp what‚Äôs going on. But after a closer look, we can see that it‚Äôs just an ordinary sequence of tests:\nThe first question mark checks whether¬†age \u0026lt; 3. If true ‚Äì it returns¬†'Hi, baby!'. Otherwise, it continues to the expression after the colon ‚Äú:‚Äù, checking¬†age \u0026lt; 18. If that‚Äôs true ‚Äì it returns¬†'Hello!'. Otherwise, it continues to the expression after the next colon ‚Äú:‚Äù, checking¬†age \u0026lt; 100. If that‚Äôs true ‚Äì it returns¬†'Greetings!'. Otherwise, it continues to the expression after the last colon ‚Äú:‚Äù, returning¬†'What an unusual age!'. Here‚Äôs how this looks using¬†if..else:\nif (age \u0026lt; 3) { message = \u0026#39;Hi, baby!\u0026#39;; } else if (age \u0026lt; 18) { message = \u0026#39;Hello!\u0026#39;; } else if (age \u0026lt; 100) { message = \u0026#39;Greetings!\u0026#39;; } else { message = \u0026#39;What an unusual age!\u0026#39;; } Logical operators There are four logical operators in JavaScript:¬†||¬†(OR),¬†\u0026amp;\u0026amp;¬†(AND),¬†!¬†(NOT),¬†??¬†(Nullish Coalescing). Here we cover the first three, the¬†??¬†operator is in the next article.\nAlthough they are called ‚Äúlogical‚Äù, they can be applied to values of any type, not only boolean. Their result can also be of any type.\nLet‚Äôs see the details.\n|| (OR) The ‚ÄúOR‚Äù operator is represented with two vertical line symbols:\nresult = a || b; In classical programming, the logical OR is meant to manipulate boolean values only. If any of its arguments are¬†true, it returns¬†true, otherwise it returns¬†false.\nIn JavaScript, the operator is a little bit trickier and more powerful. But first, let‚Äôs see what happens with boolean values.\nThere are four possible logical combinations:\nconsole.log( true || true ); // true console.log( false || true ); // true console.log( true || false ); // true console.log( false || false ); // false As we can see, the result is always¬†true¬†except for the case when both operands are¬†false.\nIf an operand is not a boolean, it‚Äôs converted to a boolean for the evaluation.\nFor instance, the number¬†1¬†is treated as¬†true, the number¬†0¬†as¬†false:\nif (1 || 0) { // works just like if( true || false ) alert( \u0026#39;truthy!\u0026#39; ); } Most of the time, OR¬†||¬†is used in an¬†if¬†statement to test if¬†any¬†of the given conditions is¬†true.\nFor example:\nlet hour = 9; if (hour \u0026lt; 10 || hour \u0026gt; 18) { alert( \u0026#39;The office is closed.\u0026#39; ); } We can pass more conditions:\nlet hour = 12; let isWeekend = true; if (hour \u0026lt; 10 || hour \u0026gt; 18 || isWeekend) { alert( \u0026#39;The office is closed.\u0026#39; ); // it is the weekend } OR \u0026ldquo;||\u0026rdquo; finds the first truthy value The logic described above is somewhat classical. Now, let‚Äôs bring in the ‚Äúextra‚Äù features of JavaScript.\nThe extended algorithm works as follows.\nGiven multiple OR‚Äôed values:\nresult = value1 || value2 || value3; The OR || operator does the following:\nEvaluates operands from left to right. For each operand, converts it to boolean. If the result is true, stops and returns the original value of that operand. If all operands have been evaluated (i.e. all were false), returns the last operand. A value is returned in its original form, without the conversion.\nIn other words, a chain of OR || returns the first truthy value or the last one if no truthy value is found.\nFor instance:\nconsole.log(1 || 0); // 1 (1 is truthy) console.log(null || 1); // 1 (1 is the first truthy value) console.log(null || 0 || 1); // 1 (the first truthy value) console.log(undefined || null || 0); // 0 (all falsy, returns the last value) This leads to some interesting usage compared to a ‚Äúpure, classical, boolean-only OR‚Äù.\nGetting the first truthy value from a list of variables or expressions.\nFor instance, we have firstName, lastName and nickName variables, all optional (i.e. can be undefined or have falsy values).\nLet‚Äôs use OR || to choose the one that has the data and show it (or \u0026ldquo;Anonymous\u0026rdquo; if nothing set):\nlet firstName = \u0026#34;\u0026#34;; let lastName = \u0026#34;\u0026#34;; let nickName = \u0026#34;SuperCoder\u0026#34;; console.log( firstName || lastName || nickName || \u0026#34;Anonymous\u0026#34;); // SuperCoder If all variables were falsy,¬†\u0026quot;Anonymous\u0026quot;¬†would show up.\nShort-circuit evaluation.\nAnother feature of OR¬†||¬†operator is the so-called ‚Äúshort-circuit‚Äù evaluation.\nIt means that¬†||¬†processes its arguments until the first truthy value is reached, and then the value is returned immediately, without even touching the other argument.\nThe importance of this feature becomes obvious if an operand isn‚Äôt just a value, but an expression with a side effect, such as a variable assignment or a function call.\nIn the example below, only the second message is printed:\ntrue || alert(\u0026#34;not printed\u0026#34;); false || alert(\u0026#34;printed\u0026#34;); In the first line, the OR¬†||¬†operator stops the evaluation immediately upon seeing¬†true, so the¬†alert¬†isn‚Äôt run.\nSometimes, people use this feature to execute commands only if the condition on the left part is falsy.\n\u0026amp;\u0026amp; (AND) The AND operator is represented with two ampersands¬†\u0026amp;\u0026amp;:\nresult = a \u0026amp;\u0026amp; b; In classical programming, AND returns¬†true¬†if both operands are truthy and¬†false¬†otherwise:\nconsole.log( true \u0026amp;\u0026amp; true ); // true console.log( false \u0026amp;\u0026amp; true ); // false console.log( true \u0026amp;\u0026amp; false ); // false console.log( false \u0026amp;\u0026amp; false ); // false An example with¬†if:\nlet hour = 12; let minute = 30; if (hour == 12 \u0026amp;\u0026amp; minute == 30) { alert( \u0026#39;The time is 12:30\u0026#39; ); } Just as with OR, any value is allowed as an operand of AND:\nif (1 \u0026amp;\u0026amp; 0) { // evaluated as true \u0026amp;\u0026amp; false alert( \u0026#34;won\u0026#39;t work, because the result is falsy\u0026#34; ); } AND ‚Äú\u0026amp;\u0026amp;‚Äù finds the first falsy value Given multiple AND‚Äôed values:\nresult = value1 \u0026amp;\u0026amp; value2 \u0026amp;\u0026amp; value3; The AND¬†\u0026amp;\u0026amp;¬†operator does the following:\nEvaluates operands from left to right. For each operand, converts it to a boolean. If the result is¬†false, stops and returns the original value of that operand. If all operands have been evaluated (i.e. all were truthy), returns the last operand. In other words, AND returns the first falsy value or the last value if none were found.\nThe rules above are similar to OR. The difference is that AND returns the first¬†falsy¬†value while OR returns the first¬†truthy¬†one.\nExamples:\n// if the first operand is truthy, // AND returns the second operand: alert( 1 \u0026amp;\u0026amp; 0 ); // 0 alert( 1 \u0026amp;\u0026amp; 5 ); // 5 // if the first operand is falsy, // AND returns it. The second operand is ignored alert( null \u0026amp;\u0026amp; 5 ); // null alert( 0 \u0026amp;\u0026amp; \u0026#34;no matter what\u0026#34; ); // 0 We can also pass several values in a row. See how the first falsy one is returned:\nalert( 1 \u0026amp;\u0026amp; 2 \u0026amp;\u0026amp; null \u0026amp;\u0026amp; 3 ); // null When all values are truthy, the last value is returned:\nalert( 1 \u0026amp;\u0026amp; 2 \u0026amp;\u0026amp; 3 ); // 3, the last one Precedence of AND \u0026amp;\u0026amp; is higher than OR || The precedence of AND \u0026amp;\u0026amp; operator is higher than OR ||.\nSo the code a \u0026amp;\u0026amp; b || c \u0026amp;\u0026amp; d is essentially the same as if the \u0026amp;\u0026amp; expressions were in parentheses: (a \u0026amp;\u0026amp; b) || (c \u0026amp;\u0026amp; d).\nDon‚Äôt replace¬†if¬†with¬†||¬†or¬†\u0026amp;\u0026amp;\nSometimes, people use the AND¬†\u0026amp;\u0026amp;¬†operator as a ‚Äúshorter way to write¬†if‚Äù.\nFor instance:\nlet x = 1; (x \u0026gt; 0) \u0026amp;\u0026amp; alert( \u0026#39;Greater than zero!\u0026#39; ); The action in the right part of¬†\u0026amp;\u0026amp;¬†would execute only if the evaluation reaches it. That is, only if¬†(x \u0026gt; 0)¬†is true.\nSo we basically have an analogue for:\nlet x = 1; if (x \u0026gt; 0) alert( \u0026#39;Greater than zero!\u0026#39; ); Although, the variant with¬†\u0026amp;\u0026amp;¬†appears shorter,¬†if¬†is more obvious and tends to be a little bit more readable. So we recommend using every construct for its purpose: use¬†if¬†if we want¬†if¬†and use¬†\u0026amp;\u0026amp;¬†if we want AND.\n! (NOT) The boolean NOT operator is represented with an exclamation sign !.\nThe syntax is pretty simple:\nresult = !value; The operator accepts a single argument and does the following:\nConverts the operand to boolean type: true/false. Returns the inverse value.\nFor instance:\nalert( !true ); // false alert( !0 ); // true A double NOT¬†!!¬†is sometimes used for converting a value to boolean type:\nalert( !!\u0026#34;non-empty string\u0026#34; ); // true alert( !!null ); // false That is, the first NOT converts the value to boolean and returns the inverse, and the second NOT inverses it again. In the end, we have a plain value-to-boolean conversion.\nThere‚Äôs a little more verbose way to do the same thing ‚Äì a built-in¬†Boolean¬†function:\nalert( Boolean(\u0026#34;non-empty string\u0026#34;) ); // true alert( Boolean(null) ); // false The precedence of NOT¬†!¬†is the highest of all logical operators, so it always executes first, before¬†\u0026amp;\u0026amp;¬†or¬†||.\nNullish coalescing operator \u0026lsquo;??\u0026rsquo; The nullish coalescing operator is written as two question marks¬†??.\nAs it treats¬†null¬†and¬†undefined¬†similarly, we‚Äôll use a special term here, in this article. For brevity, we‚Äôll say that a value is ‚Äúdefined‚Äù when it‚Äôs neither¬†null¬†nor¬†undefined.\nThe result of¬†a ?? b¬†is:\nif¬†a¬†is defined, then¬†a, if¬†a¬†isn‚Äôt defined, then¬†b. In other words,¬†??¬†returns the first argument if it‚Äôs not¬†null/undefined. Otherwise, the second one.\nThe nullish coalescing operator isn‚Äôt anything completely new. It‚Äôs just a nice syntax to get the first ‚Äúdefined‚Äù value of the two.\nWe can rewrite¬†result = a ?? b¬†using the operators that we already know, like this:\nresult = (a !== null \u0026amp;\u0026amp; a !== undefined) ? a : b; Now it should be absolutely clear what ?? does. Let‚Äôs see where it helps.\nThe common use case for ?? is to provide a default value.\nFor example, here we show user if its value isn‚Äôt null/undefined, otherwise Anonymous:\nlet user; alert(user ?? \u0026#34;Anonymous\u0026#34;); // Anonymous (user is undefined) Here‚Äôs the example with¬†user¬†assigned to a name:\nlet user = \u0026#34;John\u0026#34;; alert(user ?? \u0026#34;Anonymous\u0026#34;); // John (user is not null/undefined) We can also use a sequence of¬†??¬†to select the first value from a list that isn‚Äôt¬†null/undefined.\nLet‚Äôs say we have a user‚Äôs data in variables¬†firstName,¬†lastName¬†or¬†nickName. All of them may be not defined, if the user decided not to fill in the corresponding values.\nWe‚Äôd like to display the user name using one of these variables, or show ‚ÄúAnonymous‚Äù if all of them are¬†null/undefined.\nLet‚Äôs use the¬†??¬†operator for that:\nlet firstName = null; let lastName = null; let nickName = \u0026#34;Supercoder\u0026#34;; // shows the first defined value: alert(firstName ?? lastName ?? nickName ?? \u0026#34;Anonymous\u0026#34;); // Supercoder Loops: while and for The ‚Äúwhile‚Äù loop The¬†while¬†loop has the following syntax:\nwhile (condition) { // code // so-called \u0026#34;loop body\u0026#34; } While the condition is truthy, the code from the loop body is executed.\nFor instance, the loop below outputs i while i \u0026lt; 3:\nlet i = 0; while (i \u0026lt; 3) { // shows 0, then 1, then 2 alert( i ); i++; } A single execution of the loop body is called¬†an iteration. The loop in the example above makes three iterations.\nIf¬†i++¬†was missing from the example above, the loop would repeat (in theory) forever. In practice, the browser provides ways to stop such loops, and in server-side JavaScript, we can kill the process.\nAny expression or variable can be a loop condition, not just comparisons: the condition is evaluated and converted to a boolean by¬†while.\nFor instance, a shorter way to write¬†while (i != 0)¬†is¬†while (i):\nlet i = 3; while (i) { // when i becomes 0, the condition becomes falsy, and the loop stops alert( i ); i--; } Curly braces are not required for a single-line body\nIf the loop body has a single statement, we can omit the curly braces¬†{‚Ä¶}:\nlet i = 3; while (i) alert(i--); The ‚Äúdo‚Ä¶while‚Äù loop The condition check can be moved below the loop body using the do..while syntax:\ndo { // loop body } while (condition); The loop will first execute the body, then check the condition, and, while it‚Äôs truthy, execute it again and again.\nlet i = 0; do { alert( i ); i++; } while (i \u0026lt; 3); This form of syntax should only be used when you want the body of the loop to execute¬†at least once¬†regardless of the condition being truthy. Usually, the other form is preferred:¬†while(‚Ä¶) {‚Ä¶}.\nThe ‚Äúfor‚Äù loop The for loop is more complex, but it‚Äôs also the most commonly used loop.\nIt looks like this:\nfor (begin; condition; step) { // ... loop body ... } Let‚Äôs learn the meaning of these parts by example. The loop below runs alert(i) for i from 0 up to (but not including) 3:\nfor (let i = 0; i \u0026lt; 3; i++) { // shows 0, then 1, then 2 alert(i); } Let‚Äôs examine the¬†for¬†statement part-by-part:\npart begin let i = 0 executes once upon entering the loop condition i\u0026lt; 3 Checked before every loop iteration. If false, the loop stops body alert(i) Run again and again while the condition is truthy step i++ Executes after the body on each iteration. The general loop algorithm works like this: Run begin ‚Üí (if condition ‚Üí run body and run step) ‚Üí (if condition ‚Üí run body and run step) ‚Üí (if condition ‚Üí run body and run step) ‚Üí ... That is,¬†begin¬†executes once, and then it iterates: after each¬†condition¬†test,¬†body¬†and¬†step¬†are executed.\nIf you are new to loops, it could help to go back to the example and reproduce how it runs step-by-step on a piece of paper.\nHere‚Äôs exactly what happens in our case:\n// for (let i = 0; i \u0026lt; 3; i++) alert(i) // run begin let i = 0 // if condition ‚Üí run body and run step if (i \u0026lt; 3) { alert(i); i++ } // if condition ‚Üí run body and run step if (i \u0026lt; 3) { alert(i); i++ } // if condition ‚Üí run body and run step if (i \u0026lt; 3) { alert(i); i++ } // ...finish, because now i == 3 Breaking the loop Normally, a loop exits when its condition becomes falsy.\nBut we can force the exit at any time using the special¬†break¬†directive.\nFor example, the loop below asks the user for a series of numbers, ‚Äúbreaking‚Äù when no number is entered:\nlet sum = 0; while (true) { let value = +prompt(\u0026#34;Enter a number\u0026#34;, \u0026#39;\u0026#39;); if (!value) break; // (*) sum += value; } alert( \u0026#39;Sum: \u0026#39; + sum ); The¬†break¬†directive is activated at the line¬†(*)¬†if the user enters an empty line or cancels the input. It stops the loop immediately, passing control to the first line after the loop. Namely,¬†alert.\nThe combination ‚Äúinfinite loop +¬†break¬†as needed‚Äù is great for situations when a loop‚Äôs condition must be checked not in the beginning or end of the loop, but in the middle or even in several places of its body.\nContinue to the next iteration The¬†continue¬†directive is a ‚Äúlighter version‚Äù of¬†break. It doesn‚Äôt stop the whole loop. Instead, it stops the current iteration and forces the loop to start a new one (if the condition allows).\nWe can use it if we‚Äôre done with the current iteration and would like to move on to the next one.\nThe loop below uses¬†continue¬†to output only odd values:\nfor (let i = 0; i \u0026lt; 10; i++) { // if true, skip the remaining part of the body if (i % 2 == 0) continue; alert(i); // 1, then 3, 5, 7, 9 } For even values of¬†i, the¬†continue¬†directive stops executing the body and passes control to the next iteration of¬†for¬†(with the next number). So the¬†alert¬†is only called for odd values.\nNo¬†break/continue¬†to the right side of ‚Äò?‚Äô\nPlease note that syntax constructs that are not expressions cannot be used with the ternary operator¬†?. In particular, directives such as¬†break/continue¬†aren‚Äôt allowed there.\nFor example, if we take this code:\nif (i \u0026gt; 5) { alert(i); } else { continue; } ‚Ä¶and rewrite it using a question mark:\n(i \u0026gt; 5) ? alert(i) : continue; // continue isn\u0026#39;t allowed here ‚Ä¶it stops working: there‚Äôs a syntax error.\nThis is just another reason not to use the question mark operator¬†?¬†instead of¬†if.\nLabels for break/continue Sometimes we need to break out from multiple nested loops at once.\nFor example, in the code below we loop over¬†i¬†and¬†j, prompting for the coordinates¬†(i, j)¬†from¬†(0,0)¬†to¬†(2,2):\nfor (let i = 0; i \u0026lt; 3; i++) { for (let j = 0; j \u0026lt; 3; j++) { let input = prompt(`Value at coords (${i},${j})`, \u0026#39;\u0026#39;); // what if we want to exit from here to Done (below)? } } alert(\u0026#39;Done!\u0026#39;); We need a way to stop the process if the user cancels the input.\nThe ordinary¬†break¬†after¬†input¬†would only break the inner loop. That‚Äôs not sufficient ‚Äì labels, come to the rescue!\nA¬†label¬†is an identifier with a colon before a loop:\nlabelName: for (...) { ... } The¬†break \u0026lt;labelName\u0026gt;¬†statement in the loop below breaks out to the label:\nouter: for (let i = 0; i \u0026lt; 3; i++) { for (let j = 0; j \u0026lt; 3; j++) { let input = prompt(`Value at coords (${i},${j})`, \u0026#39;\u0026#39;); // if an empty string or canceled, then break out of both loops if (!input) break outer; // (*) // do something with the value... } } alert(\u0026#39;Done!\u0026#39;); In the code above,¬†break outer¬†looks upwards for the label named¬†outer¬†and breaks out of that loop.\nSo the control goes straight from¬†(*)¬†to¬†alert('Done!').\nWe can also move the label onto a separate line:\nouter: for (let i = 0; i \u0026lt; 3; i++) { ... } The¬†continue¬†directive can also be used with a label. In this case, code execution jumps to the next iteration of the labeled loop.\nLabels do not allow to ‚Äújump‚Äù anywhere\nLabels do not allow us to jump into an arbitrary place in the code.\nFor example, it is impossible to do this:\nbreak label; // jump to the label below (doesn\u0026#39;t work) label: for (...) A¬†break¬†directive must be inside a code block. Technically, any labelled code block will do, e.g.:\nlabel: { // ... break label; // works // ... } ‚Ä¶Although, 99.9% of the time¬†break¬†is used inside loops, as we‚Äôve seen in the examples above.\nA¬†continue¬†is only possible from inside a loop.\nThe \u0026ldquo;switch\u0026rdquo; statement A¬†switch¬†statement can replace multiple¬†if¬†checks.\nIt gives a more descriptive way to compare a value with multiple variants.\nThe syntax The¬†switch¬†has one or more¬†case¬†blocks and an optional default.\nIt looks like this:\nswitch(x) { case \u0026#39;value1\u0026#39;: // if (x === \u0026#39;value1\u0026#39;) ... [break] case \u0026#39;value2\u0026#39;: // if (x === \u0026#39;value2\u0026#39;) ... [break] default: ... [break] } The value of¬†x¬†is checked for a strict equality to the value from the first¬†case¬†(that is,¬†value1) then to the second (value2) and so on. If the equality is found,¬†switch¬†starts to execute the code starting from the corresponding¬†case, until the nearest¬†break¬†(or until the end of¬†switch). If no case is matched then the¬†default¬†code is executed (if it exists). Type matters Let‚Äôs emphasize that the equality check is always strict. The values must be of the same type to match.\nFor example, let‚Äôs consider the code:\nlet arg = prompt(\u0026#34;Enter a value?\u0026#34;); switch (arg) { case \u0026#39;0\u0026#39;: case \u0026#39;1\u0026#39;: alert( \u0026#39;One or zero\u0026#39; ); break; case \u0026#39;2\u0026#39;: alert( \u0026#39;Two\u0026#39; ); break; case 3: alert( \u0026#39;Never executes!\u0026#39; ); break; default: alert( \u0026#39;An unknown value\u0026#39; ); } For¬†0,¬†1, the first¬†alert¬†runs. For¬†2¬†the second¬†alert¬†runs. But for¬†3, the result of the¬†prompt¬†is a string¬†\u0026quot;3\u0026quot;, which is not strictly equal¬†===¬†to the number¬†3. So we‚Äôve got a dead code in¬†case 3! The¬†default¬†variant will execute. Functions Quite often we need to perform a similar action in many places of the script.\nFor example, we need to show a nice-looking message when a visitor logs in, logs out and maybe somewhere else.\nFunctions are the main ‚Äúbuilding blocks‚Äù of the program. They allow the code to be called many times without repetition.\nWe‚Äôve already seen examples of built-in functions, like alert(message), prompt(message, default) and confirm(question). But we can create functions of our own as well.\nFunction Declaration To create a function we can use a function declaration.\nIt looks like this:\nfunction showMessage() { alert( \u0026#39;Hello everyone!\u0026#39; ); } The¬†function¬†keyword goes first, then goes the¬†name of the function, then a list of¬†parameters¬†between the parentheses (comma-separated, empty in the example above, we‚Äôll see examples later) and finally the code of the function, also named ‚Äúthe function body‚Äù, between curly braces.\nfunction name(parameter1, parameter2, ... parameterN) { // body } Our new function can be called by its name:¬†showMessage().\nThe call showMessage() executes the code of the function. Here we will see the message two times.\nThis example clearly demonstrates one of the main purposes of functions: to avoid code duplication.\nIf we ever need to change the message or the way it is shown, it‚Äôs enough to modify the code in one place: the function which outputs it.\nLocal variables A variable declared inside a function is only visible inside that function.\nFor example:\nfunction showMessage() { let message = \u0026#34;Hello, I\u0026#39;m JavaScript!\u0026#34;; // local variable alert( message ); } showMessage(); // Hello, I\u0026#39;m JavaScript! alert( message ); // \u0026lt;-- Error! The variable is local to the function Outer Variables A function can access an outer variable as well, for example:\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { let message = \u0026#39;Hello, \u0026#39; + userName; alert(message); } showMessage(); // Hello, John The function has full access to the outer variable. It can modify it as well.\nFor instance:\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { userName = \u0026#34;Bob\u0026#34;; // (1) changed the outer variable let message = \u0026#39;Hello, \u0026#39; + userName; alert(message); } alert( userName ); // John before the function call showMessage(); alert( userName ); // Bob, the value was modified by the function The outer variable is only used if there‚Äôs no local one.\nIf a same-named variable is declared inside the function then it¬†shadows¬†the outer one. For instance, in the code below the function uses the local¬†userName. The outer one is ignored:\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { let userName = \u0026#34;Bob\u0026#34;; // declare a local variable let message = \u0026#39;Hello, \u0026#39; + userName; // Bob alert(message); } // the function will create and use its own userName showMessage(); alert( userName ); // John, unchanged, the function did not access the outer variable Parameters We can pass arbitrary data to functions using parameters.\nIn the example below, the function has two parameters:¬†from¬†and¬†text.\nfunction showMessage(from, text) { // parameters: from, text alert(from + \u0026#39;: \u0026#39; + text); } showMessage(\u0026#39;Ann\u0026#39;, \u0026#39;Hello!\u0026#39;); // Ann: Hello! (1) showMessage(\u0026#39;Ann\u0026#39;, \u0026#34;What\u0026#39;s up?\u0026#34;); // Ann: What\u0026#39;s up? (2) When the function is called in lines (1) and (2), the given values are copied to local variables from and text. Then the function uses them.\nHere‚Äôs one more example: we have a variable from and pass it to the function. Please note: the function changes from, but the change is not seen outside, because a function always gets a copy of the value:\nfunction showMessage(from, text) { from = \u0026#39;*\u0026#39; + from + \u0026#39;*\u0026#39;; // make \u0026#34;from\u0026#34; look nicer alert( from + \u0026#39;: \u0026#39; + text ); } let from = \u0026#34;Ann\u0026#34;; showMessage(from, \u0026#34;Hello\u0026#34;); // *Ann*: Hello // the value of \u0026#34;from\u0026#34; is the same, the function modified a local copy alert( from ); // Ann When a value is passed as a function parameter, it‚Äôs also called an argument.\nIn other words, to put these terms straight:\nA parameter is the variable listed inside the parentheses in the function declaration (it‚Äôs a declaration time term). An argument is the value that is passed to the function when it is called (it‚Äôs a call time term). We declare functions listing their parameters, then call them passing arguments.\nIn the example above, one might say: ‚Äúthe function showMessage is declared with two parameters, then called with two arguments: from and \u0026ldquo;Hello\u0026rdquo;‚Äù.\nDefault values If a function is called, but an argument is not provided, then the corresponding value becomes undefined.\nFor instance, the aforementioned function showMessage(from, text) can be called with a single argument:\nfunction showMessage(from, text = \u0026#34;no text given\u0026#34;) { alert( from + \u0026#34;: \u0026#34; + text ); } showMessage(\u0026#34;Ann\u0026#34;); // Ann: no text given Default parameters in old JavaScript code Several years ago, JavaScript didn‚Äôt support the syntax for default parameters. So people used other ways to specify them.\nNowadays, we can come across them in old scripts.\nFor example, an explicit check for undefined:\nfunction showMessage(from, text) { if (text === undefined) { text = \u0026#39;no text given\u0026#39;; } alert( from + \u0026#34;: \u0026#34; + text ); } ‚Ä¶Or using the¬†||¬†operator:\nfunction showMessage(from, text) { // If the value of text is falsy, assign the default value // this assumes that text == \u0026#34;\u0026#34; is the same as no text at all text = text || \u0026#39;no text given\u0026#39;; ... } Alternative default parameters Sometimes it makes sense to assign default values for parameters at a later stage after the function declaration.\nWe can check if the parameter is passed during the function execution, by comparing it with¬†undefined:\nfunction showMessage(text) { // ... if (text === undefined) { // if the parameter is missing text = \u0026#39;empty message\u0026#39;; } alert(text); } showMessage(); // empty message Returning a value A function can return a value back into the calling code as the result.\nThe simplest example would be a function that sums two values:\nfunction sum(a, b) { return a + b; } let result = sum(1, 2); console.log( result ); // 3 A function with an empty¬†return¬†or without it returns¬†undefined\nIf a function does not return a value, it is the same as if it returns¬†undefined\nfunction doNothing() { /* empty */ } alert( doNothing() === undefined ); // true An empty¬†return¬†is also the same as¬†return undefined:\nfunction doNothing() { return; } alert( doNothing() === undefined ); // true One function ‚Äì one action\nA function should do exactly what is suggested by its name, no more.\nTwo independent actions usually deserve two functions, even if they are usually called together (in that case we can make a 3rd function that calls those two).\nA few examples of breaking this rule:\ngetAge¬†‚Äì would be bad if it shows an¬†alert¬†with the age (should only get). createForm¬†‚Äì would be bad if it modifies the document, adding a form to it (should only create it and return). checkPermission¬†‚Äì would be bad if it displays the¬†access granted/denied¬†message (should only perform the check and return the result). These examples assume common meanings of prefixes. You and your team are free to agree on other meanings, but usually they‚Äôre not much different. In any case, you should have a firm understanding of what a prefix means, what a prefixed function can and cannot do. All same-prefixed functions should obey the rules. And the team should share the knowledge.\nFunction expressions In JavaScript, a function is not a ‚Äúmagical language structure‚Äù, but a special kind of value.\nThe syntax that we used before is called a¬†Function Declaration:\nfunction sayHi() { alert( \u0026#34;Hello\u0026#34; ); } There is another syntax for creating a function that is called a Function Expression.\nIt allows us to create a new function in the middle of any expression.\nFor example:\nlet sayHi = function() { alert( \u0026#34;Hello\u0026#34; ); }; Here we can see a variable¬†sayHi¬†getting a value, the new function, created as¬†function() { alert(\u0026quot;Hello\u0026quot;); }.\nAs the function creation happens in the context of the assignment expression (to the right side of¬†=), this is a¬†Function Expression.\nPlease note, there‚Äôs no name after the¬†function¬†keyword. Omitting a name is allowed for Function Expressions.\nHere we immediately assign it to the variable, so the meaning of these code samples is the same: ‚Äúcreate a function and put it into the variable¬†sayHi‚Äù.\nIn more advanced situations, that we‚Äôll come across later, a function may be created and immediately called or scheduled for a later execution, not stored anywhere, thus remaining anonymous.\nFunction is a value Let‚Äôs reiterate: no matter how the function is created, a function is a value. Both examples above store a function in the¬†sayHi¬†variable.\nWe can even print out that value using¬†alert:\nfunction sayHi() { alert( \u0026#34;Hello\u0026#34; ); } alert( sayHi ); // shows the function code Please note that the last line does not run the function, because there are no parentheses after¬†sayHi. There are programming languages where any mention of a function name causes its execution, but JavaScript is not like that.\nIn JavaScript, a function is a value, so we can deal with it as a value. The code above shows its string representation, which is the source code.\nSurely, a function is a special value, in the sense that we can call it like¬†sayHi().\nBut it‚Äôs still a value. So we can work with it like with other kinds of values.\nWe can copy a function to another variable:\nfunction sayHi() { // (1) create alert( \u0026#34;Hello\u0026#34; ); } let func = sayHi; // (2) copy func(); // Hello // (3) run the copy (it works)! sayHi(); // Hello // this still works too (why wouldn\u0026#39;t it) Here‚Äôs what happens above in detail:\nThe Function Declaration¬†(1)¬†creates the function and puts it into the variable named¬†sayHi. Line¬†(2)¬†copies it into the variable¬†func. Please note again: there are no parentheses after¬†sayHi. If there were, then¬†func = sayHi()¬†would write¬†the result of the call¬†sayHi()¬†into¬†func, not¬†the function¬†sayHi¬†itself. Now the function can be called as both¬†sayHi()¬†and¬†func(). We could also have used a Function Expression to declare¬†sayHi, in the first line:\nlet sayHi = function() { // (1) create alert( \u0026#34;Hello\u0026#34; ); }; let func = sayHi; // ... Everything would work the same.\nWhy is there a semicolon at the end?\nYou might wonder, why do Function Expressions have a semicolon¬†;¬†at the end, but Function Declarations do not:\nfunction sayHi() { // ... } let sayHi = function() { // ... }; The answer is simple: a Function Expression is created here as function(‚Ä¶) {‚Ä¶} inside the assignment statement: let sayHi = ‚Ä¶;. The semicolon ; is recommended at the end of the statement, it‚Äôs not a part of the function syntax.\nThe semicolon would be there for a simpler assignment, such as let sayHi = 5;, and it‚Äôs also there for a function assignment.\nfunction callbacks Let‚Äôs look at more examples of passing functions as values and using function expressions.\nWe‚Äôll write a function¬†ask(question, yes, no)¬†with three parameters:\nquestion\nText of the question\nyes\nFunction to run if the answer is ‚ÄúYes‚Äù\nno\nFunction to run if the answer is ‚ÄúNo‚Äù\nThe function should ask the¬†question¬†and, depending on the user‚Äôs answer, call¬†yes()¬†or¬†no():\nfunction ask(question, yes, no) { if (confirm(question)) yes() else no(); } function showOk() { alert( \u0026#34;You agreed.\u0026#34; ); } function showCancel() { alert( \u0026#34;You canceled the execution.\u0026#34; ); } // usage: functions showOk, showCancel are passed as arguments to ask ask(\u0026#34;Do you agree?\u0026#34;, showOk, showCancel); In practice, such functions are quite useful. The major difference between a real-life¬†ask¬†and the example above is that real-life functions use more complex ways to interact with the user than a simple¬†confirm. In the browser, such functions usually draw a nice-looking question window. But that‚Äôs another story.\nThe arguments¬†showOk¬†and¬†showCancel¬†of¬†ask¬†are called¬†callback functions¬†or just¬†callbacks.\nThe idea is that we pass a function and expect it to be ‚Äúcalled back‚Äù later if necessary. In our case,¬†showOk¬†becomes the callback for ‚Äúyes‚Äù answer, and¬†showCancel¬†for ‚Äúno‚Äù answer.\nWe can use Function Expressions to write an equivalent, shorter function:\nfunction ask(question, yes, no) { if (confirm(question)) yes() else no(); } ask( \u0026#34;Do you agree?\u0026#34;, function() { alert(\u0026#34;You agreed.\u0026#34;); }, function() { alert(\u0026#34;You canceled the execution.\u0026#34;); } ); Here, functions are declared right inside the¬†ask(...)¬†call. They have no name, and so are called¬†anonymous. Such functions are not accessible outside of¬†ask¬†(because they are not assigned to variables), but that‚Äôs just what we want here.\nSuch code appears in our scripts very naturally, it‚Äôs in the spirit of JavaScript.\nA function is a value representing an ‚Äúaction‚Äù Regular values like strings or numbers represent the data.\nA function can be perceived as an action.\nWe can pass it between variables and run when we want.\nFunction Expression vs Function Declaration Let‚Äôs formulate the key differences between Function Declarations and Expressions.\nFirst, the syntax: how to differentiate between them in the code.\nFunction Declaration:¬†a function, declared as a separate statement, in the main code flow: // Function Declaration function sum(a, b) { return a + b; } Function Expression:¬†a function, created inside an expression or inside another syntax construct. Here, the function is created on the right side of the ‚Äúassignment expression‚Äù¬†=: // Function Expression let sum = function(a, b) { return a + b; }; The more subtle difference is¬†when¬†a function is created by the JavaScript engine.\nA Function Expression is created when the execution reaches it and is usable only from that moment. Once the execution flow passes to the right side of the assignment¬†let sum = function‚Ä¶¬†‚Äì here we go, the function is created and can be used (assigned, called, etc. ) from now on.\nFunction Declarations are different.\nA Function Declaration can be called earlier than it is defined. For example, a global Function Declaration is visible in the whole script, no matter where it is.\nThat‚Äôs due to internal algorithms. When JavaScript prepares to run the script, it first looks for global Function Declarations in it and creates the functions. We can think of it as an ‚Äúinitialization stage‚Äù.\nAnd after all Function Declarations are processed, the code is executed. So it has access to these functions.\nFor example, this works:\nsayHi(\u0026#34;John\u0026#34;); // Hello, John function sayHi(name) { alert( `Hello, ${name}` ); } The Function Declaration sayHi is created when JavaScript is preparing to start the script and is visible everywhere in it.\n‚Ä¶If it were a Function Expression, then it wouldn‚Äôt work\nsayHi(\u0026#34;John\u0026#34;); // error! let sayHi = function(name) { // (*) no magic any more alert( `Hello, ${name}` ); }; In strict mode, when a Function Declaration is within a code block, it‚Äôs visible everywhere inside that block. But not outside of it. When to choose Function Declaration versus Function Expression? As a rule of thumb, when we need to declare a function, the first thing to consider is Function Declaration syntax. It gives more freedom in how to organize our code, because we can call such functions before they are declared.\nThat‚Äôs also better for readability, as it‚Äôs easier to look up function f(‚Ä¶) {‚Ä¶} in the code than let f = function(‚Ä¶) {‚Ä¶};. Function Declarations are more ‚Äúeye-catching‚Äù.\n‚Ä¶But if a Function Declaration does not suit us for some reason, or we need a conditional declaration (we‚Äôve just seen an example), then Function Expression should be used.\nSummary Functions are values. They can be assigned, copied or declared in any place of the code. If the function is declared as a separate statement in the main code flow, that‚Äôs called a ‚ÄúFunction Declaration‚Äù. If the function is created as a part of an expression, it‚Äôs called a ‚ÄúFunction Expression‚Äù. Function Declarations are processed before the code block is executed. They are visible everywhere in the block. Function Expressions are created when the execution flow reaches them. In most cases when we need to declare a function, a Function Declaration is preferable, because it is visible prior to the declaration itself. That gives us more flexibility in code organization, and is usually more readable.\nSo we should use a Function Expression only when a Function Declaration is not fit for the task. We‚Äôve seen a couple of examples of that in this chapter, and will see more in the future.\nArrow functions, the basics There‚Äôs another very simple and concise syntax for creating functions, that‚Äôs often better than Function Expressions.\nIt‚Äôs called ‚Äúarrow functions‚Äù, because it looks like this:\nlet func = (arg1, arg2, ..., argN) =\u0026gt; expression; This creates a function¬†func¬†that accepts arguments¬†arg1..argN, then evaluates the¬†expression¬†on the right side with their use and returns its result.\nIn other words, it‚Äôs the shorter version of:\nlet func = function(arg1, arg2, ..., argN) { return expression; }; Let‚Äôs see a concrete example:\nlet sum = (a, b) =\u0026gt; a + b; /* This arrow function is a shorter form of: let sum = function(a, b) { return a + b; }; */ alert( sum(1, 2) ); // 3 As you can see,¬†(a, b) =\u0026gt; a + b¬†means a function that accepts two arguments named¬†a¬†and¬†b. Upon the execution, it evaluates the expression¬†a + b¬†and returns the result.\nIf we have only one argument, then parentheses around parameters can be omitted, making that even shorter. For example:\nlet double = n =\u0026gt; n * 2; // roughly the same as: let double = function(n) { return n * 2 } alert( double(3) ); // 6 If there are no arguments, parentheses are empty, but they must be present: let sayHi = () =\u0026gt; alert(\u0026#34;Hello!\u0026#34;); sayHi(); Arrow functions can be used in the same way as Function Expressions.\nFor instance, to dynamically create a function:\nlet age = prompt(\u0026#34;What is your age?\u0026#34;, 18); let welcome = (age \u0026lt; 18) ? () =\u0026gt; alert(\u0026#39;Hello!\u0026#39;) : () =\u0026gt; alert(\u0026#34;Greetings!\u0026#34;); welcome(); Arrow functions may appear unfamiliar and not very readable at first, but that quickly changes as the eyes get used to the structure.\nThey are very convenient for simple one-line actions, when we‚Äôre just too lazy to write many words.\nMultiline arrow functions The arrow functions that we‚Äôve seen so far were very simple. They took arguments from the left of =\u0026gt;, evaluated and returned the right-side expression with them.\nSometimes we need a more complex function, with multiple expressions and statements. In that case, we can enclose them in curly braces. The major difference is that curly braces require a return within them to return a value (just like a regular function does).\nLike this:\nlet sum = (a, b) =\u0026gt; { // the curly brace opens a multiline function let result = a + b; return result; // if we use curly braces, then we need an explicit \u0026#34;return\u0026#34; }; alert( sum(1, 2) ); // 3 More to come Here we praised arrow functions for brevity. But that‚Äôs not all!\nArrow functions have other interesting features.\nTo study them in-depth, we first need to get to know some other aspects of JavaScript, so we‚Äôll return to arrow functions later in the chapter Arrow functions revisited.\nFor now, we can already use arrow functions for one-line actions and callbacks.\nSummary Arrow functions are handy for simple actions, especially for one-liners. They come in two flavors:\nWithout curly braces:¬†(...args) =\u0026gt; expression¬†‚Äì the right side is an expression: the function evaluates it and returns the result. Parentheses can be omitted, if there‚Äôs only a single argument, e.g.¬†n =\u0026gt; n*2. With curly braces:¬†(...args) =\u0026gt; { body }¬†‚Äì brackets allow us to write multiple statements inside the function, but we need an explicit¬†return¬†to return something. ","permalink":"http://localhost:1313/posts/fundamentals-of-javascript/","summary":"\u003cp\u003e\u003cimg alt=\"JS Image\" loading=\"lazy\" src=\"/posts/assets/web/JS/js.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eJavaScript was originally created to bring static web pages to life, enabling them to respond dynamically to user interactions. Its code, known as scripts, is directly embedded within HTML documents and executed by the browser as soon as the page loads. Because these scripts are delivered and interpreted as plain text, they bypass the need for a separate compilation process‚Äîthis makes development swift and flexible.\u003c/p\u003e\n\u003cp\u003eThis interpretive nature is a key characteristic of JavaScript and distinguishes it from compiled languages like Java. Whereas Java requires a compile step to transform code into bytecode before execution, JavaScript‚Äôs immediate execution model facilitates rapid testing and iterative development. Over time, JavaScript has evolved from a simple tool for adding interactivity to a robust language capable of handling complex web applications, manipulating the Document Object Model (DOM), and even running on servers through environments like Node.js.\u003c/p\u003e","title":"Fundamentals of JavaScript"},{"content":"\nI recently uploaded a video showcasing my Arch Linux (btw) setup just for fun, and to my surprise, it went viral within the Linux community! Since then, I‚Äôve received numerous messages asking about the installation process. Although I wanted to make a detailed video tutorial, my laptop\u0026rsquo;s older specs make it difficult to handle both recording and installation simultaneously. So, I‚Äôve decided to write this article to guide you through the installation process using my dotfiles and the installation script from Ja.Kool.It. Below, you‚Äôll find a step-by-step guide to get started.\n1. Install ArchLinux With Minimal Configuration Make a Bootable USB First Download ArchLinux ISO from official site : Download Link Second Download for Your Operating System Ventoy Extract the Ventoy Folder and Write it on your USB. Copy ArchLinux ISO into USB. if you Don\u0026rsquo;t Know how to use ventoy read this article Boot From USB Restart Your Computer and Press the Boot Menu key according to your Computer. In Boot Menu Select Your USB It will open ventoy and show you all ISO file available in USB Select the ArchLinux ISO and Open in Normal Mode. Connect to Internet For wired internet you don\u0026rsquo;t need to do anyting For wireless Command Given Below $ iwctl [iwd]# From the [iwd]# prompt you will need figure out your device name. Then, assuming you know the SSID (service set identifier) of your wireless network, go ahead and connect like so:\n[iwd]# device list # You should see something like this: # # Devices # ------------------------------------------------------------- # Name Address Powered Adapter Mode # ------------------------------------------------------------- # wlan0 ... on ... ... [iwd]# station YOURDEVICE connect YOURSSID For a secured wireless network, you will be prompted for the WiFi password. Once you enter the correct password, you‚Äôll be off to the races!\nMaking Partition Ready for Archinstall for that first we will use the cfdisk to make partitions and then mfks for formatting that $ lsblk if will show your all partitions and there information\n$ cfdisk it show you all of your information about your drives\nYou have to make 3 partitions\nEFI boot Partition - Type Must be EFI System Swap Partition - Type Must be Swap Partition Root Partition - Type Must be Linux File System after Make Partitions write and exit the cfdisk and Run these commands and just change paths\n$ mkfs.ext4 /path/to/root/partition $ mfks.vfat -F 32 /path/to/efi/partition $ mkswap /path/to/swap/partition we will use the pre-mounted disk configuration for that run\n$ mkdir /mnt/archinstall $ mount /path/to/root/partition /mnt/archinstall $ mkdir /mnt/archinstall/boot $ mount /path/to/efi/partition/ /mnt/archinstall/boot $ swapon /path/to/swap/partition now we are done with partitioning the partitions\nUpdate System and Run ArchInstall $ pacman -Sy archinstall archlinux-keyring $ archinstall Actual Installation Start Here After running the archinstall command it will show you something like this.\nLocales : In locales select your keyboard layout, locale language, and endcoding Mirrors : In Mirrors select best mirror region according to your location Disk Configuration : -\u0026gt;Partitioning-\u0026gt;Pre-mounted Configuration-\u0026gt; Enter /mnt/archinstall Swap : Enable it if you made the swap partition Boot Loader : Select which boot loader do you need like grub, system-d-boot Unified kernel images : Enable if you want Hostname : Select your hostname what you want Root Password : Enter Your Root Password User account : make a account for normal user Profile : Select-\u0026gt;Type-\u0026gt;Minimal Audio : Select-\u0026gt;Pipewire Kernels : Select one or many according your need. if don\u0026rsquo;t know don\u0026rsquo;t touch it Network configuration : Select-\u0026gt;Use NetworkManager Additional packages : git vim Optional repositories : Enable additional repos if you want like multilib Timezone : Select timezone according to your location Automatic time sync (NTP) : Leave Enabled after that just press the install and wait for installation to be finished\nCongratulationsüéâ!! You have successfully installed the ArchLinux and now you can say that I use Arch btw\n2. Installing JaKooLit Arch-Hyprland Script. reboot your system and login with username and password and connect with internet and clone the repo and preform these operations.\ngit clone --depth=1 https://github.com/JaKooLit/Arch-Hyprland.git ~/Arch-Hyprland cd ~/Arch-Hyprland chmod +x install.sh ./install.sh select the option according the option given in image I have explained each one of them and those without comment means go with that are in image.\nAfter selecting all the options, I will start installing Hyprland and additional components. During the installation, you may be prompted to enter the password 2-3 times, so stay attentive. Once the installation is successful, it will show a prompt to press \u0026lsquo;Y\u0026rsquo; to reboot the system.\nYou have successfully installed Archlinux+Hyprland.\n3. My Dotfiles Configuration To set up your environment using these dotfiles, follow these steps:\nClone the Repository: git clone https://github.com/ahmad9059/dotfiles.git cd dotfiles Backup Existing Dotfiles: Before copying new configurations, it\u0026rsquo;s wise to back up your current dotfiles: mkdir -p ~/dotfiles_backup cp ~/.config ~/dotfiles_backup -r cp ~/.tmux.conf ~/dotfiles_backup cp ~/.zshrc ~/dotfiles_backup Copy New Configurations: Remember you must in dotfiles folder to run following commands cp -r .config ~/ cp .zshrc ~/ cp -r .themes ~/.themes cd .icons cp .icons.zip ~/ cd ~/ unzip .icons.zip rm .icons.zip After the installation, you can start using the configured applications. Open your GTK settings and set the widget theme to Andromeda-dark, the icon theme to Dracula, and the mouse cursor to Future-black Cursors.\nPackages¬†pacman: Install of these Packages using pacman\nsudo pacman -S foot alacritty lsd bat tmux neovim tldr obs-studio vlc yazi Packages¬†yay(Optional): Install of these Packages Using yay. Remember they are according to my preference like I have install vscode, telegram etc.\nyay -S thorium-browser-bin visual-studio-code-bin 64gram-desktop-bin apple-fonts fum Congratulations! You have successfully completed the installation.\n","permalink":"http://localhost:1313/posts/archlinux-installation-guide/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/posts/assets/archlinux/archlinux.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eI recently uploaded a video showcasing my Arch Linux (btw) setup just for fun, and to my surprise, it went viral within the Linux community! Since then, I‚Äôve received numerous messages asking about the installation process. Although I wanted to make a detailed video tutorial, my laptop\u0026rsquo;s older specs make it difficult to handle both recording and installation simultaneously. So, I‚Äôve decided to write this article to guide you through the installation process using my dotfiles and the installation script from Ja.Kool.It. Below, you‚Äôll find a step-by-step guide to get started.\u003c/p\u003e","title":"ArchLinux Installation Guide Using My Dotfiles"},{"content":"Tailwind CSS is a utility-first CSS framework designed to allow developers to build custom designs quickly. Instead of writing custom styles, Tailwind provides a collection of utility classes that you can use to style elements directly in the HTML.\n1. Installation and Setup How to install Tailwind using CDN For quick prototyping, you can include Tailwind directly in your project with a CDN. Add the following to your HTML \u0026lt;head\u0026gt; tag:\nAdd the Play CDN script tag to the¬†\u0026lt;head\u0026gt;¬†of your HTML file, and start using Tailwind‚Äôs utility classes to style your content.\n\u0026lt;script src=\u0026#34;https://unpkg.com/@tailwindcss/browser@4\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 2. Key Concepts in Tailwind CSS Utility-First Approach Tailwind uses small utility classes like text-center, bg-blue-500, and mt-4 to control elements\u0026rsquo; design directly in the HTML. This eliminates the need for writing custom CSS.\nResponsive Design Tailwind provides responsive utilities that help you design mobile-first and scale up for larger screens. You can add breakpoints to utilities using sm:, md:, lg:, xl:, etc.\n3. Core Concepts Colors Tailwind provides a set of predefined colors. You can apply them using classes like bg-blue-500 or text-red-600. Example:\n\u0026lt;div class=\u0026#34;bg-blue-500 text-white p-4\u0026#34;\u0026gt; This is a blue background with white text. \u0026lt;/div\u0026gt; Spacing (Padding and Margin) Tailwind has utilities for margin (m-*) and padding (p-*), where * is a scale value. Example:\n\u0026lt;div class=\u0026#34;m-4 p-6\u0026#34;\u0026gt; This element has 1rem margin and 1.5rem padding. \u0026lt;/div\u0026gt; Typography Tailwind provides utilities for font size (text-*), font weight (font-*), text color (text-*), and line height (leading-*). Example:\n\u0026lt;p class=\u0026#34;text-lg font-semibold leading-relaxed\u0026#34;\u0026gt; This is a large, semi-bold text with relaxed line height. \u0026lt;/p\u0026gt; 4. Layout Utilities Flexbox and Grid Tailwind CSS makes it easy to use Flexbox and CSS Grid with utilities like flex, grid, flex-col, justify-center, etc. Example of Flexbox:\n\u0026lt;div class=\u0026#34;flex justify-center items-center h-screen\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bg-gray-200 p-6\u0026#34;\u0026gt;Center me!\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Example of Grid:\n\u0026lt;div class=\u0026#34;grid grid-cols-3 gap-4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bg-red-500\u0026#34;\u0026gt;Item 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-blue-500\u0026#34;\u0026gt;Item 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-green-500\u0026#34;\u0026gt;Item 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Container The .container class centers your content and applies responsive width.\n\u0026lt;div class=\u0026#34;container mx-auto p-4\u0026#34;\u0026gt; Content here will be centered. \u0026lt;/div\u0026gt; 5. Customization You can customize Tailwind‚Äôs default theme using the tailwind.config.js file. For example, you can change the color palette, font sizes, spacing, etc.\nmodule.exports = { theme: { extend: { colors: { customBlue: \u0026#39;#123456\u0026#39;, }, }, }, } 7. Tailwind Directives @tailwind base;: Applies the base styles like resets. @tailwind components;: Injects component-level styles. @tailwind utilities;: Includes utility classes like padding, margin, colors, etc. @apply: Use this directive to group utilities into a single class (useful for custom components). .btn { @apply bg-blue-500 text-white p-2 rounded; } 8. Handling States with Pseudo-Classes Tailwind provides utilities for pseudo-classes such as hover:, focus:, active:, etc. Example:\n\u0026lt;button class=\u0026#34;bg-blue-500 hover:bg-blue-700 text-white p-2\u0026#34;\u0026gt; Hover me! \u0026lt;/button\u0026gt; 9. Transitions and Animations You can add smooth transitions and animations using Tailwind‚Äôs utility classes. Example:\n\u0026lt;div class=\u0026#34;transition ease-in-out duration-500 transform hover:scale-110\u0026#34;\u0026gt; Hover to scale up! \u0026lt;/div\u0026gt; 10. Plugins Tailwind allows you to extend its functionality with plugins, such as for forms, typography, or aspect ratio utilities. Example of installing a plugin:\nnpm install @tailwindcss/forms Then, add it to your tailwind.config.js:\nmodule.exports = { plugins: [ require(\u0026#39;@tailwindcss/forms\u0026#39;), ], } 11. Tailwind CSS with JIT Mode Just-in-time (JIT) mode generates only the classes you use, reducing file size and speeding up development. To enable JIT:\nmodule.exports = { mode: \u0026#39;jit\u0026#39;, content: [\u0026#39;./**/*.html\u0026#39;], } 12. Example Project \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Tailwind Example\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;https://cdn.tailwindcss.com\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;bg-gray-100 text-gray-900\u0026#34;\u0026gt; \u0026lt;header class=\u0026#34;bg-blue-500 text-white p-4\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;text-xl font-bold\u0026#34;\u0026gt;My Tailwind Page\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;main class=\u0026#34;p-6\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bg-white p-4 rounded shadow-md\u0026#34;\u0026gt;Card 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-white p-4 rounded shadow-md\u0026#34;\u0026gt;Card 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-white p-4 rounded shadow-md\u0026#34;\u0026gt;Card 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer class=\u0026#34;bg-gray-800 text-white p-4 text-center\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026amp;copy; 2025 My Tailwind Site\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","permalink":"http://localhost:1313/posts/tailwind-css/","summary":"\u003cp\u003eTailwind CSS is a utility-first CSS framework designed to allow developers to build custom designs quickly. Instead of writing custom styles, Tailwind provides a collection of utility classes that you can use to style elements directly in the HTML.\u003c/p\u003e\n\u003ch3 id=\"1-installation-and-setup\"\u003e1. Installation and Setup\u003c/h3\u003e\n\u003chr\u003e\n\u003ch4 id=\"how-to-install-tailwind-using-cdn\"\u003eHow to install Tailwind using CDN\u003c/h4\u003e\n\u003cp\u003eFor quick prototyping, you can include Tailwind directly in your project with a CDN. Add the following to your HTML \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e tag:\u003c/p\u003e","title":"Tailwind CSS - A Utility-First CSS Framework"},{"content":"CSS (Cascadia Styling Sheet) is the style sheet language that\u0026rsquo;s use to specify how a document written in HTML or XML should be presented and styled.\nCSS Boilerplate *{ margin: 0; padding: 0; box-sizing: border-box; } html,body{ width: 100%; height: 100%; } How to Link CSS with HTML Add the line after tittle tag in your html file\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;\nTips:\nWe use . dot to target class in CSS We use # hash to target id in CSS Also if you want to target tag we can simply target like h3{} Div: box means div and also when e have more than one element and also when there is rectangle shape, very high change there is div ;). Units in CSS px : It is use to define the measurement in pixels. 1px = 1/96th of inch % : It is used to define the measurement as a percentage that is relative to another value (maybe to their parent element). vh : It is relative to the height of the viewpoint(screen). 1vh = 1% or 1/100 of the height of the viewpoint vw : It is relative to the width of the viewpoint(screen). 1vm or 1/100 of the width of the width of viewpoint em : Relative to the font-size of the element 2em means 2 times the size of the current font rem : Relative to font-size of the root element like html tag. vmin : Relative to 1% of viewport\u0026rsquo;s* smaller dimension vmax : Relative to 1% of viewport\u0026rsquo;s* larger dimension Tip: There are mainly two type of fonts sans-serif and serif. The difference is the presence of decorative strokes, or serifs at the beginning and end of letters.\nExamples\nMargin VS Padding: padding: padding is the space inside an element, between its content and its border. margin: margin is the space outside an element, between the element\u0026rsquo;s border and other elements. border: A shorthand property for border-width, border-style, border-color ex: border: 3px solid gray border-radius: A shorthand property for the for border *_radius properties. We can also add radius on only one corner. like using these properties border-bottom-left-radius, border-bottom-right-radius,border-top-left-radius,border-top-right-radius Block VS Inline VS Inline-Block: Block Element:- Start on a new line (occupy full width) and take-up 100% of the width by default. You can set height, width, margin,padding. ex: \u0026lt;div\u0026gt;, \u0026lt;p\u0026gt;, \u0026lt;h1\u0026gt;.\nInline Element:- Do not start on a new line and only take-up as much width as their content/required. Height and width cannot be set/change. ex: \u0026lt;span\u0026gt;,\u0026lt;a\u0026gt;,\u0026lt;strong\u0026gt;.\nInline-Block Element:- Behave like inline element(do not start on a new line). Allow setting height,width like block elements. Useful for layouts purposes without breaking the flow.ex: \u0026lt;img\u0026gt;,button,\u0026lt;input\u0026gt;.\ndisplay: specifies how a certain HTML should be displayed. attributes: block,inline,inline-block Position Absolute VS Position Relative: Position Absolute:-\nAn element with position: absolute is removed from the normal document flow. It is positioned relative to its nearest positioned ancestor (an ancestor with position: relative, absolute, or fixed). If no such ancestor exists, it is positioned relative to the initial containing block (viewport). It does not occupy space in the normal layout, allowing it to move freely within its containing block. Position Relative:-\nAn element with position: relative remains in the normal document flow. It is positioned relative to its original position, using top, right, bottom, and left values. Space for the element is still reserved in the layout, so it affects other elements. position: specifies the type of positioning method used for an element absolute,relative,fixed. Background Properties: background: A shorthand property for all the background properties. It set by img(),color, linear-gradiant(to bottom right, red,yellow) etc. background-size: Specifies the size of the background images like cover,contain etc. background-repeat: Sets if/how a background image will be repeated. like no-repeat, round etc. background-position: specifies the position of a background image like center,right, left,top,bottom. Flexbox: Flexbox is a CSS layout model designed to help arrange elements in a responsive flexible way. It simplifies alignment, distribution, and spacing of items within a container-even when their size is unknown or dynamic. The Flexbox model is one-dimensional, meaning it handles either row or a column layout, Unlike CSS Grid which is two-dimensional(rows and columns). Key Concepts:\nFlex Container: The parent element that holds flex items. We can define a flex container by applying display: flex; to it. Flex items: The child elements of a flex container that will be laid out according to the flexbox rules. Main Axis and Cross Axis: Main Axis(x-axis): This axis along which flex items are placed. It depends on the flex-direction property (row by default). Cross Axis(y-axis): The perpendicular axis to the main axis. for example, if the flex-direction is row, the cross axis will be vertical. display: flex; Defines the element as flex container. flex-direction: Specifies the direction of the main axis like row, column,row-reverse,column-reverse. justify-content: Aligns items along the main axis like start,center,space-between,space-evenlly. align-items: Aligns items along the cross-axis stretch,center, flex-start,flex-end. flex-wrap: The¬†flex-wrap¬†property specifies whether the flexible items should wrap or not. like nowrap,wrap,wrap-reverse. flex-shrink: The¬†flex-shrink¬†property specifies how the item will shrink relative to the rest of the flexible items inside the same container. value like 0 or 1. Pseudo-Class and Pseudo-Elements:- Pseudo-elements and pseudo-classes are both powerful CSS features used to style elements based on specific states or to target parts of elements that aren\u0026rsquo;t directly available in the DOM, although they serve similar purposes, modifying or styling elements based on conditions, they function differently.\nPseudo-Classes: They targets an element in a specific state, and we use : for pseudo-classes. Syntax: selector:pesudo-class\nCommon Examples:\n:hover when an element is hovered. :focus when an element is focused. :th-child(n) targets the nth child of parent. :active when an element is being clicked. :visited for visited links Pseudo-Elements: Targets part of an element or inserts content before/after it. we use :: for elements. Syntax: selector::pesudo-element\nCommon Examples:\n::before insert content before an element. ::after inserts content after an element. ::first-letter styles the first-letter. ::first-line styles the first line. ::selection styles the selected text. Pseudo Classes Pseudo-Elements Interact with element states (e.g., :hover, :focus) Target parts of an element or add content (e.g., ::before, ::first-letter). Color Science and their Units 1. Color Name: CSS provides a set of predefined names that are recognized by all browsers ex: red,green,blue,black (total around 140 standard names) Example: background-color: red;\n2. Hexadecimal Notation(#RRGGBB): A more precise way to specify color in CSS is using hexadecimal(hx) notation. Hex values are written in the form #RRGGBB, where:\n#RR : represent the red component. #GG : represent the green component. #BB : represent the blue component. The values range is 00-FF, 00 means no color and FF means full intensity. Example: background-color: #11111b; 3. RGB Functional Notation: The rgb notation uses the same concept as hex but, specifies values in the decimal range from 0-255. The format is rgb(red,green,blue), where each color component is an integer between 0(no color) and 255(full intensity). Example: background-color: rgb(255,0.0);\n4. RGBA Functional Notation: rgba() extends the rgb() notation by adding an alpha channel for transparency. The format is rgba(red,green,blue,alpha), where alpha value is a decimal between 0(completely transparent) and 1(completely opoque). Example: background-color: rgba(255,0,0,0.5).\nGrid in CSS CSS Grid Layout is a powerful two-dimensional layout system designed to handle both rows and columns. It provides a way to create web layouts without relying on floats or positioning.\nCore Concepts of CSS Grid; Grid Container: The parent element where display: grid; is applied. Grid Items: The direct child elements of a grid container. Grid Lines: Horizontal and vertical lines that divide the gird into cells. Defining a Grid: Columns and Rows: Use grid-template-columns and grid-template-rows to define the grid. grid-template-columns: Specifies the size of the columns, and how many columns in a grid layout grid-template-rows: Specifies the size of the rows in a grid layout. Gap between Grid items: Use gap,row-gap,column-gap to create spacing. Alignment and Justification: align-items: Aligns items vertically inside the container. justify-items: Aligns items horizontally inside the container. align-content: Vertically aligns the whole grid inside the container (when total grid size is smaller than container). jusitfy-content: Horizontally aligns the whole grid inside the container (when total grid size is smaller than container). other useful: justify-self: Aligns the content for a specific grid item along the row axis align-self: Aligns the content for a specific grid item along the column axis grid-row-start: Specifies where to start the grid item grid-row-end: Specifies where to end the grid item grid-column-start: Specifies where to start the grid item grid-column-end: Specifies where to end the grid item grid-row: A shorthand property for the¬†grid-row-start¬†and the¬†grid-row-end¬†properties.ex: grid-row: 1 / 3; grid-column: A shorthand property for the¬†grid-column-start¬†and the¬†grid-column-end¬†properties.ex: grid-column: 1 / 4; CSS Grid vs Flexbox CSS Grid Flexbox Two-dimensional layout One-dimensional layout Suitable for complex layouts Ideal for simpler layouts (row/column) Explicit rows and columns No rows/columns concept Responsive Web Design 1.Understanding Units The first thing in responsiveness is to understand the Absolute(like px) and Relative(em,vh) Units and given are units in css.\nAbsolute Units These units are fixed and not affected by the size of other elements or the viewport.\npx (pixels): A single pixel on the screen. cm (centimeters): A physical centimeter. mm (millimeters): A physical millimeter. in (inches): A physical inch (1 inch = 2.54 cm). Relative Units These units are based on the size of other elements, the viewport, or the font size.\nRelative to the Font Size em: Relative to the font size of the parent element. rem (root em): Relative to the font size of the root element (\u0026lt;html\u0026gt;). ex: Relative to the height of the lowercase letter \u0026ldquo;x\u0026rdquo; in the current font. ch: Relative to the width of the character \u0026ldquo;0\u0026rdquo; (zero) in the current font. Relative to the Viewport vw (viewport width): 1% of the viewport‚Äôs width. vh (viewport height): 1% of the viewport‚Äôs height. vmin: 1% of the smaller dimension (width or height) of the viewport. vmax: 1% of the larger dimension (width or height) of the viewport. Relative to the Element‚Äôs Size % (percentage): Relative to the size of the parent element. 3. Flexbox Flexbox is a powerful tool for creating responsive layouts that adapt to different screen sizes and devices. Below are key takeaways for using Flexbox in responsive design:\nGeneral Concepts Flex Direction: Use flex-direction: row; for horizontal layouts. Switch to flex-direction: column; for vertical layouts on smaller screens using media queries. Flex Wrap: Use flex-wrap: wrap; to allow flex items to wrap onto new lines if necessary. Flex Property: Use the flex property with percentages (e.g., flex: 50%;) to adjust the width of items based on the screen size. 3. CSS Media Queries Media query is a CSS technique introduced in CSS3. It uses the¬†@mediarule to include a block of CSS properties only if a certain condition is true.\nExample If the browser window is 600px or smaller, the background color will be lightblue:\n@media (max-width: 600px) { body { background-color: lightblue; } Add a Breakpoint: Earlier in this tutorial we made a web page with rows and columns, and it was responsive, but it did not look good on a small screen.\nMedia queries can help with that. We can add a breakpoint where certain parts of the design will behave differently on each side of the breakpoint.\nAlways Design for Mobile First Mobile First means designing for mobile before designing for desktop or any other device (This will make the page display faster on smaller devices).\nThis means that we must make some changes in our CSS.\nInstead of changing styles when the width gets¬†smaller¬†than 768px, we should change the design when the width gets¬†larger¬†than 768px. This will make our design Mobile First:\nTypical Device Breakpoints There are tons of screens and devices with different heights and widths, so it is hard to create an exact breakpoint for each device. To keep things simple you could target five groups:\n/* Extra small devices (phones, 600px and down) */ @media only screen and (max-width: 600px) {...} /* Small devices (portrait tablets and large phones, 600px and up) */ @media only screen and (min-width: 600px) {...} /* Medium devices (landscape tablets, 768px and up) */ @media only screen and (min-width: 768px) {...} /* Large devices (laptops/desktops, 992px and up) */ @media only screen and (min-width: 992px) {...} /* Extra large devices (large laptops and desktops, 1200px and up) */ @media only screen and (min-width: 1200px) {...} CSS Animations CSS allows animation of HTML elements without using JavaScript!. An animation lets an element gradually change from one style to another. You can change as many CSS properties you want, as many times as you want. To use CSS animation, you must first specify some keyframes for the animation. Keyframes hold what styles the element will have at certain times. Animations is just transaction from initial to final position. The @keyframes Rule: When you specify CSS styles inside the @keyframes rule, the animation will gradually change from the current to the new style at certain times.\n@keyframes animation-name { to{ /* Intial properties */ left: 0%; rotate: 0; top: 0; } from{ /* final properties */ left: 75%; rotate: 360deg; border-radius: 50%; background-color: green; } } /* we can also give animation in percenatge so when the animation is 25% complete, 50% complete, and again when the animation is 100% complete: */ @keyframes animation-name { 0%{ left: 0%; rotate: 0; top: 0; } 25%{ left: 75%; top: 0; background-color: blue; } 50%{ left: 75%; top: 73%; rotate: 360deg; background-color: green; } 75%{ left: 0; top: 73%; background-color: aqua; } 100%{ left: 0; top: 0; } } CSS Animation Properties Property Description @keyframes Specifies the animation code animation A shorthand property for setting all the animation properties. animation:¬†example 5s linear 2s infinite alternate; animation-delay specifies a delay for start of an animation. like 1s,5s animation-direction Specifies whether an animation should be played forwards, backward or in alternate cycles.normal,reverse,alternate,alternate-reverse. animation-duration specifies how long time an animation should take to complete one cycle like. 2s,4s. animation-iteration-count Specifies the number of times an animation should be played. like 2,4, or infinite. animation-name Specifies the name of the @keyframes animation. animation-fill-mode Specifies a style for the element when animation is not playing or completed(before it starts, after it ends, or both).none,forwards,backwards,both. animation-timing-function Specifes the speed curve of the animation like ease,linear,ease-in,ease-out,ease-in-out,cubic-bezier(n,n,n,n) Animation-timing-function: ease¬†- Specifies an animation with a slow start, then fast, then end slowly (this is default) linear¬†- Specifies an animation with the same speed from start to end ease-in¬†- Specifies an animation with a slow start ease-out¬†- Specifies an animation with a slow end ease-in-out¬†- Specifies an animation with a slow start and end cubic-bezier(n,n,n,n)¬†- Lets you define your own values in a cubic-bezier function. ","permalink":"http://localhost:1313/posts/css/","summary":"\u003cp\u003eCSS (Cascadia Styling Sheet) is the style sheet language that\u0026rsquo;s use to specify how a document written in HTML or XML should be presented and styled.\u003c/p\u003e\n\u003ch2 id=\"css-boilerplate\"\u003eCSS Boilerplate\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003e*\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003emargin\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003epadding\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003ebox-sizing\u003c/span\u003e: \u003cspan style=\"color:#ff79c6\"\u003eborder-box\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003ehtml\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e,\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003ebody\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003ewidth\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e100\u003c/span\u003e\u003cspan style=\"color:#8be9fd\"\u003e%\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003eheight\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e100\u003c/span\u003e\u003cspan style=\"color:#8be9fd\"\u003e%\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"how-to-link-css-with-html\"\u003eHow to Link CSS with HTML\u003c/h2\u003e\n\u003cp\u003eAdd the line after tittle tag in your html file\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTips:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWe use \u003ccode\u003e.\u003c/code\u003e dot to target class in CSS\u003c/li\u003e\n\u003cli\u003eWe use \u003ccode\u003e#\u003c/code\u003e hash to target id in CSS\u003c/li\u003e\n\u003cli\u003eAlso if you want to target tag we can simply target like h3{}\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eDiv:\u003c/em\u003e box means div and also when e have more than one element and also when there is rectangle shape, very high change there is div ;).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"units-in-css\"\u003eUnits in CSS\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003epx :\u003c/strong\u003e It is use to define the measurement in pixels. \u003ccode\u003e1px = 1/96th of inch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e% :\u003c/strong\u003e It is used to define the measurement as a percentage that is relative to another value (maybe to their \u003ccode\u003eparent element\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evh :\u003c/strong\u003e It is relative to the height of the \u003ccode\u003eviewpoint(screen)\u003c/code\u003e. \u003ccode\u003e1vh = 1% or 1/100 of the height of the viewpoint\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evw :\u003c/strong\u003e It is relative to the width of the \u003ccode\u003eviewpoint(screen)\u003c/code\u003e. \u003ccode\u003e1vm or 1/100 of the width of the width of viewpoint\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eem :\u003c/strong\u003e Relative to the font-size of the element \u003ccode\u003e2em means 2 times the size of the current font\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003erem :\u003c/strong\u003e Relative to font-size of the root element like \u003ccode\u003ehtml tag\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evmin :\u003c/strong\u003e Relative to 1% of viewport\u0026rsquo;s* smaller dimension\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evmax :\u003c/strong\u003e Relative to 1% of viewport\u0026rsquo;s* larger dimension\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cem\u003eTip:\u003c/em\u003e There are mainly two type of fonts sans-serif and serif. The difference is the presence of decorative strokes, or serifs at the beginning and end of letters.\u003c/p\u003e","title":"CSS - Cascading Style Sheets"},{"content":"HTML(Hyper Text Markup Language) is the standard language use to create and structure content on the web.\nWhy learn html: because we need to create website for that we need html, or because of content.\nGetting with HTML Tip: type - html:5 / ! - for boilerplate code\nBoilerplate Code \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;!-- tells that we are using HTML5 --\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;!--The tag represents the root of an HTML document.--\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- head is a container for metadata (data about data)--\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;!--tag defines metadata about an HTML document--\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;!--defines the title of the document.--\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- defines the document\u0026#39;s body.--\u0026gt; \u0026lt;!-- content added here --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Tags in HTML \u0026lt;h1\u0026gt;\u0026lt;/h1\u0026gt; - heading tag and Most Importance \u0026lt;h2\u0026gt;\u0026lt;/h2\u0026gt; - less Importance than h1 \u0026lt;h3\u0026gt;\u0026lt;/h3\u0026gt; - less Importance than h2 \u0026lt;h4\u0026gt;\u0026lt;/h4\u0026gt; - less Importance than h3 \u0026lt;h5\u0026gt;\u0026lt;/h5\u0026gt; - less Importance than h4 \u0026lt;h6\u0026gt;\u0026lt;/h6\u0026gt; - less Importance than h5 \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; - paragraph tag used to add paragraph/text on website \u0026lt;b\u0026gt;\u0026lt;/b\u0026gt; - used to bold the text \u0026lt;i\u0026gt;\u0026lt;/i\u0026gt; - used to italic the text \u0026lt;sup\u0026gt;\u0026lt;/sup\u0026gt; - used for to add super script \u0026lt;sub\u0026gt;\u0026lt;/sub\u0026gt; - used to add sub script \u0026lt;br\u0026gt;\u0026lt;/br\u0026gt; - used to break line \u0026lt;hr\u0026gt; - used to add horizontal row \u0026lt;ol\u0026gt;\u0026lt;/ol\u0026gt; - used to add ordered list \u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt; - used to add unordered list \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; - used to add items in list \u0026lt;a href =\u0026quot;source\u0026quot;\u0026gt; \u0026lt;/a\u0026gt; - used to make text clickable/hyperlink Tip: to open link in new tab use this target=\u0026quot;_blank\u0026quot; \u0026lt;img src=\u0026quot;source\u0026quot; alt=\u0026quot; \u0026quot;\u0026gt; - used to add image to website \u0026lt;form\u0026gt;\u0026lt;/form\u0026gt; - used to create the form \u0026lt;label\u0026gt;\u0026lt;/label\u0026gt; - used to add label to input field \u0026lt;input id =\u0026quot;abc\u0026quot; type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot; \u0026gt; - used to add input field \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; div is rectangle in his nature with 0 height div is used to combine multiple elements together in html \u0026lt;table\u0026gt;\u0026lt;/table\u0026gt; - A table in HTML consists of table cells inside rows and columns. \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; - Each table cell is defined by a and a tag \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt; - table row starts with a and ends with a tag \u0026lt;th\u0026gt;\u0026lt;/th\u0026gt; - Defines a header cell in a table Input Types for Input tag text : \u0026lt;input type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot;\u0026gt; email : \u0026lt;input type=\u0026quot;email\u0026quot; placeholder=\u0026quot;Email\u0026quot;\u0026gt; password : \u0026lt;input type=\u0026quot;password\u0026quot; placeholder=\u0026quot;Password\u0026quot;\u0026gt; checkbox : \u0026lt;input type=\u0026quot;checkbox\u0026quot; \u0026gt; radio button : \u0026lt;input type=\u0026quot;radio\u0026quot; \u0026gt; Male file : \u0026lt;input type=\u0026quot;file\u0026quot; \u0026gt; range : \u0026lt;input type=\u0026quot;range\u0026quot; \u0026gt; color: \u0026lt;input type=\u0026quot;color\u0026quot; \u0026gt; date : \u0026lt;input type=\u0026quot;date\u0026quot; \u0026gt; submit : \u0026lt;input type=\u0026quot;submit\u0026quot; \u0026gt; id: id is attribute that is used to assign id to an element. It is very helpful when we have multiple of same type but we need to treat them differently. id must be unique of element.\nclass: As we know that we are not allowed to assign same id to different element but when we need this type of thing we use the class attribute.\nHTML5 Semantics HTML5 semantics refers to the use of specific tags like \u0026lt;header\u0026gt;,\u0026lt;footer\u0026gt;,\u0026lt;nav\u0026gt;,\u0026lt;article\u0026gt;,\u0026lt;section\u0026gt;,etc, to provide clearer structure and meaning to web content. This improves accessibility, better SEO, and facilitates better better understanding by both human and machines, These tags did not to something special they act like normal div but with clearer structure and meaning about there content.\nSemantics Elements \u0026lt;header\u0026gt; : First section website can be called header nav : Navigation bar. \u0026lt;main\u0026gt; : complete website in this tag. \u0026lt;section\u0026gt; : A page can split into sections like introduction, contact information, Details, etc and each of these sections can be in a different section tag. \u0026lt;article\u0026gt; : It contains independent content which does not require any other context, blog post, newspaper article etc. \u0026lt;aside\u0026gt; : It is used to place content in a sidebar i.e aside from the existing content. IT is related to surrounding context. \u0026lt;footer\u0026gt; : Footer located at the bottom of any article or document, they can contain contact details, copyright information etc. There can be multiple footers on a page. \u0026lt;audio\u0026gt; : use to add audio support \u0026lt;video\u0026gt; : use to add video support ","permalink":"http://localhost:1313/posts/html/","summary":"\u003cp\u003eHTML(Hyper Text Markup Language) is the standard language use to create and structure content on the web.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhy learn html:\u003c/strong\u003e because we need to create website for that we need html, or because of content.\u003c/p\u003e\n\u003ch2 id=\"getting-with-html\"\u003eGetting with HTML\u003c/h2\u003e\n\u003cp\u003eTip: type - \u003ccode\u003ehtml:5\u003c/code\u003e / \u003ccode\u003e!\u003c/code\u003e - for boilerplate code\u003c/p\u003e\n\u003ch5 id=\"boilerplate-code\"\u003eBoilerplate Code\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- tells that we are using HTML5 --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003ehtml\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003elang\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!--The tag represents the root of an HTML document.--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003ehead\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- head is a container for metadata (data about data)--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003echarset\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!--tag defines metadata about an HTML document--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003ename\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;viewport\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003econtent\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003etitle\u003c/span\u003e\u0026gt;Document\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003etitle\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!--defines the title of the document.--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003ehead\u003c/span\u003e\u0026gt; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003ebody\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- defines the document\u0026#39;s body.--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- content added here --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003ehtml\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"tags-in-html\"\u003eTags in HTML\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u0026lt;/h1\u0026gt;\u003c/code\u003e - heading tag and Most Importance\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u0026lt;/h2\u0026gt;\u003c/code\u003e - less Importance than h1\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h3\u0026gt;\u0026lt;/h3\u0026gt;\u003c/code\u003e - less Importance than h2\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h4\u0026gt;\u0026lt;/h4\u0026gt;\u003c/code\u003e - less Importance than h3\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h5\u0026gt;\u0026lt;/h5\u0026gt;\u003c/code\u003e - less Importance than h4\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h6\u0026gt;\u0026lt;/h6\u0026gt;\u003c/code\u003e - less Importance than h5\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;\u003c/code\u003e - paragraph tag used to add paragraph/text on website\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;b\u0026gt;\u0026lt;/b\u0026gt;\u003c/code\u003e - used to bold the text\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;i\u0026gt;\u0026lt;/i\u0026gt;\u003c/code\u003e - used to italic the text\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;sup\u0026gt;\u0026lt;/sup\u0026gt;\u003c/code\u003e - used for to add super script\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;sub\u0026gt;\u0026lt;/sub\u0026gt;\u003c/code\u003e - used to add sub script\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;br\u0026gt;\u0026lt;/br\u0026gt;\u003c/code\u003e - used to break line\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;hr\u0026gt;\u003c/code\u003e - used to add horizontal row\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u0026lt;/ol\u0026gt;\u003c/code\u003e - used to add ordered list\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt;\u003c/code\u003e - used to add unordered list\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;\u003c/code\u003e - used to add items in list\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;a href =\u0026quot;source\u0026quot;\u0026gt; \u0026lt;/a\u0026gt;\u003c/code\u003e - used to make text clickable/hyperlink\n\u003cul\u003e\n\u003cli\u003eTip: to open link in new tab use this \u003ccode\u003etarget=\u0026quot;_blank\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;img src=\u0026quot;source\u0026quot; alt=\u0026quot; \u0026quot;\u0026gt;\u003c/code\u003e - used to add image to website\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;form\u0026gt;\u0026lt;/form\u0026gt;\u003c/code\u003e - used to create the form\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;label\u0026gt;\u0026lt;/label\u0026gt;\u003c/code\u003e - used to add label to input field\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;input id =\u0026quot;abc\u0026quot; type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot; \u0026gt;\u003c/code\u003e - used to add input field\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u003c/code\u003e\n\u003col\u003e\n\u003cli\u003ediv is rectangle in his nature with 0 height\u003c/li\u003e\n\u003cli\u003ediv is used to combine multiple elements together in html\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u0026lt;/table\u0026gt;\u003c/code\u003e - A table in HTML consists of table cells inside rows and columns.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;td\u0026gt;\u0026lt;/td\u0026gt;\u003c/code\u003e - Each table cell is defined by a and a tag\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003c/code\u003e - table row starts with a and ends with a tag\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;th\u0026gt;\u0026lt;/th\u0026gt;\u003c/code\u003e - Defines a header cell in a table\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"input-types-for-input-tag\"\u003eInput Types for Input tag\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003etext :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot;\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eemail :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;email\u0026quot; placeholder=\u0026quot;Email\u0026quot;\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003epassword :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;password\u0026quot; placeholder=\u0026quot;Password\u0026quot;\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003echeckbox :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;checkbox\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eradio button :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;radio\u0026quot; \u0026gt; Male\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003efile :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;file\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003erange :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;range\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecolor:\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;color\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003edate :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;date\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003esubmit :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;submit\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"id\"\u003eid:\u003c/h5\u003e\n\u003cp\u003eid is attribute that is used to assign id to an element. It is very helpful when we have multiple of same type but we need to treat them differently. id must be unique of element.\u003c/p\u003e","title":"HTML - The Language of the Web"},{"content":"\nWeb development is a continuously evolving field, and becoming a proficient full-stack developer in 2025 requires not only mastering essential basics but also adopting advanced tools and concepts. This roadmap will guide you, step by step, through the skills and technologies you need to become job-ready and adaptable to industry trends.\nWeb Development [Basic] (3 Months) üìÑ Topics Covered: 1. HTML \u0026amp; CSS Build at least 100 static landing pages to master the fundamentals and different layouts. 2. Git and GitHub Learn the foundations of version control: Creating repositories Branching and merging workflows Collaborating on platforms like GitHub 3. Basic JavaScript Core Concepts: Variables Functions Control Flow (if/else, loops) Data Structures (objects, arrays) DOM APIs: Event handling DOM manipulation Using browser-native features 4. Build the Following Projects Digital Clock Build a digital clock with accurate timed updates.\nStopwatch and Timer App Create an app with stopwatch and countdown timer functionality.\nTodo App with Local Storage Save user data (tasks) using localStorage.\nWeather App Fetch live weather data using APIs based on the user‚Äôs location.\n**Monkey Typing Game Create a typing test with stats like speed (WPM) and accuracy.\nImage Slider Build an interactive slider component.\nBreak Time (15 Days): Quick Networking and Internet Basics Learn essential network and web communication concepts: **What is the Internet?, **How it works?** Understanding Protocols (HTTP, HTTPS, FTP, TCP/IP) **TCP vs UDP Protocol Basics of DNS and **DNS Records** (A, CNAME, MX, TXT) Client-Server Architecture Diving into topics like 3-way TCP Handshakes, IP Addresses (Private vs Public), and Subnet Masks Basic Backend Development (3 Months) üìÑ Topics Covered: Servers: Understand the function of a server. Differentiate between Web Servers, API Servers, and File Servers. Cloud Servers vs On-Premises Servers Introduce virtualization concepts.\nNode.js Learn how to build REST APIs with Node.js: Using frameworks like Express.js, Hono.js, or Intent.js\nConcepts like Headers, Body, and HTTP Methods Databases (DB): Integrate MongoDB with Mongoose (NoSQL Database). Learn SQL databases with PostgreSQL. Compare SQL vs NoSQL Databases. Introduce **ORM Frameworks** (Prisma, Drizzle, Knex). **Authentication and Authorization**: **JWT vs Sessions** Learn different identification and security methods.\n**Build Backend Projects**: Simple CRUD Applications (like task managers) E-Commerce API Weather API Wrapper Task Management API **Advanced Backend Concepts**: **Redis** and caching systems Queue systems (BullMQ, SQS) Rate limiting strategies for APIs Batch processing jobs for async tasks **Database Optimizations** and indexing **Soft Skills for Developers**: Build a presence on platforms like Twitter. Share what you\u0026rsquo;re learning and building to connect with others.\nShare feedback and ask for advanced learning topics. Build confidence while solving real-life problems. React.js (2 Months) React.js is one of the most popular front-end libraries for building web interfaces.\nüìÑ Topics Covered: **Why Use React?** Understand the advantages of component-based architecture. **React Fundamentals**: **Hooks** (useState, useEffect, useReducer) **Components** and JSX Component lifecycle Adding styling with **TailwindCSS** State management using **Redux** and **Zustand** **Routing with React Router**: Learn navigation in React-based apps **React Projects**: **Todo App with Local Storage** **Weather App** **Amazon-like Working Clone** (FE only) **YouTube Clone** (using Google APIs for video data) Full-Stack Applications (MERN or PERN) Begin combining front-end and back-end skills to create complex applications:\nReal-Time Collaboration Tools (like Google Docs) Multi-Vendor E-Commerce Platforms Social Media Automation Tools (similar to LinkedIn‚Äôs automation tools) Video Conferencing Applications (leveraging **WebRTC or SFU**) Live Streaming Studio (with RTMP) Advanced whiteboarding tools Connectors for workflow automation (Zapier-like APIs) Cloud Basics (AWS) (1.5 Months) Learn the fundamentals of hosting, deploying, and scaling applications on servers.\nüìÑ Topics Covered: **AWS Services**: **EC2**, Load Balancers, CloudFront, S3 Storage **Private and Public VPC** IAM Roles and Federated Management Depict networking setups using Internet Gateways. **Scripts and Automation**: Learn how to automate deployments with **CloudFormation Templates**. Become Unstoppable (Advanced Topics) Master niche tools and technologies to thrive in enterprise environments.\n1. **Distributed Systems** Learn **microservices architecture**: Communication strategies like REST, gRPC, Saga patterns. Understanding CAP Theorem and data sharding. 2. **API Design and Optimization** **GraphQL** and **gRPC** for fast and scalable APIs. API version control and rate-limiting (use Redis, HATEOAS). 3. **Caching Strategies** CDN integration and distributed caches using Redis. Optimize performance with **cache partitioning**. 4. **Authentication \u0026amp; Authorization** Secure APIs with **OAuth 2.0, JWT**, and session management. Implement **Role-Based Access Control (RBAC)**. 5. **Database Optimization** Schema optimization with indexing. Learn SQL Query Optimization. Explore distributed databases (like CockroachDB, Cassandra). 6. **Observability** Set up dashboards with **Prometheus and Grafana**. Implement **distributed tracing** for debugging. Final Thought on Becoming Full-Stack in 2025 This roadmap provides a clear and structured guide to becoming a proficient full-stack developer by 2025. It covers everything from the basics of HTML to advanced distributed systems, ensuring you\u0026rsquo;re equipped to handle real-world challenges with confidence.\nHappy coding! üöÄ\n","permalink":"http://localhost:1313/posts/web-dev-roadmap/","summary":"\u003cp\u003e\u003cimg alt=\"cover-image\" loading=\"lazy\" src=\"/posts/assets/web-dev-roadmap/web-dev-roadmap.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eWeb development is a continuously evolving field, and becoming a proficient full-stack developer in 2025 requires not only mastering essential basics but also adopting advanced tools and concepts. This roadmap will guide you, step by step, through the skills and technologies you need to become job-ready and adaptable to industry trends.\u003c/p\u003e\n\u003ch2 id=\"web-development-basic-3-months\"\u003eWeb Development [Basic] (3 Months)\u003c/h2\u003e\n\u003ch3 id=\"-topics-covered\"\u003eüìÑ Topics Covered:\u003c/h3\u003e\n\u003ch4 id=\"1-html--css\"\u003e1. HTML \u0026amp; CSS\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eBuild \u003cstrong\u003eat least 100 static landing pages\u003c/strong\u003e to master the fundamentals and different layouts.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"2-git-and-github\"\u003e2. Git and GitHub\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eLearn the foundations of version control:\u003c/li\u003e\n\u003cli\u003eCreating repositories\u003c/li\u003e\n\u003cli\u003eBranching and merging workflows\u003c/li\u003e\n\u003cli\u003eCollaborating on platforms like GitHub\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"3-basic-javascript\"\u003e3. Basic JavaScript\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCore Concepts:\u003c/li\u003e\n\u003cli\u003eVariables\u003c/li\u003e\n\u003cli\u003eFunctions\u003c/li\u003e\n\u003cli\u003eControl Flow (if/else, loops)\u003c/li\u003e\n\u003cli\u003eData Structures (objects, arrays)\u003c/li\u003e\n\u003cli\u003eDOM APIs:\u003c/li\u003e\n\u003cli\u003eEvent handling\u003c/li\u003e\n\u003cli\u003eDOM manipulation\u003c/li\u003e\n\u003cli\u003eUsing browser-native features\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"4-build-the-following-projects\"\u003e4. Build the Following Projects\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDigital Clock\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBuild a digital clock with accurate timed updates.\u003c/p\u003e","title":"Becoming a Full-Stack Web Developer in 2025"},{"content":"\nThere comes a time in life when everything around you seems stifling. Every breath becomes a fight; the air seems weighty and pushes against your chest. Until you feel as though you are drowning, the weight of unmet expectations, unresolved grief, and constant disappointment presses down on your soul. Running away is not really an option; you yearn for escape; mountain tops call with promises of seclusion, vast roads whisper freedom into your ears. You thus withdraw inside, running back to yourself as the last haven remaining.\nThe never-ending battle to articulate what you are going through wears you out. Exhaustion penetrates into your bones, therefore rendering the act of hoping or trusting an impossible task. Love seems far, as like it belongs in a world you are no longer able to reach. You paste on a brave front at first since that is what others expect. You convince everyone you are good while donning a mask of normalcy. Still, the lies get more difficult to maintain quickly. You start to shun people‚Äînot out of indifference but rather because you have nothing left to offer. Plans are called off, messages go unacknowledged, calls are dismissed. Loneliness starts to be your haven since it feels safer than you could want. Alone, you can breathe without thinking about others.\nYou haven\u0026rsquo;t ceased yearning connection. Somewhere deep within, a part of you still yearns for closeness‚Äîfor someone who knows. Still, the suffering has caused you caution. You want the flames of your rage and grief to scorish those you love, but you worry bringing your inner turmoil upon others. You thus build towering, impervious barriers to keep everyone out. Your narrative too weighty to discuss, hence it appears impossible to explain your emotions. You worry about being misinterpreted and about people judging you for the wounds you bear as much as for your behavior. Vulnerability seems like a trap, and in a society where rumors travel like wildfire the risk is too large.\nStill, the damage stays, chewing away at you. The weight of past mistakes and losses hangs on your soul like a shadow not going to erase. The toughest is nighttime. The silence sharpens everything‚Äîthe regrets, the \u0026ldquo;what-ifs,\u0026rdquo; the memories of what you had and lost. \u0026ldquo;If only,\u0026rdquo; you consider. If only you had chosen another course. Just you would have been sufficient. Your chest hurts constantly, a faint aching never going away. The tears have stopped even though the suffering seems too great to contain. Even alone, crying seems like a luxury you cannot afford right now.\nThough certain emotions never alter with time. Despite the years and the heartache, that love you carried for someone still persists, stubborn and immobile. You know, though, you cannot go back to what was. Your heart‚Äîfragile, wounded‚Äîno longer has the strength to fall another time; the trust you once freely offered feels irreversibly damaged.\nThough it is debilitating, pain does not define you. Indeed, it shapes you, but it does not define you totally. Healing is nonlinear, messy, and usually frustrating. Setbacks and times when the weight seems intolerable will abound. Even in those times, though, it\u0026rsquo;s crucial to forgive yourself‚Äîfor the times you felt weak or stumbled under pressure. Honor the love you bear, even if it is complex or mixed-fevers. Above all, hang on. Because the weight won\u0026rsquo;t last permanently regardless of how heavy it feels right now. Deepest scars can heal as well. The darkest darkness lift too, finally.\n","permalink":"http://localhost:1313/posts/forher/","summary":"\u003cp\u003e\u003cimg alt=\"cover-image\" loading=\"lazy\" src=\"/posts/assets/forher/forher.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eThere comes a time in life when everything around you seems stifling. Every breath becomes a fight; the air seems weighty and pushes against your chest. Until you feel as though you are drowning, the weight of unmet expectations, unresolved grief, and constant disappointment presses down on your soul. Running away is not really an option; you yearn for escape; mountain tops call with promises of seclusion, vast roads whisper freedom into your ears. You thus withdraw inside, running back to yourself as the last haven remaining.\u003c/p\u003e","title":"What It Means to Feel for Someone"},{"content":"This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can‚Äôt cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax.\nHeadings Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores. Strong emphasis, aka bold, with asterisks or underscores. Combined emphasis with asterisks and underscores. Strikethrough with two tildes. Bold and nested italic. All bold and italic. Bold and italic nested.\nLists Ordered: First ordered list item Another item Actual numbers don\u0026rsquo;t matter, just that it\u0026rsquo;s a number 1st. 2nd. 3rd. Unordered: This is a list item\nThis is a nested list item This is a nested list item This is another list item This is another list item\nWrite the press release\nUpdate the website\nContact the media\nLinks This is a link.\nThis link has a title attribute.\nTables Syntax Description Header Title Paragraph Text Blockquotes Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.\nYou can reference a footnote like this.\nAll generalizations are false, including this one. ‚Äî Mark Twain. 1\nCode Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print(s) #include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; void heapify(int *arr, int index, int n) { int largest = index; int left = 2 * index + 1; int right = 2 * index + 2; if (left \u0026lt; n \u0026amp;\u0026amp; arr[left] \u0026gt; arr[largest]) largest = left; if (right \u0026lt; n \u0026amp;\u0026amp; arr[right] \u0026gt; arr[largest]) largest = right; if (largest != index) { swap(arr[largest], arr[index]); heapify(arr, largest, n); } } void buildHeap(int *arr, int n) { for (int i = (n / 2) - 1; i \u0026gt;= 0; i--) { heapify(arr, i, n); } } void heapSort(int *arr, int n) { buildHeap(arr, n); for (int i = n - 1; i \u0026gt; 0; i--) { swap(arr[i], arr[0]); heapify(arr, 0, i); } } void print(int *arr, int size) { for (int i = 0; i \u0026lt; size; i++) cout \u0026lt;\u0026lt; arr[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; } int main() { int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; buildHeap(arr, 10); print(arr, 10); heapSort(arr, 10); print(arr, 10); return 0; } No language indicated, so no syntax highlighting. But let\u0026#39;s throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. You can remove line numbers, change the highlighting theme, and more. See Syntax Highlighting and Highlight.\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello, World!\\n\u0026#34;); return 0; } Math You can use LaTeX-style math with $ and $$ delimiters. For example, $x^2$ renders as $x^2$, and $$\\frac{x}{y}$$ renders as: $$\\frac{x}{y}$$\nWe can throw this scary-looking equation at you:\n$$ \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\ldots} } } } $$\nHorizontal Rules Three or more\u0026hellip; Hyphens ---, Asterisks ***, or Underscores ___.\nMiscellaneous Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:scroll-auto to only The world is flat. apply the scroll-auto utility on hover.\nterm definition another definition https://www.brainyquote.com/quotes/mark_twain_137872.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/posts/markdown/","summary":"\u003cp\u003eThis Markdown cheat sheet \u003cstrong\u003eprovides\u003c/strong\u003e a quick overview of all the Markdown syntax elements. It can‚Äôt cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic \u003cem\u003esyntax\u003c/em\u003e and extended syntax.\u003c/p\u003e\n\u003ch1 id=\"headings\"\u003eHeadings\u003c/h1\u003e\n\u003chr\u003e\n\u003ch1 id=\"heading-1\"\u003eHeading 1\u003c/h1\u003e\n\u003ch2 id=\"heading-2\"\u003eHeading 2\u003c/h2\u003e\n\u003ch3 id=\"heading-3\"\u003eHeading 3\u003c/h3\u003e\n\u003ch4 id=\"heading-4\"\u003eHeading 4\u003c/h4\u003e\n\u003ch5 id=\"heading-5\"\u003eHeading 5\u003c/h5\u003e\n\u003ch6 id=\"heading-6\"\u003eHeading 6\u003c/h6\u003e\n\u003ch1 id=\"emphasis\"\u003eEmphasis\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003eEmphasis, aka italics, with asterisks or underscores. \u003cstrong\u003eStrong emphasis\u003c/strong\u003e, aka bold, with asterisks or underscores. Combined emphasis with asterisks and underscores. \u003cdel\u003eStrikethrough\u003c/del\u003e with two tildes. \u003cstrong\u003e\u003cem\u003eBold and nested italic\u003c/em\u003e\u003c/strong\u003e. \u003cstrong\u003e\u003cem\u003eAll bold and italic\u003c/em\u003e\u003c/strong\u003e. \u003cstrong\u003e\u003cem\u003e\u003cem\u003eBold and italic nested\u003c/em\u003e\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e","title":"Markdown Cheat Sheet"},{"content":"This is English text.\n€å€Å ÿßÿ±ÿØŸà €Å€í€î\nAnother test: ⁄©€åÿß €å€Å ŸÅŸàŸÜŸπ ⁄©ÿßŸÖ ⁄©ÿ± ÿ±€Åÿß €Å€íÿü\n","permalink":"http://localhost:1313/posts/temp-article/","summary":"\u003cp\u003eThis is English text.\u003c/p\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003e€å€Å ÿßÿ±ÿØŸà €Å€í€î\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003cp\u003eAnother test: \u003c!-- raw HTML omitted --\u003e⁄©€åÿß €å€Å ŸÅŸàŸÜŸπ ⁄©ÿßŸÖ ⁄©ÿ± ÿ±€Åÿß €Å€íÿü\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e","title":"temp article"},{"content":"\nReact.js is a JavaScript library for building user interfaces. Developed by Facebook (now Meta) in 2013. It is component-based, declarative, and allows for efficient UI updates. Key Features of React Component-Based Architecture: UI is built using reusable components. Virtual DOM: Updates only the changed parts, making React fast. Unidirectional Data Flow: Props and state maintain a predictable data structure. JSX (JavaScript XML): A syntax extension that lets you write HTML inside JavaScript. Hooks: Allow functional components to have state and other features. Mutable vs Immutable Mutable (Changeable) Mutable data types can be changed after creation. Example: Objects \u0026amp; Arrays are mutable. let arr = [1, 2, 3]; arr.push(4); // Modifies the original array console.log(arr); // [1, 2, 3, 4] Immutable (Unchangeable) Immutable data cannot be changed directly. Instead, you create a new copy. Example: Strings \u0026amp; Numbers are immutable. let str = \u0026#34;Hello\u0026#34;; str[0] = \u0026#34;M\u0026#34;; // This won\u0026#39;t change the string console.log(str); // \u0026#34;Hello\u0026#34; Example of immutable object handling (creating a new object instead of modifying the original):\nconst person = { name: \u0026#34;Ahmad\u0026#34;, age: 19 }; const updatedPerson = { ...person, age: 20 }; console.log(updatedPerson); // { name: \u0026#34;Ahmad\u0026#34;, age: 20 } Arrays \u0026amp; Objects Destructuring Array Destructuring Extract values from an array and assign them to variables. const numbers = [10, 20, 30]; const [a, b, c] = numbers; console.log(a, b, c); // 10 20 30 Object Destructuring const person = { name: \u0026#34;Ahmad\u0026#34;, age: 19, city: \u0026#34;Multan\u0026#34; }; const { name, age } = person; console.log(name, age); // Ahmad 19 Import \u0026amp; Export in JavaScript Exporting in JavaScript Named Export (Multiple Exports) export const name = \u0026#34;Ahmad\u0026#34;; export const age = 19; export function greet() { return \u0026#34;Hello!\u0026#34;; } Default Export (Single Export per File) export default function greet() { return \u0026#34;Hello!\u0026#34;; } Importing in JavaScript Named Import import { name, age, greet } from \u0026#34;./module.js\u0026#34;; console.log(name, age); // Ahmad 19 console.log(greet()); // Hello! Default Import import greet from \u0026#34;./module.js\u0026#34;; console.log(greet()); // Hello! Import Everything import * as data from \u0026#34;./module.js\u0026#34;; console.log(data.name); // Ahmad console.log(data.greet()); // Hello! Concept Description Mutable Can be changed (Objects, Arrays). Immutable Cannot be changed (Strings, Numbers). Primitive Types Stored by value (string, number, boolean, etc.). Reference Types Stored by reference (object, array, function). Destructuring Extracts values from arrays/objects into variables. Import/Export Used to share JavaScript files/modules. Spread (...) Expands arrays/objects into individual values. Rest (...) Gathers multiple values into an array. Map \u0026amp; Filter in JavaScript for React map() Method map() is used to iterate over an array and return a new array with modified elements. It does not modify the original array. Syntax:\nconst newArray = array.map((element, index, array) =\u0026gt; { return modifiedElement; }); Example:\nconst numbers = [1, 2, 3, 4]; const doubled = numbers.map(num =\u0026gt; num * 2); console.log(doubled); // [2, 4, 6, 8] filter() Method filter() is used to filter elements based on a condition. It returns a new array with only the elements that satisfy the condition. The original array remains unchanged. Syntax:\nconst newArray = array.filter((element, index, array) =\u0026gt; { return condition; }); Example:\nconst numbers = [1, 2, 3, 4, 5, 6]; const evenNumbers = numbers.filter(num =\u0026gt; num % 2 === 0); console.log(evenNumbers); // [2, 4, 6] Method Purpose Returns map() Transforms each element in an array A new array with modified values filter() Selects elements that match a condition A new array with filtered values map() + filter() First filters elements, then transforms them A new modified and filtered array ‚úÖ Use map() to modify each element in an array.\n‚úÖ Use filter() to remove unwanted elements from an array.\n‚úÖ Always use a key prop in React when rendering lists.\nDifference Between Library \u0026amp; Framework Feature Library Framework Definition A collection of reusable code that helps developers perform specific tasks. A full-fledged structure that dictates how the code should be organized. Control You control when and how to use the library. The framework controls the flow of execution. Flexibility More flexible, can be used with other tools. Less flexible, enforces a specific architecture. Example React.js (UI library), Lodash, jQuery Angular, Django, Ruby on Rails Key Difference React (Library): You decide how to structure the app. Angular (Framework): It dictates the structure. Real DOM vs Virtual DOM What is the DOM (Document Object Model)? The DOM represents the structure of an HTML document as a tree. JavaScript can manipulate the DOM to update elements dynamically. What is Real DOM? The actual structure of an HTML document in the browser. When a change is made, the entire page re-renders. Slow performance for frequent updates. What is Virtual DOM? A lightweight copy of the Real DOM. React updates the Virtual DOM first, then compares it with the previous version using diffing. Only the changed parts of the Real DOM get updated, making React much faster. Difference Between Real DOM \u0026amp; Virtual DOM Feature Real DOM Virtual DOM Definition Actual representation of the webpage. Lightweight copy of the Real DOM. Updates Directly updates the UI. Updates in memory first, then syncs with the Real DOM. Performance Slower (entire page re-renders). Faster (only updates changed parts). Efficiency Expensive updates, slow rendering. Optimized updates, fast rendering. Used in Vanilla JavaScript, jQuery. React, Vue.js. Why Virtual DOM is Important in React? ‚úÖ Faster updates compared to Real DOM.\n‚úÖ Better performance for dynamic content.\n‚úÖ Efficient UI rendering with minimal reflows.\nVite vs Create React App (CRA) in React.js 1. Vite üöÄ Modern, fast, and optimized build tool for React. Uses ES modules (ESM) and Hot Module Replacement (HMR) for instant updates. Super fast startup (no bundling in development). Supports TypeScript, JSX, and more out-of-the-box. Tree-shaking \u0026amp; optimized builds for production. Install React with Vite\nnpm create vite@latest npm install npm run dev 2. Create React App (CRA) üèóÔ∏è Traditional way to set up React projects. Uses Webpack (slower than Vite). Slower builds and HMR compared to Vite. Good for beginners, but outdated for large apps. Install React with CRA\nnpx create-react-app my-app cd my-app npm start JSX (JavaScript XML) \u0026amp; React Vite Folder Structure 1. JSX (JavaScript XML) JSX is a syntax extension for JavaScript used in React. Looks like HTML inside JavaScript but gets converted to JavaScript functions or React.createElement. Allows embedding JavaScript inside {}. Must return a single parent element (use \u0026lt;\u0026gt;...\u0026lt;/\u0026gt; if needed). const App = () =\u0026gt; { const name = \u0026#34;Ahmad\u0026#34;; return \u0026lt;h1\u0026gt;Hello, {name}!\u0026lt;/h1\u0026gt;; }; export default App; 2. React Vite Folder Structure . ‚îú‚îÄ‚îÄ eslint.config.js # ESLint configuration (optional) ‚îú‚îÄ‚îÄ index.html # Main HTML file (root of the app) ‚îú‚îÄ‚îÄ node_modules/ # Installed dependencies ‚îú‚îÄ‚îÄ package.json # Project metadata \u0026amp; dependencies ‚îú‚îÄ‚îÄ package-lock.json # Exact versions of installed packages ‚îú‚îÄ‚îÄ public/ # Static assets (images, fonts, etc.) ‚îú‚îÄ‚îÄ README.md # Project documentation ‚îú‚îÄ‚îÄ src/ # Main source code directory ‚îÇ ‚îú‚îÄ‚îÄ App.jsx # Main React component ‚îÇ ‚îú‚îÄ‚îÄ main.jsx # React entry file (renders App) ‚îÇ ‚îú‚îÄ‚îÄ assets/ # Images, styles, etc. ‚îÇ ‚îú‚îÄ‚îÄ components/ # Reusable UI components ‚îÇ ‚îú‚îÄ‚îÄ pages/ # Page components (if using routing) ‚îÇ ‚îî‚îÄ‚îÄ styles/ # Global CSS files (if needed) ‚îî‚îÄ‚îÄ vite.config.js # Vite configuration file Key Points ‚úÖ src/ contains all React components \u0026amp; logic.\n‚úÖ index.html is the main HTML template.\n‚úÖ Vite uses main.jsx to mount the React app into #root.\n‚úÖ Public files are served as-is from /public/.\nReact Components \u0026amp; How They Work 1. Component in React A component is a reusable, independent UI piece in React. Two types: Functional Components (recommended, use hooks). Class Components (older, uses this.state). Components return JSX and manage their own logic \u0026amp; state. const MyComponent = () =\u0026gt; { return \u0026lt;h1\u0026gt;Hello, React!\u0026lt;/h1\u0026gt;; }; export default MyComponent; 2. How They Work ‚úÖ We create components inside the src/components/ folder (e.g., MyComponent.jsx).\n‚úÖ Components are imported into App.jsx, which acts as the main component.\n‚úÖ main.jsx is responsible for rendering App.jsx inside the root \u0026lt;div\u0026gt; in index.html.\n‚úÖ ReactDOM.createRoot(document.getElementById('root')) creates the Virtual DOM and syncs\nFlow of Code in React Create a component (MyComponent.jsx): const MyComponent = () =\u0026gt; \u0026lt;h1\u0026gt;Hello, React!\u0026lt;/h1\u0026gt;; export default MyComponent; import it inside App.jsx: import MyComponent from \u0026#34;./components/MyComponent\u0026#34;; const App = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;MyComponent /\u0026gt; \u0026lt;/div\u0026gt; ); }; export default App; Render App.jsx inside main.jsx: import React from \u0026#34;react\u0026#34;; import ReactDOM from \u0026#34;react-dom/client\u0026#34;; import App from \u0026#34;./App\u0026#34;; ReactDOM.createRoot(document.getElementById(\u0026#34;root\u0026#34;)).render(\u0026lt;App /\u0026gt;); index.html contains root div: \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;root\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; Key Points ‚úÖ Components are modular \u0026amp; reusable in React.\n‚úÖ main.jsx renders App.jsx inside the root div.\n‚úÖ React Virtual DOM updates only changed parts for better performance. üöÄ\nConditional Rendering in React Conditional rendering in React allows components to render dynamically based on conditions.\nUsing if-else Statements\nfunction Greeting(props) { if (props.isLoggedIn) { return \u0026lt;h1\u0026gt;Welcome Back!\u0026lt;/h1\u0026gt;; } else { return \u0026lt;h1\u0026gt;Please Sign In\u0026lt;/h1\u0026gt;; } } Using Ternary Operator (? :)\nfunction Greeting({ isLoggedIn }) { return \u0026lt;h1\u0026gt;{isLoggedIn ? \u0026#34;Welcome Back!\u0026#34; : \u0026#34;Please Sign In\u0026#34;}\u0026lt;/h1\u0026gt;; } Event Handling in React React follows the Synthetic Event system, making event handling efficient across different browsers.\nHandling Click Events\nfunction Button() { function handleClick() { alert(\u0026#34;Button Clicked!\u0026#34;); } return \u0026lt;button onClick={handleClick}\u0026gt;Click Me\u0026lt;/button\u0026gt;; } Passing Arguments in Event Handlers\nfunction Greeting({ name }) { function sayHello(name) { alert(`Hello, ${name}!`); } return \u0026lt;button onClick={() =\u0026gt; sayHello(name)}\u0026gt;Greet\u0026lt;/button\u0026gt;; } Handling Keyboard Events\nfunction InputBox() { function handleKeyPress(event) { if (event.key === \u0026#34;Enter\u0026#34;) { alert(\u0026#34;Enter key pressed!\u0026#34;); } } return \u0026lt;input type=\u0026#34;text\u0026#34; onKeyPress={handleKeyPress} /\u0026gt;; } ‚úÖ Conditional Rendering: Use if-else, ternary (? :), \u0026amp;\u0026amp;, or switch-case for rendering components based on conditions.\n‚úÖ Event Handling: Use event handlers like onClick, onKeyPress, onSubmit, etc., with functions.\n‚úÖ Pass Parameters: Use arrow functions for passing arguments in event handlers.\n‚úÖ Prevent Default Behavior: Use event.preventDefault() to stop default browser actions like form submissions.\nState in React State is an object that holds dynamic data that affects a component‚Äôs rendering. Unlike props, state is mutable and can be changed within a component. When state changes, React re-renders the component to reflect the updates. Types of State in React Local State: Managed within a single component using useState(). Example: Form inputs, modals, toggles. Global State: Shared across multiple components. Managed using Context API, Redux, or other state management libraries. Server State: Data fetched from an API that needs to be integrated into UI. Managed using tools like React Query, SWR, or Redux Thunk. URL State: State stored in the URL (query parameters, path, etc.). Managed using React Router. Understanding useState() Hook useState() is a React Hook that allows functional components to manage state. It returns an array with two values: The current state value. A function to update the state. Syntax:\nconst [state, setState] = useState(initialValue); Example: Counter App\nimport { useState } from \u0026#34;react\u0026#34;; function Counter() { const [count, setCount] = useState(0); // Initial state is 0 return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Count: {count}\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt;Increment\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } export default Counter; useState(0): Initializes count to 0. setCount(count + 1): Updates the state, causing a re-render. Updating State Correctly 1. Using Functional Updates (Best Practice)\nWhen the new state depends on the previous state, use a function inside setState(). setCount((prevCount) =\u0026gt; prevCount + 1); This ensures correct updates, especially in async operations. 2. Updating Objects in State\nUse spread operator (...) to avoid modifying the original state. const [user, setUser] = useState({ name: \u0026#34;Ahmad\u0026#34;, age: 19 }); setUser(prevUser =\u0026gt; ({ ...prevUser, age: prevUser.age + 1 })); 3. Updating Arrays in State\nUse spread operator (...) to update arrays. const [items, setItems] = useState([1, 2, 3]); setItems(prevItems =\u0026gt; [...prevItems, 4]); // Adds new item ‚úÖ State is a way to store data inside a component.\n‚úÖ useState() is used to manage local state in functional components.\n‚úÖ Always use the updater function when updating state based on previous values.\n‚úÖ Never modify state directly, always use setState().\nProps (Properties) in React What are Props? Props stand for Properties. Props are read-only data passed from a parent component to a child component. They allow components to be dynamic and reusable by passing different data to them. Think of props as function arguments for components. How Props Work Parent component passes props to a child component. Child component receives them as a parameter (usually an object). The child accesses props using props.propName. Syntax 1. Passing Props \u0026lt;ChildComponent name=\u0026#34;Ahmad\u0026#34; age={19} /\u0026gt; 2. Receiving Props function ChildComponent(props) { return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Name: {props.name}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Age: {props.age}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } ‚úÖ OR Using Destructuring function ChildComponent({ name, age }) { return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Name: {name}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Age: {age}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } üß© Key Points Props are immutable: You cannot change props inside the child component. Unidirectional flow: Data flows from parent to child (one-way data binding). Can be any data type: String, number, boolean, array, object, function, etc. Used to customize components and make them reusable. CSS Modules A CSS Module is a CSS file in which all class and animation names are scoped locally by default. This means that styles defined in one component won‚Äôt affect other components, preventing style conflicts. Used in React.js to maintain modular, reusable, and conflict-free CSS How It Works A CSS file is treated as a module when named with the .module.css extension. Example: MyComponent.module.css In React, you import it as an object where each CSS class becomes a property of that object. üìÑ Example File: Button.module.css\n.button { background-color: blue; color: white; } Example Usage in Component import styles from \u0026#39;./Button.module.css\u0026#39;; function Button() { return \u0026lt;button className={styles.button}\u0026gt;Click me\u0026lt;/button\u0026gt;; } Behind the Scenes CSS Modules use a build tool like Webpack to automatically transform class names into unique identifiers. Example: .button in the source might become .Button_button__3hWkj in the final DOM. The mapping ensures local scoping and uniqueness across components. Comparison with Other Styling Methods Method Scoped Reusable Global Impact Setup Required CSS Modules ‚úÖ ‚úÖ ‚ùå Minimal Inline Styles ‚úÖ ‚ùå ‚ùå None Global CSS ‚ùå ‚úÖ ‚úÖ None CSS-in-JS (e.g. styled-components) ‚úÖ ‚úÖ ‚ùå More setup Form Handling in React.js Form handling refers to how input data is captured from HTML forms (like \u0026lt;input\u0026gt;, \u0026lt;textarea\u0026gt;, \u0026lt;select\u0026gt;) and managed using state or references in React.\nKey Concepts: React forms are usually managed through state (controlled) or refs (uncontrolled). You handle form submissions via an onSubmit event handler. You use onChange to capture input updates. Uncontrolled Components \u0026amp; useRef() An uncontrolled component lets the DOM manage the input value, and React accesses it using a ref.\nUsed to directly access a DOM element Doesn‚Äôt re-render the component on value change const inputRef = useRef(); const handleSubmit = () =\u0026gt; { console.log(inputRef.current.value); }; \u0026lt;input type=\u0026#34;text\u0026#34; ref={inputRef} /\u0026gt; Controlled Components A controlled component is an input element whose value is controlled by React state.\nconst [name, setName] = useState(\u0026#34;\u0026#34;); \u0026lt;input type=\u0026#34;text\u0026#34; value={name} onChange={(e) =\u0026gt; setName(e.target.value)} /\u0026gt; Full Example:\nimport React, { useState } from \u0026#34;react\u0026#34;; function Form() { const [val, setVal] = useState({ name: \u0026#34;\u0026#34;, email: \u0026#34;\u0026#34; }); const handleSubmit = (event) =\u0026gt; { event.preventDefault(); console.log(val); }; return ( \u0026lt;\u0026gt; \u0026lt;form action=\u0026#34;\u0026#34; onSubmit={handleSubmit}\u0026gt; \u0026lt;input onChange={(event) =\u0026gt; setVal({ ...val, name: event.target.value })} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; placeholder=\u0026#34;Email\u0026#34; onChange={(event) =\u0026gt; setVal({ ...val, email: event.target.value })} /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/\u0026gt; ); } export default Form; React Hook Form (Library) React Hook Form is a popular library for building performant and flexible forms in React.\nWhy Use It? Reduces boilerplate code Built-in validation Integrates well with UI libraries like Material UI, Chakra UI, etc. Basic Example:\nimport { useForm } from \u0026#34;react-hook-form\u0026#34;; const { register, handleSubmit } = useForm(); const onSubmit = (data) =\u0026gt; console.log(data); \u0026lt;form onSubmit={handleSubmit(onSubmit)}\u0026gt; \u0026lt;input {...register(\u0026#34;username\u0026#34;)} /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; Full Example\nimport React from \u0026#34;react\u0026#34;; import { useForm } from \u0026#34;react-hook-form\u0026#34;; function Form() { const { register, handleSubmit } = useForm(); return ( \u0026lt;\u0026gt; \u0026lt;form action=\u0026#34;\u0026#34; onSubmit={handleSubmit((data) =\u0026gt; console.log(data))}\u0026gt; \u0026lt;input {...register(\u0026#34;name\u0026#34;)} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;input {...register(\u0026#34;age\u0026#34;)} type=\u0026#34;age\u0026#34; placeholder=\u0026#34;age\u0026#34; /\u0026gt; \u0026lt;input {...register(\u0026#34;email\u0026#34;)} type=\u0026#34;email\u0026#34; placeholder=\u0026#34;email\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/\u0026gt; ); } export default Form; Dynamic Routing in React.js Dynamic Routing means that the routing is handled at runtime (not at compile time like in traditional HTML websites).\nIn React.js, dynamic routing is implemented using React Router, a library that enables navigation among views of various components.\nUnlike traditional routing where routes are hardcoded in a file (like routes.php), React dynamically loads components based on the current URL.\nInstallation of react-router-dom\nnpm install react-router-dom Core Components of React Router BrowserRouter ‚Äì Wraps the app and enables routing. Routes ‚Äì A container for all the Route components. Route ‚Äì Defines the path and component to render. Link / NavLink ‚Äì Used for navigation without reloading the page. useParams ‚Äì Hook to access URL parameters (useful for dynamic routes). Basic Routing Setup import { BrowserRouter, Routes, Route } from \u0026#34;react-router-dom\u0026#34;; import Home from \u0026#39;./Home\u0026#39;; import About from \u0026#39;./About\u0026#39;; function App() { return ( \u0026lt;BrowserRouter\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/\u0026#34; element={\u0026lt;Home /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/about\u0026#34; element={\u0026lt;About /\u0026gt;} /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/BrowserRouter\u0026gt; ); } What is Dynamic Routing? Dynamic routing allows us to create routes where parts of the URL are variables, e.g., /user/1, /user/2, etc.\n\u0026lt;Route path=\u0026#34;/user/:id\u0026#34; element={\u0026lt;UserProfile /\u0026gt;} /\u0026gt; In this case, :id is a route parameter.\nAccessing Dynamic Parameters: useParams useParams() is a React Router hook used to access dynamic parameters from the current URL. It is most useful with dynamic routes like /user/:id, /post/:slug, etc. import { useParams } from \u0026#34;react-router-dom\u0026#34;; function UserProfile() { const { id } = useParams(); return \u0026lt;h1\u0026gt;User ID: {id}\u0026lt;/h1\u0026gt;; } useNavigate() in React Router useNavigate() is a hook provided by react-router-dom. It is used to programmatically navigate to different routes (without clicking a \u0026lt;Link\u0026gt; or \u0026lt;NavLink\u0026gt;). It replaces the older useHistory() from React Router v5. const navigate = useNavigate(); function handleClick() { navigate(\u0026#34;/about\u0026#34;); } üîÅ Navigate with Parameters navigate(`/user/${userId}`); ‚èÆÔ∏è Navigate Back or Forward navigate(-1); // Go back navigate(1); // Go forward Feature Description navigate(\u0026quot;/path\u0026quot;) Navigate to a route navigate(-1) Go back navigate(1) Go forward { replace: true } Replace history entry { state: {...} } Pass data with navigation NavLink in React Router NavLink is a special version of the \u0026lt;Link\u0026gt; component in react-router-dom that adds styling attributes to the rendered element when it matches the current URL.\nIt‚Äôs perfect when you want to highlight the active page in a navigation menu (e.g., changing the color or adding underline).\n\u0026lt;NavLink to=\u0026#34;/home\u0026#34;\u0026gt;Home\u0026lt;/NavLink\u0026gt; \u0026lt;NavLink to=\u0026#34;/about\u0026#34;\u0026gt;About\u0026lt;/NavLink\u0026gt; Active Styling with NavLink By default, NavLink applies an active class when the route matches.\nYou can also provide your own styles or class names based on the active state using:\n‚úÖ className as a Function\n\u0026lt;NavLink to=\u0026#34;/home\u0026#34; className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;inactive-link\u0026#34;} \u0026gt; Home \u0026lt;/NavLink\u0026gt; ‚úÖ style as a Function\n\u0026lt;NavLink to=\u0026#34;/about\u0026#34; style={({ isActive }) =\u0026gt; ({ color: isActive ? \u0026#34;green\u0026#34; : \u0026#34;gray\u0026#34;, textDecoration: isActive ? \u0026#34;underline\u0026#34; : \u0026#34;none\u0026#34; })} \u0026gt; About \u0026lt;/NavLink\u0026gt; Example with Full NavBar import { NavLink } from \u0026#34;react-router-dom\u0026#34;; import \u0026#34;./styles.css\u0026#34;; // Assume you have .active-link class here function Navbar() { return ( \u0026lt;nav\u0026gt; \u0026lt;NavLink to=\u0026#34;/\u0026#34; end className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;\u0026#34;}\u0026gt; Home \u0026lt;/NavLink\u0026gt; \u0026lt;NavLink to=\u0026#34;/about\u0026#34; className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;\u0026#34;}\u0026gt; About \u0026lt;/NavLink\u0026gt; \u0026lt;NavLink to=\u0026#34;/contact\u0026#34; className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;\u0026#34;}\u0026gt; Contact \u0026lt;/NavLink\u0026gt; \u0026lt;/nav\u0026gt; ); } Summary of NavLink Prop/Feature Description to=\u0026quot;/path\u0026quot; Target route className Function that gives conditional class style Function that returns conditional style end Ensures exact matching isActive Boolean indicating current URL match \u0026lt;Outlet /\u0026gt; in React Router \u0026lt;Outlet /\u0026gt; is a placeholder component used to render child routes inside a parent route. It\u0026rsquo;s like saying: ‚ÄúHere is where the nested component will appear.‚Äù ‚úÖ How It Works Visiting /dashboard/profile will render: Dashboard component Profile component inside the \u0026lt;Outlet /\u0026gt; Visiting /dashboard/settings will render: Dashboard component Settings component inside the \u0026lt;Outlet /\u0026gt; import { Outlet } from \u0026#34;react-router-dom\u0026#34;; function Dashboard() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Dashboard Layout\u0026lt;/h1\u0026gt; {/* Nested route component will be rendered here */} \u0026lt;Outlet /\u0026gt; \u0026lt;/div\u0026gt; ); } API Integration in React.js using AJAX (fetch / axios) API integration in React lets your app communicate with backends, external services, or databases. AJAX (Asynchronous JavaScript and XML) is used to make asynchronous requests to APIs.\n1. Using fetch useEffect(() =\u0026gt; { fetch(\u0026#39;https://api.example.com/data\u0026#39;) .then(res =\u0026gt; res.json()) .then(data =\u0026gt; setData(data)) .catch(err =\u0026gt; console.error(err)); }, []); fetch() returns a Promise. Must manually handle JSON parsing (res.json()). 2. Using axios npm install axios // install this package to use axios import axios from \u0026#34;axios\u0026#34;; import React from \u0026#34;react\u0026#34;; const App = () =\u0026gt; { const api = \u0026#34;https://fakestoreapi.com/products\u0026#34;; // üì• Function to GET products from the API const getProducts = () =\u0026gt; { axios .get(api) .then((res) =\u0026gt; console.log(\u0026#34;GET:\u0026#34;, res)) .catch((err) =\u0026gt; console.error(\u0026#34;GET Error:\u0026#34;, err)); }; // üì§ Function to POST (add) a new product to the API const addProducts = () =\u0026gt; { axios .post(api, { id: 0, title: \u0026#34;Sample Product\u0026#34;, price: 0.1, description: \u0026#34;This is a test product.\u0026#34;, category: \u0026#34;sample-category\u0026#34;, image: \u0026#34;http://example.com/image.jpg\u0026#34;, }) .then((res) =\u0026gt; console.log(\u0026#34;POST:\u0026#34;, res)) .catch((err) =\u0026gt; console.error(\u0026#34;POST Error:\u0026#34;, err)); }; return ( \u0026lt;div className=\u0026#34;p-5\u0026#34;\u0026gt; {/* üü¢ Button to trigger GET request */} \u0026lt;button onClick={getProducts} className=\u0026#34;px-3 py-2 m-2 bg-blue-500 rounded-lg text-white\u0026#34; \u0026gt; Get Data \u0026lt;/button\u0026gt; {/* üîµ Button to trigger POST request */} \u0026lt;button onClick={addProducts} className=\u0026#34;px-3 py-2 m-2 bg-green-600 rounded-lg text-white\u0026#34; \u0026gt; Send Data \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); }; export default App; Example (with async/await) useEffect(() =\u0026gt; { const fetchData = async () =\u0026gt; { try { const response = await axios.get(\u0026#39;https://api.example.com/data\u0026#39;); setData(response.data); } catch (err) { console.error(err); } finally { setLoading(false); } }; fetchData(); }, []); React Component Lifecycle The component lifecycle refers to the sequence of methods/functions that are invoked during the life of a React component ‚Äî from its creation to its removal from the DOM.\nüß± 3 Main Phases: 1. Mounting Component is being created and inserted into the DOM.\nconstructor() ‚Üí (Class component only) render() componentDidMount() ‚úÖ (ideal for API calls, subscriptions) 2. Updating When props or state change.\nshouldComponentUpdate() ‚Üí (optional) render() componentDidUpdate() ‚úÖ (runs after update) 3. Unmounting Component is removed from the DOM.\ncomponentWillUnmount() ‚úÖ (cleanup tasks: timers, subscriptions, etc.) Functional Components use useEffect for all of this! A React Hook for handling side effects (e.g. API calls, DOM updates, subscriptions). Runs after the component renders. Basic Syntax useEffect(() =\u0026gt; { // effect logic return () =\u0026gt; { // optional cleanup }; }, [dependencies]); Dependency Array []: runs once after initial render (like componentDidMount) [var]: runs when var changes No array: runs after every render Note: When we [] square bracket in useEffect() component only update the changed part and if we don\u0026rsquo;t add square bracket component re-render means first it deleted and then again created.\nüí° Common Uses API calls Event listeners Timers Cleanups (return function) Full Example useEffect(() =\u0026gt; { console.log(\u0026#34;About Component is Created\u0026#34;); return () =\u0026gt; { console.log(\u0026#34;About Comonent is Deleted\u0026#34;); }; Example: Cleanup (like componentWillUnmount) useEffect(() =\u0026gt; { const timer = setInterval(() =\u0026gt; { console.log(\u0026#34;Running interval...\u0026#34;); }, 1000); return () =\u0026gt; { clearInterval(timer); // üßπ cleanup console.log(\u0026#34;Interval cleared\u0026#34;); }; }, []); What is React Reconciliation React Reconciliation is the process React uses to update the DOM efficiently when the state or props of a component change.\nThis makes updates fast and efficient, instead of redrawing the whole UI.\nNote: üîç Think of reconciliation as React saying: \u0026ldquo;Okay, what exactly changed? Let me only update that part.\u0026rdquo;\nTerm What it Means Triggered By Happens In Updating When React detects a change in props or state. setState, parent re-render, context change, etc. Component lifecycle Re-rendering When the component‚Äôs render method runs again (or JSX is re-evaluated in function components). After an update (or forced render) Virtual DOM const [val, setVal] = useState(\u0026#34;This is Normal Data\u0026#34;); const [val2, setVal2] = useState(\u0026#34;This is Very Large Data\u0026#34;); useEffect(() =\u0026gt; { console.log(\u0026#34;About Component is Created\u0026#34;); return () =\u0026gt; { console.log(\u0026#34;About Comonent is Deleted\u0026#34;); }; }, [val2]); // component only re-render when val2 is changed otherwise it update only changed part. Axios for Session Management \u0026amp; Separation 1. Why Use a Separate Axios File? Centralizes config (base URL, headers, interceptors) Cleaner code, reusable instance Easy to maintain sessions (cookies, tokens) Can add error handlers globally 2. Basic Axios Setup (Separate File) üóÇÔ∏è File: axiosInstance.js\nimport axios from \u0026#34;axios\u0026#34;; // Create an Axios instance const instance = axios.create({ baseURL: \u0026#34;https://fakestoreapi.com/\u0026#34;, // üè† Your backend URL withCredentials: true, // ‚úÖ Important for session cookies }); export default instance; 3. What withCredentials: true Does Allows Axios to send cookies and authentication headers Required when working with sessions (esp. JWT or Express sessions) Must also be enabled on backend (CORS settings) 4. Using It in Components import axios from \u0026#34;../axiosInstance\u0026#34;; const getProducts = async () =\u0026gt; { try { const res = await axios.get(\u0026#34;/products\u0026#34;); console.log(res.data); } catch (err) { console.error(err); } }; Concept Purpose withCredentials Send cookies for session management axios.create() Reusable config for base URL, etc. interceptors Add headers (like auth) automatically instance.get() Use anywhere like normal Axios ReactJS Context API A way to share data between components without passing props manually at every level. Solves prop drilling (passing data from parent to child repeatedly). When to Use Context API? When you need to share state across many components (e.g., theme, user authentication, language, etc.) Good for global state management in small to medium-sized apps. Key Components of Context API React.createContext() Creates a context object. const MyContext = React.createContext(); \u0026lt;Context.Provider\u0026gt; Wraps components to provide the context value. \u0026lt;MyContext.Provider value={someData}\u0026gt; \u0026lt;ChildComponent /\u0026gt; \u0026lt;/MyContext.Provider\u0026gt; useContext(Context) A hook to access the context value in a functional component. const value = useContext(MyContext); Example: Basic Usage // 1. Create Context const ThemeContext = React.createContext(); // 2. Create a Provider Component const ThemeProvider = ({ children }) =\u0026gt; { const [theme, setTheme] = React.useState(\u0026#34;light\u0026#34;); return ( \u0026lt;ThemeContext.Provider value={{ theme, setTheme }}\u0026gt; {children} \u0026lt;/ThemeContext.Provider\u0026gt; ); }; // 3. Use Context in a Child Component const ThemeToggler = () =\u0026gt; { const { theme, setTheme } = React.useContext(ThemeContext); return ( \u0026lt;button onClick={() =\u0026gt; setTheme(theme === \u0026#34;light\u0026#34; ? \u0026#34;dark\u0026#34; : \u0026#34;light\u0026#34;)}\u0026gt; Switch to {theme === \u0026#34;light\u0026#34; ? \u0026#34;dark\u0026#34; : \u0026#34;light\u0026#34;} mode \u0026lt;/button\u0026gt; ); }; // 4. Wrap in App const App = () =\u0026gt; ( \u0026lt;ThemeProvider\u0026gt; \u0026lt;ThemeToggler /\u0026gt; \u0026lt;/ThemeProvider\u0026gt; ); Redux Toolkit (RTK) What is Redux Redux is a state management library used with JavaScript apps (especially React) to manage and share application-wide state in a predictable way.\nWhat is React-Redux? React-Redux is the official binding library that allows React components to interact with the Redux store using hooks like:\nuseSelector() ‚Äì read state useDispatch() ‚Äì send actions It acts as a bridge between Redux and React.\nWhy Redux Toolkit is Useful ‚úÖ Reduces boilerplate code (less code, same result) ‚úÖ Built-in support for async actions using createAsyncThunk ‚úÖ Uses Immer.js internally so you can write mutable-style logic safely ‚úÖ Easy and clean setup via configureStore and createSlice ‚úÖ Encourages best practices by default Core Concepts Concept Description Store Holds the global state Slice A piece of the store: includes state + reducers Action An object describing a change Reducer A function that updates state based on action Dispatch A way to send actions to the store Selector Reads state from the store Redux Toolkit vs Context API Feature Redux Toolkit Context API üß† Purpose Complex state management Simple state sharing üîÅ Re-renders Optimized with useSelector() Causes re-renders of all consumers üîå DevTools Built-in support for Redux DevTools ‚ùå No DevTools üßµ Async Logic Built-in with createAsyncThunk Needs custom setup üì¶ Scalability Highly scalable (slices, modular code) Not ideal for large apps üîß Boilerplate Minimal with RTK Less than raw Redux, but Context still has limitations üîí Predictability More structured and strict More flexible but can lead to mess Use Context API: For theme, language, auth user ‚Äì simple state Use Redux Toolkit: For complex state logic, shared global data, multiple components, async logic Redux Flow Diagram: üì¶ Store ‚Äì Global State Container The store is where all the application state lives. It combines different reducers (e.g., user, products, carts) into one centralized global state. The store is created using configureStore() in Redux Toolkit. üß© Reducers ‚Äì Handle State Changes Reducers are functions that decide how the state should change in response to actions. Each reducer manages its own slice of state (e.g., user state, products state, carts state). Redux Toolkit allows you to define reducers inside createSlice(). üéØ Action ‚Äì Event Trigger An action is a plain JavaScript object that describes what happened. Actions are sent from components using dispatch() and are automatically created via createSlice() in RTK. For example:\n{ type: \u0026quot;cart/addToCart\u0026quot;, payload: { id: 1, name: \u0026quot;Product A\u0026quot; } } üßµ From App.jsx (Any Component) Any component (like App.jsx or its children) can: Read data using useSelector() ‚Äì it\u0026rsquo;s read-only, not mutable. Send actions using useDispatch() to update the global state. Installation and Usage 1. Install Redux Toolkit and React-Redux Add the Redux Toolkit and React-Redux packages to your project:\nnpm install @reduxjs/toolkit react-redux 2. Create a Redux Store Create a file named src/app/store.js. Import the configureStore API from Redux Toolkit. We\u0026rsquo;ll start by creating an empty Redux store, and exporting it:\nimport { configureStore } from \u0026#39;@reduxjs/toolkit\u0026#39; export const store = configureStore({ reducer: {}, }) 3. Provide the Redux Store to React Once the store is created, we can make it available to our React components by putting a React-Redux \u0026lt;Provider\u0026gt; around our application in src/index.js. Import the Redux store we just created, put a \u0026lt;Provider\u0026gt; around your \u0026lt;App\u0026gt;, and pass the store as a prop:\ncreateRoot(document.getElementById(\u0026#34;root\u0026#34;)).render( \u0026lt;Provider store={store}\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;/Provider\u0026gt; ); Note: Redux installed and below is example usage\n4. Create a Redux State Slice import { createSlice } from \u0026#39;@reduxjs/toolkit\u0026#39; const initialState = { value: 0, } export const counterSlice = createSlice({ name: \u0026#39;counter\u0026#39;, initialState, reducers: { increment: (state) =\u0026gt; { // Redux Toolkit allows us to write \u0026#34;mutating\u0026#34; logic in reducers. It // doesn\u0026#39;t actually mutate the state because it uses the Immer library, // which detects changes to a \u0026#34;draft state\u0026#34; and produces a brand new // immutable state based off those changes state.value += 1 }, decrement: (state) =\u0026gt; { state.value -= 1 }, incrementByAmount: (state, action) =\u0026gt; { state.value += action.payload }, }, }) // Action creators are generated for each case reducer function export const { increment, decrement, incrementByAmount } = counterSlice.actions export default counterSlice.reducer 5. Add Slice Reducers to the Store import { configureStore } from \u0026#39;@reduxjs/toolkit\u0026#39; import counterReducer from \u0026#39;../features/counter/counterSlice\u0026#39; export const store = configureStore({ reducer: { counter: counterReducer, }, }) 6. Use Redux State and Actions in React Components import React from \u0026#39;react\u0026#39; import { useSelector, useDispatch } from \u0026#39;react-redux\u0026#39; import { decrement, increment } from \u0026#39;./counterSlice\u0026#39; export function Counter() { const count = useSelector((state) =\u0026gt; state.counter.value) const dispatch = useDispatch() return ( \u0026lt;div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button aria-label=\u0026#34;Increment value\u0026#34; onClick={() =\u0026gt; dispatch(increment())} \u0026gt; Increment \u0026lt;/button\u0026gt; \u0026lt;span\u0026gt;{count}\u0026lt;/span\u0026gt; \u0026lt;button aria-label=\u0026#34;Decrement value\u0026#34; onClick={() =\u0026gt; dispatch(decrement())} \u0026gt; Decrement \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) } There is always room for improvement and continuous learning, but we\u0026rsquo;ll end this note/article here. We\u0026rsquo;ve gained valuable knowledge about React ‚Äî congratulations!\n","permalink":"http://localhost:1313/posts/reactjs/","summary":"\u003cp\u003e\u003cimg alt=\"JS Image\" loading=\"lazy\" src=\"/posts/assets/react/react.webp\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReact.js is a JavaScript library for building \u003cstrong\u003euser interfaces\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eDeveloped by \u003cstrong\u003eFacebook\u003c/strong\u003e (now Meta) in 2013.\u003c/li\u003e\n\u003cli\u003eIt is \u003cstrong\u003ecomponent-based\u003c/strong\u003e, \u003cstrong\u003edeclarative\u003c/strong\u003e, and allows for efficient UI updates.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"key-features-of-react\"\u003eKey Features of React\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eComponent-Based Architecture\u003c/strong\u003e: UI is built using reusable components.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVirtual DOM\u003c/strong\u003e: Updates only the changed parts, making React fast.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUnidirectional Data Flow\u003c/strong\u003e: Props and state maintain a predictable data structure.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eJSX (JavaScript XML)\u003c/strong\u003e: A syntax extension that lets you write HTML inside JavaScript.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHooks\u003c/strong\u003e: Allow functional components to have state and other features.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"mutable-vs-immutable\"\u003eMutable vs Immutable\u003c/h2\u003e\n\u003ch3 id=\"mutable-changeable\"\u003eMutable (Changeable)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eMutable data types \u003cstrong\u003ecan be changed\u003c/strong\u003e after creation.\u003c/li\u003e\n\u003cli\u003eExample: \u003cstrong\u003eObjects \u0026amp; Arrays\u003c/strong\u003e are mutable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e arr \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#bd93f9\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#bd93f9\"\u003e3\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003earr.push(\u003cspan style=\"color:#bd93f9\"\u003e4\u003c/span\u003e); \u003cspan style=\"color:#6272a4\"\u003e// Modifies the original array\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#6272a4\"\u003e\u003c/span\u003econsole.log(arr); \u003cspan style=\"color:#6272a4\"\u003e// [1, 2, 3, 4]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"immutable-unchangeable\"\u003eImmutable (Unchangeable)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eImmutable data \u003cstrong\u003ecannot be changed\u003c/strong\u003e directly. Instead, you create a new copy.\u003c/li\u003e\n\u003cli\u003eExample: \u003cstrong\u003eStrings \u0026amp; Numbers\u003c/strong\u003e are immutable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e str \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estr[\u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;M\u0026#34;\u003c/span\u003e; \u003cspan style=\"color:#6272a4\"\u003e// This won\u0026#39;t change the string\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#6272a4\"\u003e\u003c/span\u003econsole.log(str); \u003cspan style=\"color:#6272a4\"\u003e// \u0026#34;Hello\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eExample of immutable object handling (creating a new object instead of modifying the original):\u003c/p\u003e","title":"React ‚Äì A JavaScript Library"},{"content":"\nHow anyone can be more effective with less effort by learning how to identify and leverage the 80/20 principle\u0026ndash;the well-known, unpublicized secret that 80 percent of all our results in business and in life stem from a mere 20 percent of our efforts.\nThe 80/20 principle is one of the great secrets of highly effective people and organizations.\nDid you know, for example, that 20 percent of customers account for 80 percent of revenues? That 20 percent of our time accounts for 80 percent of the work we accomplish? The 80/20 Principle shows how we can achieve much more with much less effort, time, and resources, simply by identifying and focusing our efforts on the 20 percent t at really counts. Although the 80/20 principle has long influenced today\u0026rsquo;s business world, author Richard Koch reveals how the principl works and shows how we can use it in a systematic and practical way to vastly increase our effectiveness, and improve our careers and o r companies.\nThe unspoken corollary to the 80/20 principle is that little of what we spend our time on actually counts. But by concentrating on those things that do, we can unlock the enormous potential of the magic 20 percent, and transform our effectiveness in our jobs, our careers, our businesses, and our lives.\n1) 80/20: The Basics The 80/20 Principle:\n80% of your effort, action, or input will lead to only 20% of your results, output, rewards, or victories. 20% of your efforts, action, or input is what leads to the majority of your results, output, rewards and victories. It is a proven nonlinear approach to everything that happens. You will see this consistently across the board 20% of the pea pods will have 80% of the peas 80% of the money in this world is controlled by 20% of the people 80% of your carpet wear will be on 20% of your carpet 80% of your profits come from 20% of your customers 2) You Can Be great The 80/20 principle states that it is possible for anyone to achieve greatness.\nThe key: Do not spend your time trying to figure out how much effort you will need to become great at something.\nInstead: Figure out what is the right thing for you to do.\njWhat is it that makes you great? What is it that makes you come alive? What is that area where you are the best? If you\u0026rsquo;re spending your time on everything else, you\u0026rsquo;re just going to be wasting your life away, never getting to that point of greatness.\nSo find that area where you can be great and just push on that. Continue to work on that.\nThat may be where you\u0026rsquo;re expending minimum effort but are getting the most benefit from. That is the area where you will get exponential results.\n3) Choose Your Allies One of the most important decisions you can make in your life concerns your allies \u0026ndash; figuring out who are the people you are going to spend time with.\nBut in most cases, people are doing this wrong.\nThe allies they have are by default. They just happened to run into certain kinds of people and hence they associated with them. That how they choose \u0026ndash; or how they don‚Äôt choose \u0026ndash; their allies.\nThese are the wrong kinds of ‚Äúallies.‚Äù Your allies should not be chosen by default People have too many allies. There are just too many people in their lives who do not add much value.\nPeople do not know how to use their allies, how to be able to leverage them.\nThe key to 80/20 thinking Say this: ‚ÄúI\u0026rsquo;m going to choose my allies who are going to help me move forward in my life.‚Äù\nYou\u0026rsquo;re not going to do it by default. It\u0026rsquo;s going to be by design.\nPick a few allies that are powerful. Pick a few that are going to really help you move the needle forward. Don‚Äôt have too many. And then use them properly. Leverage their strengths and they will leverage yours. That\u0026rsquo;s the power of allies. You help each other out and you build each other up and get exponential results in the process.\n4) Design Your Own Game How people play the game of life\nThey play their game of life by default They play the game of life that their parents want them to play, that the society wants them to play They continue to lose at that game because they never designed the game that they are in. But as 80/20 thinkers, we need to design our game \u0026ndash; the game that we most want to play \u0026ndash; then it will be really easy for us to win at that game.\nThose with default conditioning are actually playing someone else\u0026rsquo;s game. They\u0026rsquo;re simply wasting their time playing others‚Äô games, society‚Äôs games, and so on \u0026ndash; anything but their own game, which is what really matters.\nThe greatest innovations and the greatest accomplishments are always a result of people who are designing their own game and hence winning at those games. They\u0026rsquo;re designing their own races of life and are playing in those races, winning in those races, and that\u0026rsquo;s what we need to do.\nWe need to design our own game and win in those games to get exponential results.\n5) Achievement Island / Desert As you look back at your life, what you\u0026rsquo;ll see is That\nthere are short periods of time when you get extreme results there are long periods of time when you got almost no results Wonder what‚Äôs going on?\nThe key to harnessing the power of 80/20:\nRealize that we\u0026rsquo;re gonna have these short periods of extreme results (or the author‚Äôs so-called ‚ÄúAchievement Islands‚Äù)\nTo Do:\nMake a list of all the times in your life where you\u0026rsquo;ve had these Achievement Islands. Be guided by these questions: Where have you had extreme results in very short durations of time? What are the key characteristics of those situations? What are the things that stand out when you think about these moments of extreme results? What happened? Why did you get those results? On the other end, make a list of the times in your life where you almost got no results at all despite trying and trying (‚ÄúAchievement Deserts‚Äù). What happened? What were the common situations or characteristics that were happening during those long periods of time? Now your job is to focus as much as possible on the things where you were getting maximum results. Those are what will get you to move towards your Achievement Islands rather than your Achievement Deserts. 6) 80/20 in Relationships When it comes to relationships, 80/20 principle still holds true.\n80% of your relationships give you only 20% value 20% of your relationships give you 80% value So what you need to do is ensure that you\u0026rsquo;re spending 80% of your relationship time on only 20% of those relationships. These are your high-leverage people, the relationships that are creating the most value.\nWith that, spend only 20% on the remaining 80% people in your life.\nMany people tend to spray their effort with a lot of different relationships (the 80%) all over the place.\nThese are relationships that don\u0026rsquo;t bring them any long-term value. They have a lot of friends, but none of them are real. None of them are actually going to help them build anything useful or accomplish great goals. As an 80/20 practitioner, find a few powerful alliances. These are your key allies ( your 20%).\nDevelop deep relationships with them. Spend a lot of quality time with them in order to strengthen those 20% relationships. Richard Koch says that all we need is just 6-7 key allies, and then we can do tremendously in our lives. We don\u0026rsquo;t need 100, 200, or 500 friends. From there we can leverage the power of our relationships.\nStart figuring out who these people are, or those who will add that value to your life. Design your circle rather than let it happen b default, which happens unfortunately to most people.\n7) Ruthlessly Prune We need to cut down. We don\u0026rsquo;t need to add. We need to remove, to reduce, so that we can get massive results. This process is called ruthless pruning.\nThe problem that happens with most people:\n80% of their time is encroaching on their 20% time where they create the most value. 80% of their allies are encroaching on the 20% that create the most value for them. 80% of your customers actually take up so much value that you end up not having enough value to give to the 20% customers who create the most value for you. Mental energy expended on 80% of your projects is taking away mental energy from. the 20% projects that create the most value/exponential results for you. Actions expended on 80% of your projects do the same thing. They take away from the 20% projects that are creating the most leverage, the most value for you. The same happens with any area of business - marketing efforts, sales effort, strategic efforts, whatever it is.\nThat\u0026rsquo;s why one of the things Jack Welch at G.E said was: ‚ÄúWe\u0026rsquo;re only going to do things that we can be in the Top 2 to Top 3 in the world. If we\u0026rsquo;re not in the Top 2 or Top 3, then we\u0026rsquo;re going to stop doing those things.‚Äù\nHence, we\u0026rsquo;re going to only expend our energy on the 20% things and we\u0026rsquo;re going to ruthlessly prune the 80%, even if there is some result coming from it\u0026hellip; in order to exponentially grow the areas of business and life where we\u0026rsquo;re getting maximum results.\n8) Multiply Output In order to multiply our output, we need to move our resources from an unproductive place to a productive place, from an unproductive arena into an arena, where the resource can be productive.\nEXAMPLE: A hammer is great at hammering a nail but it\u0026rsquo;s not useful when it comes to cutting a piece of cloth. It\u0026rsquo;s not going to help.\nSimilarly, a pair of scissors is great at cutting a piece of cloth but entirely useless when it comes to hammering a nail.\nBoth these resources are very powerful but they have to be used in the right arena and that\u0026rsquo;s the key.\nThat\u0026rsquo;s the 80/20 \u0026ndash; the understanding that the resource needs to be used in the right arena where you get 10x, 100x, even 1000x more improvement or higher productivity.\nThe same holds with you. If you\u0026rsquo;re using your resources and your strengths properly, then you are living in the right arena. You are being highly productive.\nBut if you\u0026rsquo;re not using those strengths properly, if you are using them in the wrong arena, you are in the unproductive zone.\nAgain, our job is to move our resources from an unproductive area to a productive area. That‚Äôs when we can massively multiply our productivity.\nKEY POINTS: The basics - The 80/20 principle in a nutshell. You can be great - How the 80/20 principle can make you, and everyone else, great. Choosing allies - Why choosing your allies is important and how to identify them. Design your own game - Stop living your life by default. Achievement island and desert - Be clear with your ‚Äúachievement islands‚Äù and only build on them. Relationships - How the 80/20 principle applies to our relationships and how we can improve them. Ruthlessly prune - Why we need to reduce, not add, in our lives. Multiplying output - Use your strengths and resources properly in order to multiply your productivity. ","permalink":"http://localhost:1313/posts/80-20-rule/","summary":"\u003cp\u003e\u003cimg alt=\"cover-image\" loading=\"lazy\" src=\"/posts/assets/80-20/80-20.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eHow anyone can be more effective with less effort by learning how to identify and leverage the 80/20 principle\u0026ndash;the well-known, unpublicized secret that 80 percent of all our results in business and in life stem from a mere 20 percent of our efforts.\u003c/p\u003e\n\u003cp\u003eThe 80/20 principle is one of the great secrets of highly effective people and organizations.\u003c/p\u003e\n\u003cp\u003eDid you know, for example, that 20 percent of customers account for 80 percent of revenues? That 20 percent of our time accounts for 80 percent of the work we accomplish? \u003cstrong\u003eThe 80/20 Principle\u003c/strong\u003e shows how\nwe can achieve much more with much less effort, time, and resources, simply by identifying and focusing our efforts on the 20 percent t at really counts. Although the 80/20 principle has long influenced today\u0026rsquo;s business world, author Richard Koch reveals how the principl works and shows how we can use it in a systematic and practical way to vastly increase our effectiveness, and improve our careers and o r companies.\u003c/p\u003e","title":"The 80/20 Principle"},{"content":"\nIn this article, we‚Äôll walk through the complete process of building an AI chatbot web app powered by Google Gemini and deploying it to the web using Vercel. We‚Äôll use AssistantUI, a modern framework to create conversational experiences using powerful LLMs.\nStep 1: Install the Prerequisites Before we begin, make sure the following tools are installed on your machine:\nInstall Visual Studio Code (VS Code). Install Node.js (Node.js). Install Git (Git). Step 2: Set Up the Project Directory Create a folder named chatbot:\nmkdir chatbot \u0026amp;\u0026amp; cd chatbot Open the folder in VS\ncode . Step 3: Scaffold the Assistant UI App npx assistant-ui@latest create This command will prompt you to select a template. Choose the chat template. This will create a new folder named assistant-ui with the necessary files and dependencies.\nStep 4: Set Up Dependencies Move into the generated project folder (likely chatbot):\ncd chatbot Install the required SDKs:\nnpm install ai @assistant-ui/react-ai-sdk @ai-sdk/google Step 5: Integrate Google Gemini API Open the file:\n/app/api/chat/route.ts Clear all content in the file and paste the following code:\nimport { google } from \u0026#34;@ai-sdk/google\u0026#34;; import { streamText } from \u0026#34;ai\u0026#34;; export const maxDuration = 30; export async function POST(req: Request) { const { messages } = await req.json(); const result = streamText({ model: google(\u0026#34;gemini-2.0-flash\u0026#34;), messages, }); return result.toDataStreamResponse(); } Get your Google Gemini API Key from the Google AI Studio.\nStep 6: Store Your API Key Create a new environment file in the root directory:\n.env.local Add the following line:\nGOOGLE_GENERATIVE_AI_API_KEY=\u0026#34;Your_API_KEY\u0026#34; Make sure to replace Your_API_KEY with your actual API key.\nStep 7: Run the Development Server Start your app locally:\nnpm run dev Your application will be live at:\nhttp://localhost:3000 Step 8: Build for Production Build your app for production:\nnpm run build This command will create a .vercel folder in your project directory.\nClean up: Delete the node_modules folder and .env.local file before uploading to GitHub for security reasons.\nStep 9: Upload your code to GitHub Create a new repository on GitHub. Initialize a new Git repository in your project folder: git init Add your files to the repository: git add . Commit your changes: git commit -m \u0026#34;Initial commit\u0026#34; Add the remote repository: git remote add origin https://github.com/\u0026lt;username\u0026gt;/chatbot.git Push your changes: git push -u origin main Step 10: Deploy to vercel Go to Vercel and sign in with your GitHub account. Click on the \u0026ldquo;New Project\u0026rdquo; button. Select your GitHub repository. Vercel will automatically detect the framework and set up the build settings. When prompted, add your API key as an environment variable:\nGOOGLE_GENERATIVE_AI_API_KEY = your_key_here Step 11: Your AI Chatbot is Live! Once the deployment is complete, you will receive a live URL for your chatbot. You can share this URL with anyone to access your AI chatbot.\nFinal Notes Make sure to keep your API key secure and do not expose it in your public repositories. This setup gives you a solid starting point to create intelligent AI interfaces. You can now customize the UI, add more features, or even connect this to a backend for storing user interactions. ","permalink":"http://localhost:1313/posts/chatbot/","summary":"\u003cp\u003e\u003cimg alt=\"Thumbnail Image\" loading=\"lazy\" src=\"/posts/assets/tech/chatbot.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eIn this article, we‚Äôll walk through the complete process of building an AI chatbot web app powered by Google Gemini and deploying it to the web using Vercel. We‚Äôll use AssistantUI, a modern framework to create conversational experiences using powerful LLMs.\u003c/p\u003e\n\u003ch2 id=\"step-1-install-the-prerequisites\"\u003eStep 1: Install the Prerequisites\u003c/h2\u003e\n\u003cp\u003eBefore we begin, make sure the following tools are installed on your machine:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInstall Visual Studio Code (\u003ca href=\"https://code.visualstudio.com\"\u003eVS Code\u003c/a\u003e).\u003c/li\u003e\n\u003cli\u003eInstall Node.js (\u003ca href=\"https://nodejs.org/en/download/\"\u003eNode.js\u003c/a\u003e).\u003c/li\u003e\n\u003cli\u003eInstall Git (\u003ca href=\"https://git-scm.com/downloads\"\u003eGit\u003c/a\u003e).\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-set-up-the-project-directory\"\u003eStep 2: Set Up the Project Directory\u003c/h2\u003e\n\u003cp\u003eCreate a folder named chatbot:\u003c/p\u003e","title":"Build an AI Chatbot Web App with Google Gemini and Deploy on Vercel"},{"content":"Installing MS SQL Server along with Azure Data Studio on Arch Linux requires a combination of Microsoft packages and some extra tweaks since SQL Server isn\u0026rsquo;t natively available for Arch and Azure Data Studio is mainly targeted for Debian/Red Hat based distros.\nStep 1: Install Azure Data Studio Azure Data Studio is available via AUR.\nyay -S azuredatastudio-bin This installs the latest prebuilt version from Microsoft.\nOption 2: Manual (optional) If you want to manually install:\nDownload .tar.gz from Azure Data Studio official packages Extract it: tar -xvzf azuredatastudio-linux-x64.tar.gz cd azuredatastudio-linux-x64 ./azuredatastudio Step 2: Install Microsoft SQL Server (Docker Method ‚Äì Recommended) Microsoft SQL Server is not supported natively on Arch, but the Docker container is fully functional and easiest to manage.\nInstall Docker if you haven‚Äôt: sudo pacman -S docker sudo systemctl enable --now docker sudo usermod -aG docker $USER newgrp docker Pull SQL Server Image: docker pull mcr.microsoft.com/mssql/server:2022-latest Run the Container: docker run -e \u0026#34;ACCEPT_EULA=Y\u0026#34; -e \u0026#34;SA_PASSWORD=YourStrong!Passw0rd\u0026#34; \\ -p 1433:1433 --name sql_server \\ -d mcr.microsoft.com/mssql/server:2022-latest Note: Make sure to use a strong password (uppercase, lowercase, number, symbol, and \u0026gt;8 characters).\nStep 3: Connect SQL Server to Azure Data Studio Launch Azure Data Studio. Click on New Connection. Fill out the fields: Server: localhost Authentication: SQL Login User: sa Password: YourStrong!Passw0rd Hit Connect Step 4: (Optional) Autostart Docker with Hyprland If you want SQL Server to start with your system:\nsudo systemctl enable docker Or add a Hyprland hook to start the container at login:\ndocker start sql_server Conclusion You now have a fully functional SQL Server instance running on Arch Linux via Docker, and you can manage it using Azure Data Studio. This setup allows you to leverage the power of SQL Server without needing to run a full Windows environment.\n","permalink":"http://localhost:1313/posts/sqlserver/","summary":"\u003cp\u003eInstalling MS SQL Server along with Azure Data Studio on Arch Linux requires a combination of Microsoft packages and some extra tweaks since SQL Server isn\u0026rsquo;t natively available for Arch and Azure Data Studio is mainly targeted for Debian/Red Hat based distros.\u003c/p\u003e\n\u003ch2 id=\"step-1-install-azure-data-studio\"\u003eStep 1: Install Azure Data Studio\u003c/h2\u003e\n\u003cp\u003eAzure Data Studio is available via AUR.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eyay -S azuredatastudio-bin\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis installs the latest prebuilt version from Microsoft.\u003c/p\u003e\n\u003ch3 id=\"option-2-manual-optional\"\u003eOption 2: Manual (optional)\u003c/h3\u003e\n\u003cp\u003eIf you want to manually install:\u003c/p\u003e","title":"MS SQL Server and Azure Data Studio on Arch Linux"},{"content":"Database Database is a collection of interrelated data.\nA database is an organized collection of data that can be easily accessed, managed, and updated. It stores data in tables, rows, and columns, allowing efficient retrieval and manipulation. Examples include MySQL, PostgreSQL, and MongoDB. DBMS DBMS(Database Management System) is software used to create, manage, and organize databases.\nA DBMS is software that manages and controls database operations like storing, retrieving, and updating data. It ensures data consistency, security, and integrity while providing an interface for users to interact with the database. Examples include MySQL, Oracle, and Microsoft SQL Server. üöÄ What is RDBMS RDBMS (Relational Database Management System) - is a DBMS based on the concept of tables (also called relations). Data is organized into tables(also known as relations) with rows(records) and columns(attributes). E.g., MySQL, PostgreSQL, SQL Server etc. SQL SQL is Structured Query Language - used to store, manipulate and retrieve data from RDBMS.\nWe use SQL for CRUD Operations:\nCREATE - To Create databases, tables, insert tuples etc. READ - To read data present int the database. UPDATE - Modify already insert data. DELETE - Delete database, table or specific data point/tuple/row or multiple rows. NOTE : SQL keywords are NOT case sensitive. E.g., select is the same as SELECT in SQL.\nCreate Database We can use the the following command to create the database.\nCREATE DATABASE database_name; Delete Database We Can use the DROP command to delete the database.\nDROP DATABASE database_name; Select/Use the Database We can use the USE command to select db and perform operation.\nUSE db_name; SQL vs MySQL SQL is a language used to perform CRUD operations in Relational DB, while MySQL is a RDBMS that uses SQL.\nCreating Table We can create the table in db using the CREATE TABLE command whole syntax is given below.\nCREATE TABLE table_name( column_name1 datatype constraint; column_name2 datatype constraint; column_name3 datatype constraint; ); SQL Data Types In SQL, data types define the kind of data that can be stored in a column or variable.\nDatatype Description Usage CHAR String (0-255), can store characters of fixed length CHAR(50) VARCHAR String (0-255), can store characters up to given length VARCHAR(50) BLOB String (0-65535), can store binary large object BLOB(1000) INT Integer (-2,147,483,648 to 2,147,483,647) INT TINYINT Integer (-128 to 127) TINYINT BIGINT Integer (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807) BIGINT BIT Can store x-bit values. x can range from 1 to 64 BIT(2) FLOAT Decimal number - with precision to 23 digits FLOAT DOUBLE Decimal number - with 24 to 53 digits DOUBLE BOOLEAN Boolean values 0 or 1 BOOLEAN DATE Date in format of YYYY-MM-DD ranging from 1000-01-01 to 9999-12-31 DATE TIME HH:MM:SS TIME YEAR Year in 4-digit format ranging from 1901 to 2155 YEAR Note - CHAR is for fixed length \u0026amp; VARCHAR is for variable length strings. Generally, VARCHAR is better as it only occupies necessary memory \u0026amp; works more efficiently.\nSigned \u0026amp; Unsigned : We can also use UNSIGNED with datatypes when we only have positive values to add. Eg - UNSIGNED INT\nTINYINT UNSIGNED (0 to 255)\nTINYINT (-128 to 127)\nTypes of SQL Commands DDL(Database Definition Language): Used to create, alter, delete database objects like tables, indexes, etc. (CREATE, DROP, ALTER, RENAME, TRUNCATE). DQL(Database Query Language): Used to retrieve data from databases. (SELECT). DML(Database Manipulation Language): Used to modify the database. (INSERT, UPDATE, DELETE). DCL(Database Control Language): Used to grant \u0026amp; revoke permissions. (GRANT, REVOKE). TCL(Transaction Control Language): Used to manage transactions, (COMMIT, ROLLBACK, START TRANSACTIONS, SAVEPOINT). DATABASE related Queries CREATE DATABASE db_name; -- used to create database CREATE DATABASE IF NOT EXISTS db_name; -- create database if database not exist of this name. DROP DATABASE db_name; -- delete database DROP DATABASE IF EXISTS db_name; -- delete database if exists SHOW DATABASES; -- show all databases SHOW TABLES; -- used to show all tables in particular database Table related Queries Create Tables We can use the following syntax to create the table or design the scheme of table.\nCREATE TABLE table_name( column_name1 datatype constraint; column_name2 datatype constraint; ); Example\nCREATE TABLE student( id INT PRIMARY KEY, name VARCHAR(50), age INT NOT NULL ); Select \u0026amp; View ALL columns SELECT * FROM table_name; -- display whole table Insert INSERT INTO table_name (colname1, colname2); VALUES (col1_v1, col2_v1), (col1_v2, col2_v2); Keys Primary Key It is a column (or set of columns) in a table that uniquely identifies each row. (a unique id). There is only 1 Primary Key and it should not be NOT null\nForeign Key A foreign key is a column (or set of columns) in a table that refers to the primary key in another table. There can be multiple FKs. FKs can be have duplicate \u0026amp; null values.\nSecondary Key Secondary key may or may not be unique field. Some times records are required to access by a field other than the primary key. In these situations another key that is used is called secondary key.\nComposite Key Composite key consists of two or more than two fields. Composite key is also designed as a primary key. It is created in a situation when no single field fulfills the property of uniqueness. To make unique more than one field are combined and used as primary key.\nConstraints SQL constraints are used to specify rules for data in a table.\nNOT NULL : columns cannot have null value. col1 INT NOT NULL UNIQUE : all values in column are different. col2 UNIQUE PRIMARY KEY : makes a column unique \u0026amp; not null but used only for one. id INT PRIMARY KEY. also declare as PRIMARY KEY (id). Foreign Key Prevent actions that would destroy links between tables.\nCREATE TABLE temp( cust_id INT, FOREIGN KEY (cust_id) references customer(id) ); DEFAULT sets the default value of a column\nsalary INT DEFAULT default_value; CHECK It can limit the values allowed in a column.\nCREATE TABLE city( id INT PRIMARY KEY, city VARCHAR(50), age INT, CONSTRAINT age_check CHECK (age\u0026gt;= 16 AND city=\u0026#34;Delhi\u0026#34;) ); CREATE TABLE newTab ( age INT CHECK (age\u0026gt;=18) ); Select in Detail SELECT The SELECT statement is used to select data from a database.\nSELECT col1,col2 FROM table_name; To Select All SELECT * FROM table_name; Tip: DISTINCT Keyword Removes duplicate rows from query results.\nSyntax:\nSELECT DISTINCT column1, column2 FROM table_name; Where Clause To define some conditions\nSELECT col1,col2 from table WHERE condition(s). SELECT * FROM student WHERE marks \u0026gt; 80; SELECT * FROM student WHERE city=\u0026#34;Multan\u0026#34;; Operator in WHERE Arithmetic Operators : + , - , * , / , % Comparison Operators : = , != , \u0026gt; , \u0026gt;= , \u0026lt; , \u0026lt;= Logical Operators : AND, OR, NOT, IN, BETWEEN, ALL, LIKE, ANY Bitwise Operators : \u0026amp; , | Operators AND (to check for both conditions to be true) SELECT * FROM student WHERE marks \u0026gt; 80 AND city=\u0026#34;Multan\u0026#34;; OR (to check for one of the conditions to be true) SELECT * FROM student WHERE marks \u0026gt; 90 OR city=\u0026#34;Lahore\u0026#34;; BETWEEN : select for a given range SELECT * FROM student WHERE marks BETWEEN 80 AND 90; IN : (matches any value in the list) SELECT * FROM student WHERE city IN (\u0026#34;Multan\u0026#34;,\u0026#34;Karachi\u0026#34;) NOT : (to negate the given condition) SELECT * FROM student WHERE city NOT IN (\u0026#34;Multan\u0026#34;, \u0026#34;Karachi\u0026#34;) Limit Clause The limit clause is used to sets an upper limit on number of(tuples)rows to be returned.\nSELECT * FROM student LIMIT 3; SELECT col1,col2 FROM table_name LIMIT number; Order by Clause To sort in ascending (ASC) or descending (DESC) order.\nSELECT * FROM student ORDER BY city ASC; SELECT col1,col2 FROM table_name ORDER BY col_name(s) ASC; Aggregate Functions Aggregate functions perform a calculation on a set of values, and return a single value.\nCOUNT() MAX() MIN() SUM() AVG() Get Maximum Marks\nSELECT MAX(marks) FROM student; Get Average marks\nSELECT AVG(marks) FROM student; Group By Clause Group rows that have the same values into summary rows. It collect data from multiple records(rows) and groups the result by one ore more column.\nGenerally we use the group by with some aggregation function.\nCount number of students in each city\nSELECT city, count(name) FROM student GROUP BY city; HAVING Clause Similar to WHERE i.e., applies some condition on rows. Used when we want to apply any condition after grouping.\nCount number of students in each city where max marks cross 90.\nSELECT city, count(rollno) FROM student GROUP BY city HAVING MAX(marks) \u0026gt; 90; General Order SELECT column(s) FROM table_name WHERE condition GROUP BY column(s) HAVING condition ORDER BY column(s) ASC;\nExample:\nSELECT city FROM student WHERE grade = \u0026#34;A\u0026#34; GROUP BY city HAVING MAX(marks) \u0026gt; 90 ORDER BY city DESC; Table related Queries UPDATE is used to update existing rows in a table.\nUPDATE table_name SET col1=val1, col2=val2 WHERE condition; UPDATE student SET grade = \u0026#34;O\u0026#34; WHERE grade = \u0026#34;A\u0026#34;; DELETE is used to delete the existing rows in a table\nDELETE FROM table_name WHERE condition; DELETE FROM student WHERE marks \u0026lt; 33; Foreign Key A foreign key (FK) is a column or a set of columns in a table that establishes a link between data in two tables. It refers to the primary key (PK) in another table, ensuring data integrity and enforcing referential constraints.\nCREATE TABLE Orders ( order_id INT PRIMARY KEY, customer_id INT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); Cascading for FK On Delete Cascade When we create a foreign key using this option, it deletes the referencing rows in the child table when the referenced row is deleted in the parent table which has a primary key.\nOn Update Cascade When we create a foreign key using UPDATE CASCADE the referencing rows are updated in the child table when the referenced row is updated in the parent table which has a primary key.\nCREATE TABLE teacher( id INT PRIMARY KEY, name VARCHAR(50), dept_id INT, FOREIGN KEY (dept_id) references dept(id) ON UPDATE CASCADE ON DELETE CASCADE ); Alter The ALTER is used to change the schema of table in a database.\nADD Column ALTER TABLE table_name ADD COLUMN column_name datatype constraint; DROP Column ALTER TABLE table_name DROP COLUMN column_name; RENAME Column ALTER TABLE table_name RENAME TO new_table_name; CHANGE Column(rename) ALTER TABLE table_name CHANGE COLUMN old_name new_name new_datatype new_constraint; MODIFY Column(modify datatype/ constraint) ALTER TABLE table_name MODIFY col_name new_datatype new_constraint; Truncate The TRUNCATE is used to delete the data of table in database.\nTRUNCATE TABLE table_name ; Joins in SQL JOIN is used to combine rows from two or more tables, based on a related column between them.\n1. Inner Join Returns records that have matching values in both tables Syntax\nSELECT column(s) FROM tableA INNER JOIN tableB ON tableA.col_name = tableB.col_name; Example\nSELECT * FROM student INNER JOIN course ON student.student_id = course.student_id; Tip: SQL aliases are used to give a table, or a column in a table, a temporary name. Aliases are often used to make column names more readable. An alias only exists for the duration of that query. An alias is created with the¬†AS¬†keyword.\nSELECT CustomerID AS ID FROM Customers; 2. Left Join Returns all records from the left table, and the matched records from the right table. Syntax\nSELECT columns(s) FROM talbeA LEFT JOIN tableB ON tableA.col_name = tableB.col_name; Example\nSELECT * FROM student as s LEFT JOIN course as c ON s.student_id = c.student_id; 3. Right Join Returns all records from the right table, and the matched records from the left table\nSyntax\nSELECT column(s) FROM tableA RIGHT JOIN tableB ON tableA.col_name = tableB.col_name; Example\nSELECT * FROM student as s RIGHT JOIN course as c ON s.student_id = c.student_id; 4. Full Join Returns all records when there is a match in either left or right table\nSELECT * FROM student AS s LEFT JOIN course AS c ON s.student_id = c.student_id UNION SELECT * FROM student AS s LEFT JOIN course AS c ON s.student_id = c.student_id; Left Exclusive Join Exclusive joins in SQL are used to retrieve records that exist in one table but not in the other when performing a LEFT JOIN or RIGHT JOIN.\nA Left Exclusive Join retrieves records from the left table that do not have matching records in the right table.\nSELECT * FROM student AS a LEFT JOIN course AS b ON a.id = b.id WHERE b.id IS NULL; Right Exclusive Join A Right Exclusive Join retrieves records from the right table that do not have matching records in the left table.\nSELECT * FROM student AS a RIGHT JOIN course AS b ON a.id = b.id WHERE a.id IS NULL; Self Join It is a regular join but the table is joined with itself.\nSELECT column(s) FROM table as a JOIN table as b ON a.col_name = b.col_name Union It is used to combine the result-set of two or more SELECT statements. Gives UNIQUE records.\nevery SELECT should have same no. of columns columns must have similar data types columns in every SELECT should be in same order SELECT column(s) FROM tableA UNION SELECT column(s) FROM tableB and we can also use the UNION ALL to give all the values including the duplicates records.\nSQL Sub Queries A Subquery or Inner query or a Nested query is a query within another SQL query. It is used to return data that will be used in the main query as a condition.\nIt involves 2 select statements.\nSyntax SELECT column(s) FROM table_name WHERE col_name operator ( subquery ); Example with FROM SELECT MAX(marks) FROM (SELECT marks FROM student WHERE city = \u0026#39;Delhi\u0026#39;) AS temp; MySQL Views A view is a virtual table based on the result-set of an SQL statement.\nA view always shows up-to-date data. The database engine recreates the view, every time a user queries it.\nCREATE VIEW v1 AS SELECT rollno, name, marks FROM student; Stored Procedures in MySQL A Stored Procedure is a precompiled set of SQL statements stored in the database that can be executed repeatedly. It helps encapsulate logic in a modular way, improving reusability, maintainability, and performance.\nBenefits of Stored Procedures Modularity ‚Äì Write once, use many times. Performance ‚Äì Precompiled for faster execution. Security ‚Äì Users can be granted access to run procedures without giving access to underlying tables. Reduced network traffic ‚Äì Fewer queries sent between application and server. Syntax: Creating a Stored Procedure DELIMITER // CREATE PROCEDURE procedure_name ( IN param1 datatype, OUT param2 datatype, INOUT param3 datatype ) BEGIN -- SQL statements go here END // DELIMITER ; Example:\nDELIMITER // CREATE PROCEDURE GetEmployeeByID(IN emp_id INT) BEGIN SELECT * FROM employees WHERE id = emp_id; END // DELIMITER ; Calling a Stored Procedure CALL GetEmployeeByID(1); If there are OUT or INOUT parameters:\nCALL ProcedureName(@out_param); SELECT @out_param; Types of Parameters Type Description IN Input only (passed by value). OUT Output only (value returned). INOUT Both input and output (passed by reference). Modifying or Dropping Stored Procedures DROP PROCEDURE IF EXISTS procedure_name; Alter is not supported: You must drop and recreate the procedure. Control Structures in Stored Procedures IF-ELSE Used to execute different blocks of code based on a condition.\nIF condition THEN -- statements ELSE -- statements END IF; Example:\nDELIMITER // CREATE PROCEDURE CheckAge(IN age INT) BEGIN IF age \u0026gt;= 18 THEN SELECT \u0026#39;You are an adult\u0026#39; AS result; ELSE SELECT \u0026#39;You are a minor\u0026#39; AS result; END IF; END // DELIMITER ; -- Call the procedure CALL CheckAge(20); -- Output: You are an adult CALL CheckAge(15); -- Output: You are a minor CASE Statement Used as an alternative to multiple IF statements when checking several conditions.\nSyntax:\nCASE variable WHEN value1 THEN statement1; WHEN value2 THEN statement2; ELSE statement_default; END CASE; Example:\nDELIMITER // CREATE PROCEDURE GradeResult(IN grade CHAR(1)) BEGIN CASE grade WHEN \u0026#39;A\u0026#39; THEN SELECT \u0026#39;Excellent\u0026#39; AS Result; WHEN \u0026#39;B\u0026#39; THEN SELECT \u0026#39;Good\u0026#39; AS Result; WHEN \u0026#39;C\u0026#39; THEN SELECT \u0026#39;Average\u0026#39; AS Result; ELSE SELECT \u0026#39;Fail or Invalid Grade\u0026#39; AS Result; END CASE; END // DELIMITER ; -- Call the procedure CALL GradeResult(\u0026#39;A\u0026#39;); -- Output: Excellent CALL GradeResult(\u0026#39;D\u0026#39;); -- Output: Fail or Invalid Grade WHILE Loop Repeats a block of statements while the condition is true.\nSyntax\nWHILE condition DO -- statements END WHILE; Example:\nDELIMITER // CREATE PROCEDURE CountToFive() BEGIN DECLARE i INT DEFAULT 1; WHILE i \u0026lt;= 5 DO SELECT CONCAT(\u0026#39;Count: \u0026#39;, i) AS Output; SET i = i + 1; END WHILE; END // DELIMITER ; -- Call the procedure CALL CountToFive(); ## REPEAT Loop Similar to WHILE, but checks the condition after executing the block.\nSyntax:\nREPEAT -- statements UNTIL condition END REPEAT; Example:\nDELIMITER // CREATE PROCEDURE RepeatExample() BEGIN DECLARE i INT DEFAULT 1; REPEAT SELECT CONCAT(\u0026#39;Repeat Count: \u0026#39;, i) AS Output; SET i = i + 1; UNTIL i \u0026gt; 5 END REPEAT; END // DELIMITER ; -- Call the procedure CALL RepeatExample(); Error Handling Use DECLARE ... HANDLER to define how to handle errors.\nSyntax\nDECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN -- Error handling code END; Create the procedure with error handler\nDELIMITER // CREATE PROCEDURE InsertStudent ( IN student_id INT, IN student_name VARCHAR(50) ) BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SELECT \u0026#39;Error occurred while inserting student!\u0026#39; AS ErrorMessage; END; -- Attempt to insert student INSERT INTO students (id, name) VALUES (student_id, student_name); -- Continue execution even if error occurred SELECT \u0026#39;Insert attempt completed.\u0026#39; AS Status; END // DELIMITER ; Show Existing Stored Procedures SHOW PROCEDURE STATUS WHERE Db = \u0026#39;your_database\u0026#39;; Or to view the code:\nSHOW CREATE PROCEDURE procedure_name; ","permalink":"http://localhost:1313/posts/mysql/","summary":"\u003ch2 id=\"database\"\u003eDatabase\u003c/h2\u003e\n\u003cp\u003eDatabase is a collection of interrelated data.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA \u003cstrong\u003edatabase\u003c/strong\u003e is an organized collection of data that can be easily accessed, managed, and updated.\u003c/li\u003e\n\u003cli\u003eIt stores data in tables, rows, and columns, allowing efficient retrieval and manipulation.\u003c/li\u003e\n\u003cli\u003eExamples include MySQL, PostgreSQL, and MongoDB.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"dbms\"\u003eDBMS\u003c/h2\u003e\n\u003cp\u003eDBMS(Database Management System) is software used to create, manage, and organize databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA \u003cstrong\u003eDBMS\u003c/strong\u003e is software that manages and controls database operations like storing, retrieving, and updating data.\u003c/li\u003e\n\u003cli\u003eIt ensures data consistency, security, and integrity while providing an interface for users to interact with the database.\u003c/li\u003e\n\u003cli\u003eExamples include MySQL, Oracle, and Microsoft SQL Server. üöÄ\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"what-is-rdbms\"\u003eWhat is RDBMS\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eRDBMS (Relational Database Management System) - is a DBMS based on the concept of tables (also called relations).\u003c/li\u003e\n\u003cli\u003eData is organized into tables(also known as relations) with rows(records) and columns(attributes).\u003c/li\u003e\n\u003cli\u003eE.g., MySQL, PostgreSQL, SQL Server etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"sql\"\u003eSQL\u003c/h2\u003e\n\u003cp\u003eSQL is \u003cstrong\u003eStructured Query Language\u003c/strong\u003e - used to store, manipulate and retrieve data from RDBMS.\u003c/p\u003e","title":"Introduction to Databases - MySQL"},{"content":"Introduction to GSAP GSAP(Greensock Animation Platform) is a powerful JavaScript animation library that allows you to create high-performance animations for web applications. It is widely used for animating elements with precision and smoothness.\n2. Installing GSAP You can use GSAP in multiple ways:\nCDN\n\u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 3. Basic GSAP Syntax GSAP uses the .to(), .from(), and .fromTo() methods to animate elements.\ngsap.to() ‚Üí Animates from the current state to a new state. gsap.to(\u0026#34;.box\u0026#34;, { x: 200, duration: 1 }); gsap.from() ‚Üí Animates from a given state to the current state. gsap.from(\u0026#34;.box\u0026#34;, { opacity: 0, y: -50, duration: 1 }); gsap.fromTo() ‚Üí Specifies both the start and end states explicitly. gsap.fromTo(\u0026#34;.box\u0026#34;, { x: 0 }, { x: 300, duration: 1 }); 4. Key Properties x, y ‚Üí Move horizontally/vertically scale, scaleX, scaleY ‚Üí Scale size rotation, rotate ‚Üí Rotate element opacity ‚Üí Change transparency skewX, skewY ‚Üí Skew transformation stagger ‚Üí Create a delay between multiple elements Example\ngsap.to(\u0026#34;.box\u0026#34;, { x: 100, scale: 1.5, rotation: 360, duration: 2 }); 5. Timeline for Sequencing Animations GSAP‚Äôs gsap.timeline() helps chain animations in sequence.\nlet tl = gsap.timeline(); tl.to(\u0026#34;.box\u0026#34;, { x: 100, duration: 1 }) .to(\u0026#34;.box\u0026#34;, { y: 100, duration: 1 }) .to(\u0026#34;.box\u0026#34;, { rotation: 360, duration: 1 }); 6. Easing Functions Easing makes animations feel natural.\ngsap.to(\u0026#34;.box\u0026#34;, { x: 300, duration: 2, ease: \u0026#34;bounce.out\u0026#34; }); gsap.to(\u0026#34;.circle\u0026#34;, { y: -100, duration: 1, ease: \u0026#34;elastic.out(1, 0.3)\u0026#34; }); 7. Staggering Animations Use stagger to animate multiple elements with delay.\ngsap.to(\u0026#34;.boxes\u0026#34;, { y: 100, duration: 1, stagger: 0.2 }); 8. ScrollTrigger (GSAP Plugin) To trigger animations on scroll:\nCDN\n\u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Example:\ngsap.to(\u0026#34;.box\u0026#34;, { // Animates the element with class \u0026#34;box\u0026#34; x: 300, // Moves the element 300 pixels to the right duration: 2, // Animation lasts for 2 seconds scrollTrigger: { // Uses the ScrollTrigger plugin to trigger animation on scroll trigger: \u0026#34;.box\u0026#34;, // The animation starts when the \u0026#34;.box\u0026#34; element enters the viewport scroller: \u0026#34;body\u0026#34;, // Specifies the scrolling container (default is \u0026#34;body\u0026#34;) markers: true, // Displays visual markers (start and end points) for debugging start: \u0026#34;top 80%\u0026#34;, // Animation starts when the top of \u0026#34;.box\u0026#34; reaches 80% of the viewport height end: \u0026#34;top 30%\u0026#34;, // Animation ends when the top of \u0026#34;.box\u0026#34; reaches 30% of the viewport height scrub: true, // Makes the animation progress smoothly with scrolling } }); Explanation of ScrollTrigger Properties Property Description trigger Defines which element should trigger the animation when it enters/exits the viewport. scroller Specifies the scrollable container (default is body). Useful when working with scrollable divs. markers Adds visual markers to indicate where the animation starts and ends (for debugging). start Defines when the animation starts. \u0026quot;top 80%\u0026quot; means when the top of .box reaches 80% of the viewport height. end Defines when the animation ends. \u0026quot;top 30%\u0026quot; means when the top of .box reaches 30% of the viewport height. scrub Syncs the animation with the scroll position. If true, the animation plays forward and backward as the user scrolls. Delays the animation by 1 second, creating a smoother transition. if scrub is scrub: 2 it has range 1-5. pin The pin: true property locks (pins) an element in place while the user scrolls past it. Locomotive Locomotive Scroll is a powerful JavaScript library that provides smooth scrolling, parallax effects, and scroll-based animations. It enhances user experience by making scrolling feel more natural.\n1. Installation CDN (Easiest Way) Add this in your HTML file:\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/locomotive-scroll/dist/locomotive-scroll.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/locomotive-scroll/dist/locomotive-scroll.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; NPM/Yarn (Recommended for Projects) npm install locomotive-scroll 2. Basic Setup HTML Structure \u0026lt;body data-scroll-container\u0026gt; \u0026lt;div data-scroll-section\u0026gt; \u0026lt;h1 data-scroll data-scroll-speed=\u0026#34;2\u0026#34;\u0026gt;Smooth Scrolling\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; data-scroll-container ‚Üí Defines the scrollable container. data-scroll ‚Üí Enables scroll animations for elements. data-scroll-speed=\u0026quot;2\u0026quot; ‚Üí Adds a parallax effect. JavaScript Setup const scroll = new LocomotiveScroll({ el: document.querySelector(\u0026#34;[data-scroll-container]\u0026#34;), // Selects the scrollable container smooth: true, // Enables smooth scrolling lerp: 0.1, // Controls scroll smoothness (0 = instant, 1 = no smoothness) }); Key Features \u0026amp; Properties (1) Smooth Scrolling const scroll = new LocomotiveScroll({ el: document.querySelector(\u0026#34;[data-scroll-container]\u0026#34;), smooth: true, // Enables smooth scrolling smoothMobile: false, // Disable smooth scroll on mobile }); (2) Parallax Effects \u0026lt;h1 data-scroll data-scroll-speed=\u0026#34;3\u0026#34;\u0026gt;Parallax Effect\u0026lt;/h1\u0026gt; data-scroll-speed=\u0026quot;3\u0026quot; ‚Üí Moves the text at a different speed than the scroll. (3) Sticky Elements \u0026lt;div data-scroll data-scroll-sticky\u0026gt; \u0026lt;p\u0026gt;I\u0026#39;m sticky!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; data-scroll-sticky ‚Üí Keeps the element fixed while scrolling. (4) Scroll-based Animations scroll.on(\u0026#34;call\u0026#34;, (value, way) =\u0026gt; { if (value === \u0026#34;animate\u0026#34; \u0026amp;\u0026amp; way === \u0026#34;enter\u0026#34;) { document.querySelector(\u0026#34;.box\u0026#34;).classList.add(\u0026#34;active\u0026#34;); } }); Runs animations when an element enters/exits the viewport. (5) Scroll Events scroll.on(\u0026#34;scroll\u0026#34;, (instance) =\u0026gt; { console.log(instance.scroll.y); // Get current scroll position }); Triggers custom functions on scroll events. (6) Destroy \u0026amp; Rebuild Scroll scroll.destroy(); // Stops LocomotiveJS scroll.init(); // Re-initializes scrolling Useful when dynamically updating content. (7). LocomotiveJS with GSAP GSAP works great with LocomotiveJS for advanced animations.\nscroll.on(\u0026#34;scroll\u0026#34;, (args) =\u0026gt; { let progress = args.scroll.y / args.limit; gsap.to(\u0026#34;.progress-bar\u0026#34;, { scaleX: progress }); }); This creates a scroll progress bar animation. Summary Feature Usage Smooth Scrolling smooth: true in the JS setup Parallax Effect data-scroll-speed=\u0026quot;X\u0026quot; Sticky Sections data-scroll-sticky Scroll-based Animations scroll.on(\u0026quot;scroll\u0026quot;, callback) Integration with GSAP ScrollTrigger.scrollerProxy() ","permalink":"http://localhost:1313/posts/gsap-locomotive/","summary":"\u003ch2 id=\"introduction-to-gsap\"\u003eIntroduction to GSAP\u003c/h2\u003e\n\u003cp\u003eGSAP(Greensock Animation Platform) is a powerful JavaScript animation library that allows you to create high-performance animations for web applications. It is widely used for animating elements with precision and smoothness.\u003c/p\u003e\n\u003ch2 id=\"2-installing-gsap\"\u003e2. Installing GSAP\u003c/h2\u003e\n\u003cp\u003eYou can use GSAP in multiple ways:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCDN\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003escript\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003esrc\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003escript\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"3-basic-gsap-syntax\"\u003e3. Basic GSAP Syntax\u003c/h2\u003e\n\u003cp\u003eGSAP uses the \u003ccode\u003e.to()\u003c/code\u003e, \u003ccode\u003e.from()\u003c/code\u003e, and \u003ccode\u003e.fromTo()\u003c/code\u003e methods to animate elements.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003egsap.to()\u003c/code\u003e\u003c/strong\u003e ‚Üí Animates from the current state to a new state.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egsap.to(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;.box\u0026#34;\u003c/span\u003e, { x\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e200\u003c/span\u003e, duration\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003egsap.from()\u003c/code\u003e\u003c/strong\u003e ‚Üí Animates from a given state to the current state.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egsap.from(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;.box\u0026#34;\u003c/span\u003e, { opacity\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e, y\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#bd93f9\"\u003e50\u003c/span\u003e, duration\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003egsap.fromTo()\u003c/code\u003e\u003c/strong\u003e ‚Üí Specifies both the start and end states explicitly.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egsap.fromTo(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;.box\u0026#34;\u003c/span\u003e, { x\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e }, { x\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e300\u003c/span\u003e, duration\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"4-key-properties\"\u003e4. Key Properties\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ex, y\u003c/code\u003e ‚Üí Move horizontally/vertically\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003escale, scaleX, scaleY\u003c/code\u003e ‚Üí Scale size\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erotation, rotate\u003c/code\u003e ‚Üí Rotate element\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eopacity\u003c/code\u003e ‚Üí Change transparency\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eskewX, skewY\u003c/code\u003e ‚Üí Skew transformation\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estagger\u003c/code\u003e ‚Üí Create a delay between multiple elements\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eExample\u003c/em\u003e\u003c/p\u003e","title":"GSAP \u0026 Locomotive Scroll"},{"content":"DOM Manipulation in JavaScript DOM (Document Object Model) Manipulation in JavaScript refers to modifying HTML elements dynamically using JavaScript. This includes selecting, modifying, adding, or removing elements from the webpage.\nSelecting Elements in the DOM Before modifying elements, we need to select them. Here are the different ways:\nMethod Description Example document.getElementById(id) Selects an element by its ID document.getElementById(\u0026quot;myDiv\u0026quot;) document.getElementsByClassName(className) Selects elements by class name (returns an HTMLCollection) document.getElementsByClassName(\u0026quot;myClass\u0026quot;) document.getElementsByTagName(tagName) Selects elements by tag name (returns an HTMLCollection) document.getElementsByTagName(\u0026quot;p\u0026quot;) document.querySelector(selector) Selects the first element that matches the CSS selector document.querySelector(\u0026quot;.myClass\u0026quot;) document.querySelectorAll(selector) Selects all elements that match the CSS selector (returns a NodeList) document.querySelectorAll(\u0026quot;div\u0026quot;) Examples of Selection Methods 1. Selecting an Element by ID let title = document.getElementById(\u0026#34;main-title\u0026#34;); console.log(title.innerText); // Logs the text inside the element 2. Selecting Elements by Class Name let items = document.getElementsByClassName(\u0026#34;item\u0026#34;); console.log(items[0].innerText); // Logs the first element\u0026#39;s text 3. Selecting Elements by Tag Name let paragraphs = document.getElementsByTagName(\u0026#34;p\u0026#34;); console.log(paragraphs.length); // Logs the number of \u0026lt;p\u0026gt; elements 4. Selecting an Element Using querySelector() Returns only the first matching element.\nlet firstItem = document.querySelector(\u0026#34;.item\u0026#34;); // Selects the first `.item` console.log(firstItem.innerText); 5. Selecting Multiple Elements Using querySelectorAll() Returns a NodeList, supports .forEach().\nlet allItems = document.querySelectorAll(\u0026#34;.item\u0026#34;); // Selects all `.item` allItems.forEach((item) =\u0026gt; console.log(item.innerText)); innerHTML vs innerText vs textContent in JavaScript 1. innerHTML ‚úÖ Gets or sets the HTML content (including tags) inside an element.\n‚úÖ Parses and renders HTML if assigned.\n‚ùå Can expose security risks (XSS attacks) if inserting user input.\nlet h1 = document.querySelector(\u0026#34;h1\u0026#34;); h1.innerHTML += \u0026#34; \u0026lt;i\u0026gt;hello\u0026lt;/i\u0026gt;\u0026#34;; 2. innerText ‚úÖ Gets or sets only the visible text inside an element.\n‚úÖ Ignores hidden elements (like display: none;).\n‚ùå Does not retain HTML tags.\nlet h1 = document.querySelector(\u0026#34;h1\u0026#34;); h1.innerText += \u0026#34;Hack the Planat\u0026#34;; 3. textContent ‚úÖ Gets or sets all text (including hidden text) inside an element.\n‚úÖ Preserves whitespace and hidden elements (e.g., display: none;).\n‚ùå Does not interpret HTML tags.\nlet h1 = document.querySelector(\u0026#34;h1\u0026#34;); h1.textContent += \u0026#34; Hack the Planat\u0026#34;; Key Differences Between innerHTML, innerText, and textContent Property HTML Support Includes Hidden Text? Performance Security Risks? innerHTML ‚úÖ Supports HTML ‚úÖ Yes ‚ùå Slower (parses HTML) ‚ùå Vulnerable to XSS innerText ‚ùå No HTML ‚ùå No ‚úÖ Faster ‚úÖ Safe textContent ‚ùå No HTML ‚úÖ Yes ‚úÖ Fastest ‚úÖ Safe Manipulating Styles \u0026amp; Classes in JavaScript JavaScript allows us to dynamically change the styles and classes of HTML elements using:\nelement.style ‚Äì for inline styles element.classList ‚Äì for adding, removing, toggling, and checking classes 1. element.style (Manipulating Inline Styles) ‚úÖ Modifies individual CSS properties directly\n‚úÖ Only applies inline styles, does NOT affect CSS classes\n‚ùå Does not allow setting multiple styles at once using a string\n\u0026lt;div id=\u0026#34;box\u0026#34; style=\u0026#34;width: 100px; height: 100px; background: red;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;button onclick=\u0026#34;changeStyle()\u0026#34;\u0026gt;Change Style\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; function changeStyle() { let box = document.getElementById(\u0026#34;box\u0026#34;); box.style.backgroundColor = \u0026#34;blue\u0026#34;; // Change background color box.style.width = \u0026#34;200px\u0026#34;; // Change width box.style.height = \u0026#34;200px\u0026#34;; // Change height } \u0026lt;/script\u0026gt; ‚úÖ Before Clicking: Red box (100x100)\n‚úÖ After Clicking: Blue box (200x200)\n2. element.classList (Manipulating Classes) ‚úÖ Adds, removes, toggles, and checks classes efficiently\n‚úÖ Does NOT override existing styles like style does\nMethods of classList Method Description Example add(className) Adds a class element.classList.add(\u0026quot;new-class\u0026quot;) remove(className) Removes a class element.classList.remove(\u0026quot;old-class\u0026quot;) toggle(className) Toggles a class (adds if not present, removes if present) element.classList.toggle(\u0026quot;active\u0026quot;) contains(className) Checks if a class exists element.classList.contains(\u0026quot;hidden\u0026quot;) replace(oldClass, newClass) Replaces an old class with a new one element.classList.replace(\u0026quot;old\u0026quot;, \u0026quot;new\u0026quot;) \u0026lt;style\u0026gt; .box { width: 100px; height: 100px; background: red; } .big { width: 200px; height: 200px; } .blue { background: blue; } \u0026lt;/style\u0026gt; \u0026lt;div id=\u0026#34;box\u0026#34; class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSize()\u0026#34;\u0026gt;Toggle Size\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;toggleColor()\u0026#34;\u0026gt;Toggle Color\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; let box = document.getElementById(\u0026#34;box\u0026#34;); function toggleSize() { box.classList.toggle(\u0026#34;big\u0026#34;); // Toggles between small and big size } function toggleColor() { box.classList.toggle(\u0026#34;blue\u0026#34;); // Toggles background color } \u0026lt;/script\u0026gt; Creating and Deleting Elements in JavaScript DOM Manipulation Once you\u0026rsquo;ve selected elements in the DOM, the next step in DOM manipulation is creating new elements and removing existing ones dynamically.\ndocument.createElement(tagName) ‚Üí Creates a new element parent.appendChild(childElement) ‚Üí Adds an element inside another element parent.removeChild(childElement) ‚Üí Removes a child element from its parent Creating Elements ‚Äì document.createElement() ‚úÖ Creates a new element in memory (not yet visible in the DOM).\n‚úÖ You can set attributes, styles, and inner content before adding it to the DOM.\n‚ùå Must be appended manually to be visible in the DOM.\nconst newDiv = document.createElement(\u0026#39;div\u0026#39;); // Creates a \u0026lt;div\u0026gt; element newDiv.textContent = \u0026#34;Hello, this is a new div!\u0026#34;; // Adds text inside the div newDiv.classList.add(\u0026#39;new-class\u0026#39;); // Adds a class to the div console.log(newDiv); // Logs the newly created \u0026lt;div\u0026gt; Appending Elements ‚Äì appendChild() ‚úÖ Inserts a new child element inside a parent. ‚úÖ Moves elements if they already exist (won\u0026rsquo;t duplicate them).\nconst parent = document.getElementById(\u0026#39;container\u0026#39;); // Select an existing parent element parent.appendChild(newDiv); // Adds the new div inside the parent element insertBefore() ‚Äì Insert Before a Specific Element Inserts a new element before an existing child element.\nconst firstChild = parent.firstElementChild; // Get the first child of the parent parent.insertBefore(newDiv, firstChild); // Insert newDiv before the first child Removing Elements ‚Äì removeChild() ‚úÖ Deletes a child element from its parent.\n‚ùå If the element does not exist inside the parent, it throws an error.\nparent.removeChild(firstChild); // Removes the first child from the parent Removing an Element Directly (remove()) Instead of removeChild(), you can use element.remove() (modern method).\nnewDiv.remove(); // Removes the newly created \u0026lt;div\u0026gt; Summary Action Method Create an element document.createElement('tag') Add an element inside another appendChild(element), append(element) Insert before another element insertBefore(newElement, existingChild) Remove an element from the DOM removeChild(element), remove() What is addEventListener() An event listener is a method that allows you to wait for a specific event (like a click, keypress, hover, etc.) and run a function when the event occurs.\nelement.addEventListener(event, function, useCapture); Parameter Description event The type of event (e.g., \u0026quot;click\u0026quot;, \u0026quot;mouseover\u0026quot;, \u0026quot;keydown\u0026quot;) function The function to run when the event occurs useCapture (optional) true for event capturing, false for bubbling (default: false) Basic Example: Click Event\n\u0026lt;button id=\u0026#34;myBtn\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#34;myBtn\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function() { alert(\u0026#34;Button Clicked!\u0026#34;); }); \u0026lt;/script\u0026gt; Removing an Event Listener with removeEventListener() To remove an event, you must use a named function.\n\u0026lt;button id=\u0026#34;myBtn\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;remove\u0026#34;\u0026gt;Remove Event\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; function showAlert() { alert(\u0026#34;Button Clicked!\u0026#34;); } let btn = document.getElementById(\u0026#34;myBtn\u0026#34;); btn.addEventListener(\u0026#34;click\u0026#34;, showAlert); document.getElementById(\u0026#34;remove\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function() { btn.removeEventListener(\u0026#34;click\u0026#34;, showAlert); // Removes event }); \u0026lt;/script\u0026gt; Event Object (event) Every event passes an event object (e) that gives details about the event.\n\u0026lt;button id=\u0026#34;btn\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#34;btn\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function(event) { console.log(\u0026#34;Event Type:\u0026#34;, event.type); console.log(\u0026#34;Clicked Element:\u0026#34;, event.target); console.log(\u0026#34;Mouse Coordinates:\u0026#34;, event.clientX, event.clientY); }); \u0026lt;/script\u0026gt; JavaScript Events ‚Äì Cheat Sheet Category Event Description üñ±Ô∏è Mouse Events click Fires when an element is clicked dblclick Fires when an element is double-clicked mousedown Fires when a mouse button is pressed down mouseup Fires when a mouse button is released mousemove Fires when the mouse moves over an element mouseenter Fires when the mouse enters an element (does not bubble) mouseleave Fires when the mouse leaves an element (does not bubble) mouseover Fires when the mouse enters an element or its children (bubbles) mouseout Fires when the mouse leaves an element or its children (bubbles) contextmenu Fires when the right mouse button is clicked (opens the context menu) ‚å®Ô∏è Keyboard Events keydown Fires when any key is pressed down (includes special keys like Shift, Enter) keyup Fires when a key is released keypress (deprecated) Fires when a key is pressed (only for character keys) üìù Form Events submit Fires when a form is submitted change Fires when an input/select field value changes input Fires when the user types in an input field focus Fires when an element gains focus blur Fires when an element loses focus reset Fires when a form is reset üåç Window/Document Events load Fires when the entire page has loaded (including images) DOMContentLoaded Fires when the HTML document is fully loaded (before images \u0026amp; stylesheets) resize Fires when the window is resized scroll Fires when the user scrolls the page unload Fires when the user leaves the page beforeunload Fires when the user is about to leave the page (can show a confirmation) visibilitychange Fires when the page visibility changes (e.g., switching tabs) üìã Clipboard Events copy Fires when content is copied cut Fires when content is cut paste Fires when content is pasted üèóÔ∏è Drag \u0026amp; Drop Events drag Fires when an element is being dragged dragstart Fires when dragging starts dragend Fires when dragging ends dragover Fires when a dragged element is over a valid drop target dragenter Fires when a dragged element enters a drop target dragleave Fires when a dragged element leaves a drop target drop Fires when a dragged element is dropped üéµüìΩÔ∏è Media Events play Fires when media (audio/video) starts playing pause Fires when media is paused ended Fires when media reaches the end volumechange Fires when the volume is changed timeupdate Fires when the current playback position changes üëÄ Focus \u0026amp; Blur Events focus Fires when an element gains focus blur Fires when an element loses focus üì± Touch Events (Mobile) touchstart Fires when a touch point is placed on the screen touchmove Fires when a touch point moves across the screen touchend Fires when a touch point is removed from the screen ‚ö° Other Useful Events error Fires when an error occurs while loading an image, script, or resource online Fires when the browser goes online offline Fires when the browser goes offline hashchange Fires when the URL hash changes (window.location.hash) ","permalink":"http://localhost:1313/posts/dom-js/","summary":"\u003ch1 id=\"dom-manipulation-in-javascript\"\u003eDOM Manipulation in JavaScript\u003c/h1\u003e\n\u003cp\u003eDOM (Document Object Model) Manipulation in JavaScript refers to \u003cstrong\u003emodifying HTML elements dynamically\u003c/strong\u003e using JavaScript. This includes \u003cstrong\u003eselecting, modifying, adding, or removing elements\u003c/strong\u003e from the webpage.\u003c/p\u003e\n\u003ch2 id=\"selecting-elements-in-the-dom\"\u003eSelecting Elements in the DOM\u003c/h2\u003e\n\u003cp\u003eBefore modifying elements, we need to \u003cstrong\u003eselect\u003c/strong\u003e them. Here are the different ways:\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003cstrong\u003eMethod\u003c/strong\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementById(id)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects an element by its \u003cstrong\u003eID\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementById(\u0026quot;myDiv\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByClassName(className)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects elements by \u003cstrong\u003eclass name\u003c/strong\u003e (returns an HTMLCollection)\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByClassName(\u0026quot;myClass\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByTagName(tagName)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects elements by \u003cstrong\u003etag name\u003c/strong\u003e (returns an HTMLCollection)\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByTagName(\u0026quot;p\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelector(selector)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects \u003cstrong\u003ethe first\u003c/strong\u003e element that matches the CSS selector\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelector(\u0026quot;.myClass\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelectorAll(selector)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects \u003cstrong\u003eall\u003c/strong\u003e elements that match the CSS selector (returns a NodeList)\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelectorAll(\u0026quot;div\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"examples-of-selection-methods\"\u003eExamples of Selection Methods\u003c/h2\u003e\n\u003ch3 id=\"1-selecting-an-element-by-id\"\u003e1. Selecting an Element by ID\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e title \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edocument\u003c/span\u003e.getElementById(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;main-title\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole.log(title.innerText); \u003cspan style=\"color:#6272a4\"\u003e// Logs the text inside the element\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-selecting-elements-by-class-name\"\u003e2. Selecting Elements by Class Name\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e items \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edocument\u003c/span\u003e.getElementsByClassName(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;item\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole.log(items[\u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e].innerText); \u003cspan style=\"color:#6272a4\"\u003e// Logs the first element\u0026#39;s text\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-selecting-elements-by-tag-name\"\u003e3. Selecting Elements by Tag Name\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e paragraphs \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edocument\u003c/span\u003e.getElementsByTagName(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;p\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole.log(paragraphs.length); \u003cspan style=\"color:#6272a4\"\u003e// Logs the number of \u0026lt;p\u0026gt; elements\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"4-selecting-an-element-using-queryselector\"\u003e4. Selecting an Element Using querySelector()\u003c/h3\u003e\n\u003cp\u003eReturns \u003cstrong\u003eonly the first matching\u003c/strong\u003e element.\u003c/p\u003e","title":"DOM Manipulation in JavaScript"},{"content":"Arrays Objects allow you to store keyed collections of values. That‚Äôs fine.\nBut quite often we find that we need an¬†ordered collection, where we have a 1st, a 2nd, a 3rd element and so on. For example, we need that to store a list of something: users, goods, HTML elements etc.\nIt is not convenient to use an object here, because it provides no methods to manage the order of elements. We can‚Äôt insert a new property ‚Äúbetween‚Äù the existing ones. Objects are just not meant for such use.\nThere exists a special data structure named¬†Array, to store ordered collections.\nDeclaration There are two syntaxes for creating an empty array:\nlet arr = new Array(); let arr = []; Almost all the time, the second syntax is used. We can supply initial elements in the brackets:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; Array elements are numbered, starting with zero.\nWe can get an element by its number in square brackets:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits[0] ); // Apple alert( fruits[1] ); // Orange alert( fruits[2] ); // Plum We can replace an element:\nfruits[2] = \u0026#39;Pear\u0026#39;; // now [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;] ‚Ä¶Or add a new one to the array:\nfruits[3] = \u0026#39;Lemon\u0026#39;; // now [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;, \u0026#34;Lemon\u0026#34;] The total count of the elements in the array is its¬†length:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits.length ); // 3 We can also use alert to show the whole array.\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits ); // Apple,Orange,Plum An array can store elements of any type.\nFor instance:\n// mix of values let arr = [ \u0026#39;Apple\u0026#39;, { name: \u0026#39;John\u0026#39; }, true, function() { alert(\u0026#39;hello\u0026#39;); } ]; // get the object at index 1 and then show its name alert( arr[1].name ); // John // get the function at index 3 and run it arr[3](); // hello Get last elements with ‚Äúat‚Äù Let‚Äôs say we want the last element of the array.\nSome programming languages allow the use of negative indexes for the same purpose, like¬†fruits[-1].\nAlthough, in JavaScript it won‚Äôt work. The result will be¬†undefined, because the index in square brackets is treated literally.\nWe can explicitly calculate the last element index and then access it:¬†fruits[fruits.length - 1].\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits[fruits.length-1] ); // Plum A bit cumbersome, isn‚Äôt it? We need to write the variable name twice.\nLuckily, there‚Äôs a shorter syntax:¬†fruits.at(-1):\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; // same as fruits[fruits.length-1] alert( fruits.at(-1) ); // Plum In other words,¬†arr.at(i):\nis exactly the same as¬†arr[i], if¬†i \u0026gt;= 0. for negative values of¬†i, it steps back from the end of the array. Methods pop/push, shift/unshift A¬†queue¬†is one of the most common uses of an array. In computer science, this means an ordered collection of elements which supports two operations:\npush¬†appends an element to the end. shift¬†get an element from the beginning, advancing the queue, so that the 2nd element becomes the 1st. Arrays support both operations.\nIn practice we need it very often. For example, a queue of messages that need to be shown on-screen.\nThere‚Äôs another use case for arrays ‚Äì the data structure named¬†stack.\nIt supports two operations:\npush¬†adds an element to the end. pop¬†takes an element from the end. So new elements are added or taken always from the ‚Äúend‚Äù.\nA stack is usually illustrated as a pack of cards: new cards are added to the top or taken from the top:\nFor stacks, the latest pushed item is received first, that‚Äôs also called LIFO (Last-In-First-Out) principle. For queues, we have FIFO (First-In-First-Out).\nArrays in JavaScript can work both as a queue and as a stack. They allow you to add/remove elements, both to/from the beginning or the end.\nIn computer science, the data structure that allows this, is called¬†deque.\nMethods that work with the end of the array:\npop\nExtracts the last element of the array and returns it:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; alert( fruits.pop() ); // remove \u0026#34;Pear\u0026#34; and alert it alert( fruits ); // Apple, Orange Both¬†fruits.pop()¬†and¬†fruits.at(-1)¬†return the last element of the array, but¬†fruits.pop()¬†also modifies the array by removing it.\npush\nAppend the element to the end of the array:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;]; fruits.push(\u0026#34;Pear\u0026#34;); alert( fruits ); // Apple, Orange, Pear The call¬†fruits.push(...)¬†is equal to¬†fruits[fruits.length] = ....\nMethods that work with the beginning of the array:\nshift\nExtracts the first element of the array and returns it:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; alert( fruits.shift() ); // remove Apple and alert it alert( fruits ); // Orange, Pear unshift\nAdd the element to the beginning of the array:\nlet fruits = [\u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; fruits.unshift(\u0026#39;Apple\u0026#39;); alert( fruits ); // Apple, Orange, Pear Methods¬†push¬†and¬†unshift¬†can add multiple elements at once:\nlet fruits = [\u0026#34;Apple\u0026#34;]; fruits.push(\u0026#34;Orange\u0026#34;, \u0026#34;Peach\u0026#34;); fruits.unshift(\u0026#34;Pineapple\u0026#34;, \u0026#34;Lemon\u0026#34;); // [\u0026#34;Pineapple\u0026#34;, \u0026#34;Lemon\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Peach\u0026#34;] alert( fruits ); Objects As we know from the chapter¬†Data types, there are eight data types in JavaScript. Seven of them are called ‚Äúprimitive‚Äù, because their values contain only a single thing (be it a string or a number or whatever).\nIn contrast, objects are used to store keyed collections of various data and more complex entities. In JavaScript, objects penetrate almost every aspect of the language. So we must understand them first before going in-depth anywhere else.\nAn object can be created with figure brackets¬†{‚Ä¶}¬†with an optional list of¬†properties. A property is a ‚Äúkey: value‚Äù pair, where¬†key¬†is a string (also called a ‚Äúproperty name‚Äù), and¬†value¬†can be anything.\nWe can imagine an object as a cabinet with signed files. Every piece of data is stored in its file by the key. It‚Äôs easy to find a file by its name or add/remove a file.\nAn empty object (‚Äúempty cabinet‚Äù) can be created using one of two syntaxes:\nlet user = new Object(); // \u0026#34;object constructor\u0026#34; syntax let user = {}; // \u0026#34;object literal\u0026#34; syntax Usually, the figure brackets¬†{...}¬†are used. That declaration is called an¬†object literal.\nLiterals and properties We can immediately put some properties into¬†{...}¬†as ‚Äúkey: value‚Äù pairs:\nlet user = { // an object name: \u0026#34;John\u0026#34;, // by key \u0026#34;name\u0026#34; store value \u0026#34;John\u0026#34; age: 30 // by key \u0026#34;age\u0026#34; store value 30 }; A property has a key (also known as ‚Äúname‚Äù or ‚Äúidentifier‚Äù) before the colon¬†\u0026quot;:\u0026quot;¬†and a value to the right of it.\nIn the¬†user¬†object, there are two properties:\nThe first property has the name¬†\u0026quot;name\u0026quot;¬†and the value¬†\u0026quot;John\u0026quot;. The second one has the name¬†\u0026quot;age\u0026quot;¬†and the value¬†30. The resulting¬†user¬†object can be imagined as a cabinet with two signed files labeled ‚Äúname‚Äù and ‚Äúage‚Äù.\nWe can add, remove and read files from it at any time.\nProperty values are accessible using the dot notation:\n// get property values of the object: alert( user.name ); // John alert( user.age ); // 30 The value can be of any type. Let‚Äôs add a boolean one:\nuser.isAdmin = true To remove a property, we can use the¬†delete¬†operator:\ndelete user.age; We can also use multiword property names, but then they must be quoted:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, \u0026#34;likes birds\u0026#34;: true // multiword property name must be quoted }; The last property in the list may end with a comma:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, } That is called a ‚Äútrailing‚Äù or ‚Äúhanging‚Äù comma. Makes it easier to add/remove/move around properties, because all lines become alike.\nSquare brackets For multiword properties, the dot access doesn‚Äôt work:\n// this would give a syntax error user.likes birds = true JavaScript doesn‚Äôt understand that. It thinks that we address¬†user.likes, and then gives a syntax error when comes across unexpected¬†birds.\nThe dot requires the key to be a valid variable identifier. That implies: contains no spaces, doesn‚Äôt start with a digit and doesn‚Äôt include special characters ($¬†and¬†_¬†are allowed).\nThere‚Äôs an alternative ‚Äúsquare bracket notation‚Äù that works with any string:\nlet user = {}; // set user[\u0026#34;likes birds\u0026#34;] = true; // get alert(user[\u0026#34;likes birds\u0026#34;]); // true // delete delete user[\u0026#34;likes birds\u0026#34;]; Now everything is fine. Please note that the string inside the brackets is properly quoted (any type of quotes will do).\nSquare brackets also provide a way to obtain the property name as the result of any expression ‚Äì as opposed to a literal string ‚Äì like from a variable as follows:\nlet key = \u0026#34;likes birds\u0026#34;; // same as user[\u0026#34;likes birds\u0026#34;] = true; user[key] = true; Here, the variable¬†key¬†may be calculated at run-time or depend on the user input. And then we use it to access the property. That gives us a great deal of flexibility.\nFor instance:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; let key = prompt(\u0026#34;What do you want to know about the user?\u0026#34;, \u0026#34;name\u0026#34;); // access by variable alert( user[key] ); // John (if enter \u0026#34;name\u0026#34;) The dot notation cannot be used in a similar way:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; let key = \u0026#34;name\u0026#34;; alert( user.key ) // undefined Computed properties We can use square brackets in an object literal, when creating an object. That‚Äôs called¬†computed properties.\nFor instance:\nlet fruit = prompt(\u0026#34;Which fruit to buy?\u0026#34;, \u0026#34;apple\u0026#34;); let bag = { [fruit]: 5, // the name of the property is taken from the variable fruit }; alert( bag.apple ); // 5 if fruit=\u0026#34;apple\u0026#34; The meaning of a computed property is simple:¬†[fruit]¬†means that the property name should be taken from¬†fruit.\nSo, if a visitor enters¬†\u0026quot;apple\u0026quot;,¬†bag¬†will become¬†{apple: 5}.\nEssentially, that works the same as:\nlet fruit = prompt(\u0026#34;Which fruit to buy?\u0026#34;, \u0026#34;apple\u0026#34;); let bag = {}; // take property name from the fruit variable bag[fruit] = 5; ‚Ä¶But looks nicer.\nWe can use more complex expressions inside square brackets:\nlet fruit = \u0026#39;apple\u0026#39;; let bag = { [fruit + \u0026#39;Computers\u0026#39;]: 5 // bag.appleComputers = 5 }; Square brackets are much more powerful than dot notation. They allow any property names and variables. But they are also more cumbersome to write.\nSo most of the time, when property names are known and simple, the dot is used. And if we need something more complex, then we switch to square brackets.\nProperty value shorthand In real code, we often use existing variables as values for property names.\nFor instance:\nfunction makeUser(name, age) { return { name: name, age: age, // ...other properties }; } let user = makeUser(\u0026#34;John\u0026#34;, 30); alert(user.name); // John variable is so common, that there‚Äôs a special¬†property value shorthand¬†to make it shorter.\nInstead of¬†name:name¬†we can just write¬†name, like this:\nfunction makeUser(name, age) { return { name, // same as name: name age, // same as age: age // ... }; } We can use both normal properties and shorthands in the same object:\nlet user = { name, // same as name:name age: 30 }; Property names limitations As we already know, a variable cannot have a name equal to one of the language-reserved words like ‚Äúfor‚Äù, ‚Äúlet‚Äù, ‚Äúreturn‚Äù etc.\nBut for an object property, there‚Äôs no such restriction:\n// these properties are all right let obj = { for: 1, let: 2, return: 3 }; alert( obj.for + obj.let + obj.return ); // 6 In short, there are no limitations on property names. They can be any strings or symbols (a special type for identifiers, to be covered later).\nOther types are automatically converted to strings.\nFor instance, a number¬†0¬†becomes a string¬†\u0026quot;0\u0026quot;¬†when used as a property key:\nlet obj = { 0: \u0026#34;test\u0026#34; // same as \u0026#34;0\u0026#34;: \u0026#34;test\u0026#34; }; // both alerts access the same property (the number 0 is converted to string \u0026#34;0\u0026#34;) alert( obj[\u0026#34;0\u0026#34;] ); // test alert( obj[0] ); // test (same property) Property existence test, ‚Äúin‚Äù operator A notable feature of objects in JavaScript, compared to many other languages, is that it‚Äôs possible to access any property. There will be no error if the property doesn‚Äôt exist!\nReading a non-existing property just returns undefined. So we can easily test whether the property exists:\nlet user = {}; alert( user.noSuchProperty === undefined ); // true means \u0026#34;no such property\u0026#34; There‚Äôs also a special operator¬†\u0026quot;in\u0026quot;¬†for that.\nThe syntax is:\n\u0026#34;key\u0026#34; in object For instance:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; alert( \u0026#34;age\u0026#34; in user ); // true, user.age exists alert( \u0026#34;blabla\u0026#34; in user ); // false, user.blabla doesn\u0026#39;t exist Please note that on the left side of¬†in¬†there must be a¬†property name. That‚Äôs usually a quoted string.\nIf we omit quotes, that means a variable should contain the actual name to be tested. For instance:\nlet user = { age: 30 }; let key = \u0026#34;age\u0026#34;; alert( key in user ); // true, property \u0026#34;age\u0026#34; exists Why does the¬†in¬†operator exist? Isn‚Äôt it enough to compare against¬†undefined?\nWell, most of the time the comparison with¬†undefined¬†works fine. But there‚Äôs a special case when it fails, but¬†\u0026quot;in\u0026quot;¬†works correctly.\nIt‚Äôs when an object property exists, but stores¬†undefined:\nlet obj = { test: undefined }; alert( obj.test ); // it\u0026#39;s undefined, so - no such property? alert( \u0026#34;test\u0026#34; in obj ); // true, the property does exist! In the code above, the property¬†obj.test¬†technically exists. So the¬†in¬†operator works right.\nSituations like this happen very rarely, because¬†undefined¬†should not be explicitly assigned. We mostly use¬†null¬†for ‚Äúunknown‚Äù or ‚Äúempty‚Äù values. So the¬†in¬†operator is an exotic guest in the code.\nThe \u0026ldquo;for..in\u0026rdquo; loop To walk over all keys of an object, there exists a special form of the loop:¬†for..in. This is a completely different thing from the¬†for(;;)¬†construct that we studied before.\nThe syntax:\nfor (key in object) { // executes the body for each key among object properties } For instance, let‚Äôs output all properties of¬†user:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, isAdmin: true }; for (let key in user) { // keys alert( key ); // name, age, isAdmin // values for the keys alert( user[key] ); // John, 30, true } Note that all ‚Äúfor‚Äù constructs allow us to declare the looping variable inside the loop, like¬†let key¬†here.\nAlso, we could use another variable name here instead of¬†key. For instance,¬†\u0026quot;for (let prop in obj)\u0026quot;¬†is also widely used.\nObject methods, \u0026ldquo;this\u0026rdquo; ‚Äúthis‚Äù in methods It‚Äôs common that an object method needs to access the information stored in the object to do its job.\nFor instance, the code inside¬†user.sayHi()¬†may need the name of the¬†user.\nTo access the object, a method can use the¬†this¬†keyword.\nThe value of¬†this¬†is the object ‚Äúbefore dot‚Äù, the one used to call the method.\nFor instance:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, sayHi() { // \u0026#34;this\u0026#34; is the \u0026#34;current object\u0026#34; alert(this.name); } }; user.sayHi(); // John Here during the execution of¬†user.sayHi(), the value of¬†this¬†will be¬†user.\nTechnically, it‚Äôs also possible to access the object without¬†this, by referencing it via the outer variable:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, sayHi() { alert(user.name); // \u0026#34;user\u0026#34; instead of \u0026#34;this\u0026#34; } }; ‚Äúthis‚Äù is not bound In JavaScript, keyword¬†this¬†behaves unlike most other programming languages. It can be used in any function, even if it‚Äôs not a method of an object.\nThere‚Äôs no syntax error in the following example:\nfunction sayHi() { alert( this.name ); } The value of¬†this¬†is evaluated during the run-time, depending on the context.\nFor instance, here the same function is assigned to two different objects and has different ‚Äúthis‚Äù in the calls:\nlet user = { name: \u0026#34;John\u0026#34; }; let admin = { name: \u0026#34;Admin\u0026#34; }; function sayHi() { alert( this.name ); } // use the same function in two objects user.f = sayHi; admin.f = sayHi; // these calls have different this // \u0026#34;this\u0026#34; inside the function is the object \u0026#34;before the dot\u0026#34; user.f(); // John (this == user) admin.f(); // Admin (this == admin) admin[\u0026#39;f\u0026#39;](); // Admin (dot or square brackets access the method ‚Äì doesn\u0026#39;t matter) Arrow functions have no ‚Äúthis‚Äù Arrow functions are special: they don‚Äôt have their ‚Äúown‚Äù this. If we reference this from such a function, it‚Äôs taken from the outer ‚Äúnormal‚Äù function.\nFor instance, here arrow() uses this from the outer user.sayHi() method:\nlet user = { firstName: \u0026#34;Ilya\u0026#34;, sayHi() { let arrow = () =\u0026gt; alert(this.firstName); arrow(); } }; user.sayHi(); // Ilya That‚Äôs a special feature of arrow functions, it‚Äôs useful when we actually do not want to have a separate¬†this, but rather to take it from the outer context. Later in the chapter¬†Arrow functions revisited¬†we‚Äôll go more deeply into arrow functions.\nSummary Functions that are stored in object properties are called ‚Äúmethods‚Äù. Methods allow objects to ‚Äúact‚Äù like¬†object.doSomething(). Methods can reference the object as¬†this. The value of¬†this¬†is defined at run-time.\nWhen a function is declared, it may use¬†this, but that¬†this¬†has no value until the function is called. A function can be copied between objects. When a function is called in the ‚Äúmethod‚Äù syntax:¬†object.method(), the value of¬†this¬†during the call is¬†object. Please note that arrow functions are special: they have no¬†this. When¬†this¬†is accessed inside an arrow function, it is taken from outside.\nKey Points In Global Scope the value of this is window. In function the value of this is window In Method the value of this is object function inside the method es5(deceleration function) the value of this is window. function inside the method es6(expression function) the value of this is object. the value of this in constructor function is blank object. In event listener value of this will be according to the element. call/apply/bind call There‚Äôs a special built-in function method¬†func.call(context, ‚Ä¶args)¬†that allows to call a function explicitly setting¬†this.\nThe syntax is:\nfunc.call(context, arg1, arg2, ...) It runs¬†func¬†providing the first argument as¬†this, and the next as the arguments.\nTo put it simply, these two calls do almost the same:\nfunc(1, 2, 3); func.call(obj, 1, 2, 3) They both call¬†func¬†with arguments¬†1,¬†2¬†and¬†3. The only difference is that¬†func.call¬†also sets¬†this¬†to¬†obj.\nAs an example, in the code below we call¬†sayHi¬†in the context of different objects:¬†sayHi.call(user)¬†runs¬†sayHi¬†providing¬†this=user, and the next line sets¬†this=admin:\nfunction sayHi() { alert(this.name); } let user = { name: \u0026#34;John\u0026#34; }; let admin = { name: \u0026#34;Admin\u0026#34; }; // use call to pass different objects as \u0026#34;this\u0026#34; sayHi.call( user ); // John sayHi.call( admin ); // Admin apply Instead of¬†func.call(this, ...arguments)¬†we could use¬†func.apply(this, arguments).\nThe syntax of built-in method¬†func.apply¬†is:\nfunc.apply(context, args) It runs the¬†func¬†setting¬†this=context¬†and using an array-like object¬†args¬†as the list of arguments.\nThe only syntax difference between¬†call¬†and¬†apply¬†is that¬†call¬†expects a list of arguments, while¬†apply¬†takes an array-like object with them.\nSo these two calls are almost equivalent:\nfunc.call(context, ...args); func.apply(context, args); Example:\nfunction func(a, b, c) { console.log(this, a, b, c); } func.call(obj, [1, 2, 3]); bind() The¬†bind()¬†method of¬†Function¬†instances creates a new function that, when called, calls this function with its¬†this¬†keyword set to the provided value, and a given sequence of arguments preceding any provided when the new function is called.\nIt does not call function. It just return another function that we can store in variable to call it\nfunction func() { console.log(this); } let n = func.bind(\u0026#34;ahmad\u0026#34;); n(); Prototypal inheritance In JavaScript, objects have a special hidden property¬†[[Prototype]]¬†(as named in the specification), that is either¬†null¬†or references another object. That object is called ‚Äúa prototype‚Äù:\nWhen we read a property from¬†object, and it‚Äôs missing, JavaScript automatically takes it from the prototype. In programming, this is called ‚Äúprototypal inheritance‚Äù. And soon we‚Äôll study many examples of such inheritance, as well as cooler language features built upon it.\nThe property¬†[[Prototype]]¬†is internal and hidden, but there are many ways to set it.\nPrototypal inheritance in JavaScript is a mechanism that allows objects to inherit properties and methods from other objects. Instead of using classes like in classical inheritance (as in Java or C++), JavaScript uses prototypes.\nfunction makeHuman(name,age){ this.name = name; this.age = age; } makeHuman.prototype.greet = 12; makeHuman.prototype.func = function(){ console.log(this.name); } let human1 = new makeHuman(\u0026#34;ahmad\u0026#34;,20); let human2 = new makeHuman(\u0026#34;ali\u0026#34;,30); How It Works: Every JavaScript object has an internal property called [[Prototype]], which points to another object.\nWhen you try to access a property or method on an object, JavaScript first looks for it on the object itself.\nIf the property/method is not found, JavaScript looks up the prototype chain until it either finds the property or reaches null.\nThe value of ‚Äúthis‚Äù An interesting question may arise in the example above: what‚Äôs the value of¬†this¬†inside¬†set fullName(value)? Where are the properties¬†this.name¬†and¬†this.surname¬†written: into¬†user¬†or¬†admin?\nThe answer is simple:¬†this¬†is not affected by prototypes at all.\nNo matter where the method is found: in an object or its prototype. In a method call,¬†this¬†is always the object before the dot.\nSo, the setter call¬†admin.fullName=¬†uses¬†admin¬†as¬†this, not¬†user.\nThat is actually a super-important thing, because we may have a big object with many methods, and have objects that inherit from it. And when the inheriting objects run the inherited methods, they will modify only their own states, not the state of the big object.\nClosures in JS A closure in JavaScript is a function that remembers the variables from its lexical scope, even when the function is executed outside that scope.\nHow It Works: When a function is created inside another function, it captures the outer function‚Äôs variables, even after the outer function has finished executing.\nfunction counter() { let count = 0; return function() { count++; console.log(count); }; } const increment = counter(); increment(); // 1 increment(); // 2 What is an Event Listener in JavaScript? An event listener is a method that allows you to wait for a specific event (like a click, keypress, hover, etc.) and run a function when the event occurs.\n‚úÖ Example of addEventListener() document.getElementById(\u0026#34;btn\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function() { console.log(\u0026#34;Button Clicked!\u0026#34;); }); Here, addEventListener(\u0026quot;click\u0026quot;, function) listens for a click event on the button with id=\u0026quot;btn\u0026quot;. When clicked, it logs \u0026quot;Button Clicked!\u0026quot;. Common Events Event Description click When an element is clicked mouseover When the mouse hovers over an element keydown When a key is pressed submit When a form is submitted What is querySelector in JavaScript? querySelector() is a method used to select an element from the DOM using CSS selectors.\nExample of querySelector() const heading = document.querySelector(\u0026#34;h1\u0026#34;); // Selects the first `\u0026lt;h1\u0026gt;` element heading.style.color = \u0026#34;red\u0026#34;; // Changes its color to red Selecting Elements document.querySelector(\u0026#34;#myId\u0026#34;); // Selects an element by ID document.querySelector(\u0026#34;.myClass\u0026#34;); // Selects the first element with this class document.querySelector(\u0026#34;p\u0026#34;); // Selects the first \u0026lt;p\u0026gt; element Event Delegation in JavaScript Event Delegation is a pattern that allows you to handle events efficiently by attaching a single event listener to a parent element instead of adding multiple listeners to child elements.\nü§î Why Use Event Delegation? ‚úÖ Better Performance ‚Üí Avoids adding multiple event listeners.\n‚úÖ Handles Dynamic Elements ‚Üí Works even for elements added later via JavaScript.\n‚úÖ Less Memory Usage ‚Üí Reduces the number of event listeners.\nExample\nlet parent = document.querySelector(\u0026#34;#parent\u0026#34;); parent.addEventListener(\u0026#34;click\u0026#34;, function (ev) { if (ev.target.id === \u0026#34;play\u0026#34;) { console.log(\u0026#34;Play Song\u0026#34;); } else if (ev.target.id === \u0026#34;pause\u0026#34;) { console.log(\u0026#34;Pause Song\u0026#34;); } }); When Should You Use Event Delegation? Handling clicks on lists, tables, menus, or dynamically added elements. Handling form inputs when adding fields dynamically. Improving performance for elements inside large containers. Higher-Order Functions in JavaScript A Higher-Order Function (HOF) is a function that takes another function as an argument or returns a function.\nfunction func1(f1) { // func1 takes a function as an argument (HOF property) f1(); // Calls the passed function return function () { // Returns a new function (HOF property) console.log(\u0026#34;returned fun\u0026#34;); }; } fun = function () { console.log(\u0026#34;Passed Function\u0026#34;); }; let returned = func1(fun); // Call func1 with \u0026#39;fun\u0026#39; function returned(); // Call the returned function Built-in Higher-Order Functions in JavaScript Method Description map() Transforms an array by applying a function to each element. filter() Filters an array based on a condition. reduce() Reduces an array to a single value. forEach() Iterates over an array but does not return a new one. Handling Errors with `try\u0026hellip;catch The try...catch block allows you to handle errors gracefully. The try...catch statement is used to handle errors, and throw is used to create custom errors.\nBasic Example of try...catch\ntry { let x = y + 5; // ‚ùå ReferenceError: y is not defined } catch (error) { console.log(\u0026#34;An error occurred:\u0026#34;, error.message); } üîπ If an error occurs inside try, execution moves to catch, preventing a crash.\nUsing throw to Create Custom Error function divide(a, b) { if (b === 0) { throw new Error(\u0026#34;Cannot divide by zero!\u0026#34;); // üöÄ Custom error } return a / b; } try { console.log(divide(10, 0)); // ‚ùå Throws an error } catch (error) { console.log(\u0026#34;Error:\u0026#34;, error.message); } üîπ throw allows custom error messages instead of generic JavaScript errors.\nfinally Block (Always Executes) try { console.log(\u0026#34;Trying something...\u0026#34;); throw new Error(\u0026#34;Something went wrong!\u0026#34;); } catch (error) { console.log(\u0026#34;Caught Error:\u0026#34;, error.message); } finally { console.log(\u0026#34;This runs no matter what!\u0026#34;); } Custom Events in JavaScript A Custom Event in JavaScript is an event that you manually create and dispatch using the CustomEvent constructor. This allows communication between different parts of your application.\nCreating and Dispatching a Custom Event The CustomEvent constructor takes two arguments: 1Ô∏è‚É£ Event Name (string)\n2Ô∏è‚É£ Event Options (optional, includes detail for extra data)\nlet ev = new Event(\u0026#34;newEv\u0026#34;); document.querySelector(\u0026#34;button\u0026#34;).addEventListener(\u0026#34;newEv\u0026#34;, function () { console.log(\u0026#34;Custom Event\u0026#34;); }); document.querySelector(\u0026#34;button\u0026#34;).dispatchEvent(ev); Full Example: Custom Event with Data\n// Create and dispatch custom event const customEvent = new CustomEvent(\u0026#34;userLoggedIn\u0026#34;, { detail: { username: \u0026#34;ahmad9059\u0026#34;, role: \u0026#34;admin\u0026#34; } }); document.addEventListener(\u0026#34;userLoggedIn\u0026#34;, function (event) { console.log(`User: ${event.detail.username}, Role: ${event.detail.role}`); }); // Dispatch the event document.dispatchEvent(customEvent); When to Use Custom Events?\nFor component communication (e.g., sending data between different UI components). When working with user interactions that don\u0026rsquo;t have built-in events. For event-driven architectures where actions trigger custom behavior. ","permalink":"http://localhost:1313/posts/javascript-advanced/","summary":"\u003ch1 id=\"arrays\"\u003eArrays\u003c/h1\u003e\n\u003cp\u003eObjects allow you to store keyed collections of values. That‚Äôs fine.\u003c/p\u003e\n\u003cp\u003eBut quite often we find that we need an¬†\u003cem\u003eordered collection\u003c/em\u003e, where we have a 1st, a 2nd, a 3rd element and so on. For example, we need that to store a list of something: users, goods, HTML elements etc.\u003c/p\u003e\n\u003cp\u003eIt is not convenient to use an object here, because it provides no methods to manage the order of elements. We can‚Äôt insert a new property ‚Äúbetween‚Äù the existing ones. Objects are just not meant for such use.\u003c/p\u003e","title":"JavaScript Advanced Concepts"},{"content":"Synchronous vs Asynchronous JavaScript JavaScript is single-threaded, meaning it executes one operation at a time in a sequential manner. However, JavaScript provides mechanisms to handle tasks asynchronously, allowing it to perform operations without blocking the main execution thread.\n1. Synchronous JavaScript In synchronous execution, tasks run one after another, meaning JavaScript waits for one operation to complete before moving to the next. This can cause delays if a task takes a long time (e.g., reading a large file or making a network request).\nExample:\nconsole.log(\u0026#34;Start\u0026#34;); function syncFunction() { console.log(\u0026#34;Processing...\u0026#34;); } syncFunction(); console.log(\u0026#34;End\u0026#34;); Here, JavaScript executes statements one by one in order, blocking execution until each task is completed.\n2. Asynchronous JavaScript Asynchronous JavaScript allows tasks to run in the background without blocking the execution of other tasks. This is useful for operations like fetching data from an API, reading files, or handling timers.\nDoes NOT wait for one task to complete before moving to the next. Allows JavaScript to handle time-consuming operations (API calls, file reads, etc.) efficiently. Uses the Event Loop to manage async tasks. How Asynchronous JavaScript Works JavaScript uses the Event Loop and the Call Stack to handle asynchronous code efficiently. It uses:\nCallbacks(setTimeout,setInterval) Fetch API Axios Promises Async/Await Callbacks A callback function is passed as an argument to be executed later.given example use the both setTimeout and setInterval and clearInterval to stop the setInterval\nconsole.log(\u0026#34;Start of program\u0026#34;); // setTimeout: Delays execution by 3 seconds setTimeout(() =\u0026gt; { console.log(\u0026#34;setTimeout: This runs after 3 seconds\u0026#34;); }, 3000); // setInterval: Runs every 2 seconds let counter = 0; let intervalID = setInterval(() =\u0026gt; { counter++; console.log(`setInterval: Counter is ${counter}`); // Stop interval after 5 executions if (counter === 5) { clearInterval(intervalID); console.log(\u0026#34;clearInterval: Stopped interval after 5 executions\u0026#34;); } }, 2000); console.log(\u0026#34;End of program (before timeouts and intervals execute)\u0026#34;); Fetch API The fetch() API is asynchronous because it makes network requests without blocking the execution of other code. It returns a Promise, which resolves when the request completes.\nfetch(\u0026#34;https://jsonplaceholder.typicode.com/todos/1\u0026#34;) // Fetch data from API .then((response) =\u0026gt; response.json()) // Convert response to JSON .then((data) =\u0026gt; console.log(data)) // Log the data .catch((error) =\u0026gt; console.error(\u0026#34;Error fetching data:\u0026#34;, error)); üîπ How it works? 1Ô∏è‚É£ fetch() makes an HTTP request (returns a Promise).\n2Ô∏è‚É£ .json() parses the response into JavaScript object (also async, returns a Promise).\n3Ô∏è‚É£ .then() handles the resolved data.\n4Ô∏è‚É£ .catch() handles errors (e.g., network failure).\nAxios Axios is asynchronous because it makes network requests without blocking execution. It is built on top of JavaScript Promises, similar to fetch(), but with more features.\nWhy use Axios?\nNo need to manually parse JSON (Axios does it automatically). Better error handling (Fetch only rejects on network errors, while Axios rejects on HTTP errors too). More readable with async/await. axios.get(\u0026#34;https://jsonplaceholder.typicode.com/todos/1\u0026#34;) .then(response =\u0026gt; console.log(response.data)) // Axios auto-parses JSON .catch(error =\u0026gt; console.error(\u0026#34;Error fetching data:\u0026#34;, error)); üî• Comparison: Axios vs. Fetch Feature Axios Fetch JSON Parsing ‚úÖ Auto ‚ùå Manual (.json()) Error Handling ‚úÖ Rejects on HTTP errors ‚ùå Only rejects on network errors Request Headers ‚úÖ Easy ‚ùå Manual setup required async/await Support ‚úÖ Yes ‚úÖ Yes Default Timeout ‚úÖ Yes (timeout option) ‚ùå No üëâ Best Practice: Use Axios when working with APIs that require headers, authentication, or advanced error handling.\nPromise in JavaScript A Promise in JavaScript is an object that represents the eventual completion (or failure) of an asynchronous operation.\nüëâ It has three states:\nPending ‚Üí Initial state, neither resolved nor rejected. Fulfilled ‚Üí Operation completed successfully. Rejected ‚Üí Operation failed. let promise = new Promise(function (resolve, reject) { fetch(`https://randomuser.me/api/`) .then((raw) =\u0026gt; raw.json()) .then((result) =\u0026gt; { if (result.results[0].gender === \u0026#34;male\u0026#34;) { resolve(); } else { reject(); } }); }); promise .then(function () { console.log(\u0026#34;Male Received\u0026#34;); }) .catch(function () { console.log(\u0026#34;Female Received\u0026#34;); }); Callbacks in JavaScript A callback is a function passed as an argument to another function and executed later.\nüëâ Why use callbacks?\nHandle asynchronous operations (like fetching data, timers, or reading files). Execute code after another function completes. function getData(url, callback) { fetch(`https://randomuser.me/api/`) .then((raw) =\u0026gt; raw.json()) .then((result) =\u0026gt; { callback(result); }); } getData(\u0026#34;https://randomuser.me/api/\u0026#34;, function (result) { console.log( result.results[0].gender, result.results[0].name.first, result.results[0].email, ); }); async/await async/await is a modern way to handle asynchronous code in JavaScript.\nIt allows you to write asynchronous code in a way that looks synchronous, making it easier to read and debug.\nüëâ Key Features:\n‚úîÔ∏è **async: **The async keyword is used before a function definition to make it return a Promise. ‚úîÔ∏è await: The await keyword is used inside an async function to pause execution until a Promise resolves. ‚úîÔ∏è Avoids callback hell and complex .then() chains.\n‚úîÔ∏è Handles errors with try/catch.\nasync function func() { let n = await fetch(`https://randomuser.me/api/`); n = await n.json(); console.log(n.results[0].gender); } func(); When to Use async/await? ‚úîÔ∏è Fetching data from an API\n‚úîÔ∏è Performing database queries\n‚úîÔ∏è Reading/Writing files (in Node.js)\n‚úîÔ∏è Processing multiple async requests together\n‚úîÔ∏è Avoiding callback hell\nEvent Loop To understand the Event Loop, you need to know how JavaScript executes code. It has three main components:\nCall Stack The Call Stack follows the LIFO (Last In, First Out) principle. It executes synchronous JavaScript code line by line. function greet() { console.log(\u0026#34;Hello!\u0026#34;); } greet(); üìå Execution:\ngreet() is pushed onto the Call Stack. console.log(\u0026quot;Hello!\u0026quot;) runs and is popped from the stack. Web APIs (Async Tasks) JavaScript delegates async tasks (e.g., setTimeout, fetch, event listeners) to Web APIs. These APIs handle the task in the background and return the result later. Example:\nconsole.log(\u0026#34;Start\u0026#34;); setTimeout(() =\u0026gt; { console.log(\u0026#34;Inside setTimeout\u0026#34;); }, 1000); console.log(\u0026#34;End\u0026#34;); üìå Execution Flow:\nconsole.log(\u0026quot;Start\u0026quot;) ‚Üí Executes immediately. setTimeout() ‚Üí Sent to Web API, NOT executed immediately. console.log(\u0026quot;End\u0026quot;) ‚Üí Executes immediately. After 1 second, the callback (console.log(\u0026quot;Inside setTimeout\u0026quot;)) moves to Callback Queue. Callback Queue \u0026amp; Microtask Queue Callback Queue: Stores callbacks from setTimeout, setInterval, event listeners. Microtask Queue: Stores callbacks from Promises (.then(), catch(), finally()) and MutationObserver. Microtasks always run before Callbacks (higher priority). Example:\nconsole.log(\u0026#34;Start\u0026#34;); setTimeout(() =\u0026gt; console.log(\u0026#34;Timeout Callback\u0026#34;), 0); Promise.resolve().then(() =\u0026gt; console.log(\u0026#34;Promise Resolved\u0026#34;)); console.log(\u0026#34;End\u0026#34;); üìå Execution Flow:\nconsole.log(\u0026quot;Start\u0026quot;) ‚Üí Runs immediately. setTimeout() ‚Üí Sent to Web API (callback moved to Callback Queue). Promise.resolve().then(...) ‚Üí Sent to Microtask Queue. console.log(\u0026quot;End\u0026quot;) ‚Üí Runs immediately. Microtask Queue executes first ‚Üí console.log(\u0026quot;Promise Resolved\u0026quot;). Callback Queue executes ‚Üí console.log(\u0026quot;Timeout Callback\u0026quot;). How the Event Loop Works 1Ô∏è‚É£ JavaScript executes synchronous code in the Call Stack. 2Ô∏è‚É£ If an async task is encountered, it moves to the Web API. 3Ô∏è‚É£ Once completed, it moves the callback to the Callback Queue or Microtask Queue. 4Ô∏è‚É£ The Event Loop checks if the Call Stack is empty. 5Ô∏è‚É£ If empty, it first executes Microtasks, then moves Callbacks from the Callback Queue. 6Ô∏è‚É£ Repeats the process infinitely.\nüöÄ Key Takeaways ‚úî JavaScript is single-threaded but handles async tasks with the Event Loop.\n‚úî Microtask Queue (Promises) runs before the Callback Queue (setTimeout).\n‚úî The Event Loop ensures JavaScript never blocks execution.\n‚úî Long-running tasks should be asynchronous to avoid UI freezing.\nDifference Between Callbacks, Promises, and Async/Await Feature Callbacks Promises Async/Await Definition A function passed as an argument to another function and executed later. An object representing the eventual completion (or failure) of an asynchronous operation. A modern way to handle asynchronous code using async and await keywords. Syntax Nested functions, leading to callback hell. Uses .then(), .catch(), and .finally(). Uses async to declare functions and await to handle promises. Readability Hard to read and maintain due to callback nesting. More readable but still involves chaining. Clean and synchronous-like syntax. Error Handling Error-prone, requires manual handling (if-else or separate error callback). Uses .catch() to handle errors. Uses try...catch for better error handling. Chaining Difficult, leads to callback hell (Pyramid of Doom). Easy with .then() chaining. Simplifies chaining with await. Execution Flow Asynchronous but difficult to manage for multiple tasks. More manageable, but chaining can still be tricky. Most intuitive, executes sequentially like synchronous code. Best For Simple async operations, event listeners. Handling multiple asynchronous operations in a cleaner way. Writing clean, readable, and maintainable async code. Generators in JavaScript Generators are special functions in JavaScript that allow us to pause and resume execution. Unlike normal functions, they do not execute all at once; instead, they produce values one at a time as requested.\nKey Features of Generators ‚úî Uses the function* syntax (notice the * after function).\n‚úî Uses the yield keyword to pause execution and return values.\n‚úî The function doesn‚Äôt run immediately; instead, it returns an iterator object.\n‚úî The next() method resumes execution from the last yield.\nfunction* myGenerator() { console.log(\u0026#34;Start\u0026#34;); yield 1; // Pause and return 1 console.log(\u0026#34;Resume\u0026#34;); yield 2; // Pause and return 2 console.log(\u0026#34;End\u0026#34;); } const gen = myGenerator(); // Creates the generator object console.log(gen.next()); // { value: 1, done: false } console.log(gen.next().value); // 2 console.log(gen.next()); // { value: undefined, done: true } üìå How it Works? Calling myGenerator() doesn\u0026rsquo;t execute it immediately. It returns a generator object (gen). gen.next() starts execution until the first yield, returning { value: 1, done: false }. Calling gen.next() again resumes execution after the first yield, printing \u0026quot;Resume\u0026quot; and yielding { value: 2, done: false }. When there are no more yield statements, done: true is returned. Generator with for...of Loop Instead of calling next() manually, we can use a for...of loop.\nfunction* fruits() { yield \u0026#34;üçé Apple\u0026#34;; yield \u0026#34;üçå Banana\u0026#34;; yield \u0026#34;üçá Grapes\u0026#34;; } for (let fruit of fruits()) { console.log(fruit); } Generators vs Async/Await Feature Generators Async/Await Execution Can be paused/resumed using yield Pauses execution until a Promise resolves Returns Iterator object Promise Use Case Custom iteration, state management Handling async operations When to Use Generators? ‚úî Custom Iterators ‚Äì Iterating over data in a custom way.\n‚úî Lazy Execution ‚Äì Generate values on demand instead of all at once.\n‚úî Infinite Sequences ‚Äì Generate values infinitely without memory issues.\n‚úî Asynchronous Programming (with co-routines) ‚Äì Generators can be combined with Promises.\nWeb Worker Web Workers allow JavaScript to run background tasks in a separate thread without blocking the main UI thread. This helps in handling heavy computations and keeping the web page responsive.\nWhy Use Web Workers? ‚úî JavaScript is single-threaded (blocking UI when executing long tasks).\n‚úî Web Workers allow running tasks in parallel on a different thread.\n‚úî Helps in CPU-intensive tasks like image processing, large calculations, etc.\n‚úî Keeps the UI smooth and prevents the page from freezing.\nüöÄ Step 1: Create the Worker (heavyWorker.js)\nonmessage = function (data) { let ans = data.data.reduce((acc, item) =\u0026gt; item + acc, 0); postMessage(ans); }; üöÄ Step 2: Use the Worker in Your Main Script (main.js)\nlet nums = Array.from({ length: 10000 }, (_, b) =\u0026gt; b + 1); let worker = new Worker(\u0026#34;worker.js\u0026#34;); worker.postMessage(nums); worker.onmessage = function (data) { console.log(data.data); }; Limitations of Web Workers ‚ùå No DOM Access ‚Äì Cannot manipulate HTML directly.\n‚ùå Cannot use window, document, or alert() ‚Äì Only limited APIs like fetch(), WebSockets, and IndexedDB.\n‚ùå Same-Origin Policy ‚Äì Workers must be loaded from the same domain.\n‚ùå Extra Resource Consumption ‚Äì Creating multiple workers consumes more memory.\n","permalink":"http://localhost:1313/posts/asynchronous-js/","summary":"\u003ch2 id=\"synchronous-vs-asynchronous-javascript\"\u003eSynchronous vs Asynchronous JavaScript\u003c/h2\u003e\n\u003cp\u003eJavaScript is \u003cstrong\u003esingle-threaded\u003c/strong\u003e, meaning it executes one operation at a time in a sequential manner. However, JavaScript provides mechanisms to handle tasks asynchronously, allowing it to perform operations without blocking the main execution thread.\u003c/p\u003e\n\u003ch2 id=\"1-synchronous-javascript\"\u003e1. Synchronous JavaScript\u003c/h2\u003e\n\u003cp\u003eIn \u003cstrong\u003esynchronous execution\u003c/strong\u003e, tasks run one after another, meaning JavaScript waits for one operation to complete before moving to the next. This can cause delays if a task takes a long time (e.g., reading a large file or making a network request).\u003c/p\u003e","title":"Asynchronous JavaScript"},{"content":"\nJavaScript was originally created to bring static web pages to life, enabling them to respond dynamically to user interactions. Its code, known as scripts, is directly embedded within HTML documents and executed by the browser as soon as the page loads. Because these scripts are delivered and interpreted as plain text, they bypass the need for a separate compilation process‚Äîthis makes development swift and flexible.\nThis interpretive nature is a key characteristic of JavaScript and distinguishes it from compiled languages like Java. Whereas Java requires a compile step to transform code into bytecode before execution, JavaScript‚Äôs immediate execution model facilitates rapid testing and iterative development. Over time, JavaScript has evolved from a simple tool for adding interactivity to a robust language capable of handling complex web applications, manipulating the Document Object Model (DOM), and even running on servers through environments like Node.js.\nIn essence, JavaScript‚Äôs design philosophy‚Äîenabling live, responsive web experiences with minimal overhead‚Äîcontinues to shape the modern, dynamic web.\nTip: Brendan Eich¬†is the original developer of JavaScript\nWhy is it called¬†JavaScript?\nWhen JavaScript was created, it initially had another name: ‚ÄúLiveScript‚Äù. But Java was very popular at that time, so it was decided that positioning a new language as a ‚Äúyounger brother‚Äù of Java would help.\nBut as it evolved, JavaScript became a fully independent language with its own specification called¬†ECMAScript, and now it has no relation to Java at all.\nToday, JavaScript can execute not only in the browser, but also on the server, or actually on any device that has a special program called¬†the JavaScript engine.\nThe browser has an embedded engine sometimes called a ‚ÄúJavaScript virtual machine‚Äù.\nDifferent engines have different ‚Äúcodenames‚Äù. For example:\nV8¬†‚Äì in Chrome, Opera and Edge. SpiderMonkey¬†‚Äì in Firefox. ‚Ä¶There are other codenames like ‚ÄúChakra‚Äù for IE, ‚ÄúJavaScriptCore‚Äù, ‚ÄúNitro‚Äù and ‚ÄúSquirrelFish‚Äù for Safari, etc. The terms above are good to remember because they are used in developer articles on the internet. We‚Äôll use them too. For instance, if ‚Äúa feature X is supported by V8‚Äù, then it probably works in Chrome, Opera and Edge.\nHow do engines work?\nEngines are complicated. But the basics are easy.\nThe engine (embedded if it‚Äôs a browser) reads (‚Äúparses‚Äù) the script. Then it converts (‚Äúcompiles‚Äù) the script to machine code. And then the machine code runs, pretty fast. The engine applies optimizations at each step of the process. It even watches the compiled script as it runs, analyzes the data that flows through it, and further optimizes the machine code based on that knowledge.\nWhat makes JavaScript unique? There are at least three great things about JavaScript:\nFull integration with HTML/CSS. Simple things are done simply. Supported by all major browsers and enabled by default. Link JavaScript to HTML We can use a¬†\u0026lt;script\u0026gt;¬†tag to add JavaScript code to a page. The¬†type¬†and¬†language¬†attributes are not required. A script in an external file can be inserted with¬†\u0026lt;script src=\u0026quot;path/to/script.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;. Please note: As a rule, only the simplest scripts are put into HTML. More complex ones reside in separate files.\nThe benefit of a separate file is that the browser will download it and store it in its cache.\nOther pages that reference the same script will take it from the cache instead of downloading it, so the file is actually downloaded only once.\nThat reduces traffic and makes pages faster.\nSemicolons A semicolon may be omitted in most cases when a line break exists. This would also work:\nconsole.log(\u0026#39;Hello\u0026#39;) console.log(\u0026#39;World\u0026#39;) Here, JavaScript interprets the line break as an ‚Äúimplicit‚Äù semicolon. This is called an automatic semicolon insertion.\nIn most cases, a newline implies a semicolon. But ‚Äúin most cases‚Äù does not mean ‚Äúalways‚Äù!\nThere are cases when a newline does not mean a semicolon. For example:\nconsole.log(3 + 1 + 2); The code outputs 6 because JavaScript does not insert semicolons here. It is intuitively obvious that if the line ends with a plus \u0026ldquo;+\u0026rdquo;, then it is an ‚Äúincomplete expression‚Äù, so a semicolon there would be incorrect. And in this case, that works as intended.\nBut there are situations where JavaScript ‚Äúfails‚Äù to assume a semicolon where it is really needed.\nErrors which occur in such cases are quite hard to find and fix.\nAn example of an error\nIf you‚Äôre curious to see a concrete example of such an error, check this code out:\nconsole.log(\u0026#34;Hello\u0026#34;); [1, 2].forEach(console.log); Now let‚Äôs remove the semicolon after the console.log:\nconsole.log(\u0026#34;Hello\u0026#34;) [1, 2].forEach(console.log); The difference compared to the code above is only one character: the semicolon at the end of the first line is gone.\nIf we run this code, only the first¬†Hello¬†shows (and there‚Äôs an error, you may need to open the console to see it). There are no numbers any more.\nThat‚Äôs because JavaScript does not assume a semicolon before square brackets¬†[...]. So, the code in the last example is treated as a single statement.\nHere‚Äôs how the engine sees it:\nconsole.log(\u0026#34;Hello\u0026#34;)[1, 2].forEach(console.log); It\u0026rsquo;s recommend putting semicolons between statements even if they are separated by newlines. This rule is widely adopted by the community. Let‚Äôs note once again ‚Äì it is possible to leave out semicolons most of the time. But it‚Äôs safer ‚Äì especially for a beginner ‚Äì to use them.\nComments As time goes on, programs become more and more complex. It becomes necessary to add comments which describe what the code does and why.\nComments can be put into any place of a script. They don‚Äôt affect its execution because the engine simply ignores them.\nOne-line comments start with two forward slash characters //. The rest of the line is a comment. It may occupy a full line of its own or follow a statement. Like here:\n// This comment occupies a line of its own console.log(\u0026#39;Hello\u0026#39;); console.log(\u0026#39;World\u0026#39;); // This comment follows the statement Multiline comments start with a forward slash and an asterisk /* and end with an asterisk and a forward slash */. /* An example with two messages. This is a multiline comment. */ console.log(\u0026#39;Hello\u0026#39;); console.log(\u0026#39;World\u0026#39;); Nested comments are not supported! There may not be /\u0026hellip;/ inside another /\u0026hellip;/.\nSuch code will die with an error:\n/* /* nested comment ?!? */ not allowed */ console.log( \u0026#39;World\u0026#39; ); The modern mode, \u0026ldquo;use strict\u0026rdquo; The directive looks like a string:¬†\u0026quot;use strict\u0026quot;¬†or¬†'use strict'. When it is located at the top of a script, the whole script works the ‚Äúmodern‚Äù way.\n\u0026#34;use strict\u0026#34;; // this code works the modern way ... Advance that¬†\u0026quot;use strict\u0026quot;¬†can be put at the beginning of a function. Doing that enables strict mode in that function only. But usually people use it for the whole script.\nEnsure that ‚Äúuse strict‚Äù is at the top\nPlease make sure that¬†\u0026quot;use strict\u0026quot;¬†is at the top of your scripts, otherwise strict mode may not be enabled. Strict mode isn‚Äôt enabled here:\nconsole.log(\u0026#34;some code\u0026#34;); // \u0026#34;use strict\u0026#34; below is ignored--it must be at the top \u0026#34;use strict\u0026#34;; // strict mode is not activated Should we ‚Äúuse strict‚Äù? The question may sound obvious, but it‚Äôs not so.\nOne could recommend to start scripts with \u0026ldquo;use strict\u0026rdquo;‚Ä¶ But you know what‚Äôs cool?\nModern JavaScript supports ‚Äúclasses‚Äù and ‚Äúmodules‚Äù ‚Äì advanced language structures (we‚Äôll surely get to them), that enable use strict automatically. So we don‚Äôt need to add the \u0026ldquo;use strict\u0026rdquo; directive, if we use them.\nSo, for now \u0026ldquo;use strict\u0026rdquo;; is a welcome guest at the top of your scripts. Later, when your code is all in classes and modules, you may omit it.\nAs of now, we‚Äôve got to know about use strict in general.\nIn the next chapters, as we learn language features, we‚Äôll see the differences between the strict and old modes. Luckily, there aren‚Äôt many and they actually make our lives better.\nThe purpose of¬†\u0026quot;use strict\u0026quot;¬†is to indicate that the code should be executed in \u0026ldquo;strict mode\u0026rdquo;.\nWith strict mode, you can not, for example, use undeclared variables.\nJavaScript¬†Window - The Browser Object Model In JavaScript, window is a global object that represents the browser window or tab. It is the top-level object in the browser\u0026rsquo;s client-side execution environment and provides access to various properties and methods for controlling the browser window.\nconsole The console object provides access to the browser\u0026rsquo;s debugging console.\nconsole.log(\u0026#34;Hello, World!\u0026#34;); console.warn(\u0026#34;Be carefull\u0026#34;); console.error(\u0026#34;You made a mistake\u0026#34;); log(): Outputs a message to the console. warn(): Outputs a warning message to the console. error(): Outputs an error message to the console. clear(): Clears the console. Interaction: alert, prompt, confirm As we‚Äôll be using the browser as our demo environment, let‚Äôs see a couple of functions to interact with the user:¬†alert,¬†prompt¬†and¬†confirm.\nalert() The¬†alert()¬†method displays an alert box with a message and an OK button.\nThe¬†alert()¬†method is used when you want information to come through to the user.\nalert(\u0026#34;Hello\\nHow are you?\u0026#34;); prompt() The¬†prompt()¬†method displays a dialog box that prompts the user for input.\nThe¬†prompt()¬†method returns the input value if the user clicks \u0026ldquo;OK\u0026rdquo;, otherwise it returns¬†null.\nA prompt box is used if you want the user to input a value.\nWhen a prompt box pops up, the user will have to click either \u0026ldquo;OK\u0026rdquo; or \u0026ldquo;Cancel\u0026rdquo; to proceed.\nDo not overuse this method. It prevents the user from accessing other parts of the page until the box is closed.\nresult = prompt(title, [default]); let age = prompt(\u0026#39;How old are you?\u0026#39;, 100); console.log(`You are ${age} years old!`); // You are 100 years old! confirm() The¬†confirm()¬†method displays a dialog box with a message, an OK button, and a Cancel button.\nThe¬†confirm()¬†method returns¬†true¬†if the user clicked \u0026ldquo;OK\u0026rdquo;, otherwise¬†false.\nA confirm box is often used if you want the user to verify or accept something.\nA confirm box takes the focus away from the current window, and forces the user to read the message.\nDo not overuse this method. It prevents the user from accessing other parts of the page until the box is closed.\nVariables A¬†variable¬†is a ‚Äúnamed storage‚Äù for data. We can use variables to store goodies, visitors, and other data.\nTo create a variable in JavaScript, use the¬†let¬†keyword.\nThe statement below creates (in other words:¬†declares) a variable with the name ‚Äúmessage‚Äù:\nlet message; Now, we can put some data into it by using the assignment operator¬†=:\nlet message; message = \u0026#39;Hello\u0026#39;; // store the string \u0026#39;Hello\u0026#39; in the variable named message The string is now saved into the memory area associated with the variable. We can access it using the variable name:\nlet message; message = \u0026#39;Hello!\u0026#39;; console.log(message); // shows the variable content To be concise, we can combine the variable declaration and assignment into a single line:\nlet message = \u0026#39;Hello!\u0026#39;; // define the variable and assign the value console.log(message); // Hello! We can also declare multiple variables in one line:\nlet user = \u0026#39;John\u0026#39;, age = 25, message = \u0026#39;Hello\u0026#39;; That might seem shorter, but we don‚Äôt recommend it. For the sake of better readability, please use a single line per variable.\nThe multiline variant is a bit longer, but easier to read:\nlet user = \u0026#39;John\u0026#39;; let age = 25; let message = \u0026#39;Hello\u0026#39;; Technically, all these variants do the same thing. So, it‚Äôs a matter of personal taste and aesthetics.\nvar¬†instead of¬†let\nIn older scripts, you may also find another keyword:¬†var¬†instead of¬†let:\n`_var_` message `=` `'Hello'``;`\nThe¬†var¬†keyword is¬†almost¬†the same as¬†let. It also declares a variable but in a slightly different, ‚Äúold-school‚Äù way.\nbut the main difference Variables, declared with¬†var, are either function-scoped or global-scoped. They are visible through blocks.\nThere are subtle differences between¬†let¬†and¬†var, but they do not matter to us yet. We‚Äôll cover them in detail in the chapter¬†The old \u0026ldquo;var\u0026rdquo;.\nFunctional languages\nIt‚Äôs interesting to note that there exist so-called¬†pure functional¬†programming languages, such as¬†Haskell, that forbid changing variable values.\nIn such languages, once the value is stored ‚Äúin the box‚Äù, it‚Äôs there forever. If we need to store something else, the language forces us to create a new box (declare a new variable). We can‚Äôt reuse the old one.\nThough it may seem a little odd at first sight, these languages are quite capable of serious development. More than that, there are areas like parallel computations where this limitation confers certain benefits.\nConstants To declare a constant (unchanging) variable, use¬†const¬†instead of¬†let:\nconst myBirthday = \u0026#39;18.04.1982\u0026#39;; Variables declared using¬†const¬†are called ‚Äúconstants‚Äù. They cannot be reassigned. An attempt to do so would cause an error:\nconst myBirthday = \u0026#39;18.04.1982\u0026#39;; myBirthday = \u0026#39;01.01.2001\u0026#39;; // error, can\u0026#39;t reassign the constant! When a programmer is sure that a variable will never change, they can declare it with¬†const¬†to guarantee and communicate that fact to everyone.\nUppercase constants There is a widespread practice to use constants as aliases for difficult-to-remember values that are known before execution.\nSuch constants are named using capital letters and underscores.\nFor instance, let‚Äôs make constants for colors in so-called ‚Äúweb‚Äù (hexadecimal) format:\nconst COLOR_RED = \u0026#34;#F00\u0026#34;; const COLOR_GREEN = \u0026#34;#0F0\u0026#34;; const COLOR_BLUE = \u0026#34;#00F\u0026#34;; const COLOR_ORANGE = \u0026#34;#FF7F00\u0026#34;; // ...when we need to pick a color let color = COLOR_ORANGE; console.log(color); // #FF7F00 COLOR_ORANGE¬†is much easier to remember than¬†\u0026quot;#FF7F00\u0026quot;. It is much easier to mistype¬†\u0026quot;#FF7F00\u0026quot;¬†than¬†COLOR_ORANGE. When reading the code,¬†COLOR_ORANGE¬†is much more meaningful than¬†#FF7F00. When should we use capitals for a constant and when should we name it normally? Let‚Äôs make that clear.\nBeing a ‚Äúconstant‚Äù just means that a variable‚Äôs value never changes. But some constants are known before execution (like a hexadecimal value for red) and some constants are¬†calculated¬†in run-time, during the execution, but do not change after their initial assignment.\nconst pageLoadTime = /* time taken by a webpage to load */; The value of¬†pageLoadTime¬†is not known before the page load, so it‚Äôs named normally. But it‚Äôs still a constant because it doesn‚Äôt change after the assignment.\nIn other words, capital-named constants are only used as aliases for ‚Äúhard-coded‚Äù values.\nData types A value in JavaScript is always of a certain type. For example, a string or a number.\nWe can put any type in a variable. For example, a variable can at one moment be a string and then store a number:\n// no error let message = \u0026#34;hello\u0026#34;; message = 123456; Programming languages that allow such things, such as JavaScript, are called ‚Äúdynamically typed‚Äù, meaning that there exist data types, but variables are not bound to any of them.\n1. Number: The¬†number¬†type represents both integer and floating point numbers.\nlet n = 123; n = 12.345; There are many operations for numbers, e.g. multiplication¬†*, division¬†/, addition¬†+, subtraction¬†-, and so on.\nBesides regular numbers, there are so-called ‚Äúspecial numeric values‚Äù which also belong to this data type:¬†Infinity,¬†-Infinity¬†and¬†NaN.\nInfinity¬†represents the mathematical¬†Infinity¬†‚àû. It is a special value that‚Äôs greater than any number. console.log( 1 / 0 ); // Infinity Or just reference it directly:\nNaN¬†represents a computational error. It is a result of an incorrect or an undefined mathematical operation, for instance: console.log( \u0026#34;not a number\u0026#34; / 2 ); // NaN, such division is erroneous NaN¬†is sticky. Any further mathematical operation on¬†NaN¬†returns¬†NaN:\nconsole.log( NaN + 1 ); // NaN console.log( 3 * NaN ); // NaN console.log( \u0026#34;not a number\u0026#34; / 2 - 1 ); // NaN So, if there‚Äôs a¬†NaN¬†somewhere in a mathematical expression, it propagates to the whole result (there‚Äôs only one exception to that:¬†NaN ** 0¬†is¬†1).\nBigInt In JavaScript, the ‚Äúnumber‚Äù type cannot safely represent integer values larger than¬†(253-1)¬†(that‚Äôs¬†9007199254740991), or less than¬†-(253-1)¬†for negatives.\nTo be really precise, the ‚Äúnumber‚Äù type can store larger integers (up to¬†1.7976931348623157 * 10308), but outside of the safe integer range¬†¬±(253-1)¬†there‚Äôll be a precision error, because not all digits fit into the fixed 64-bit storage. So an ‚Äúapproximate‚Äù value may be stored.\nconsole.log(9007199254740991 + 1); // 9007199254740992 console.log(9007199254740991 + 2); // 9007199254740992 So to say, all odd integers greater than¬†(253-1)¬†can‚Äôt be stored at all in the ‚Äúnumber‚Äù type.\nFor most purposes¬†¬±(253-1)¬†range is quite enough, but sometimes we need the entire range of really big integers, e.g. for cryptography or microsecond-precision timestamps.\nBigInt¬†type was recently added to the language to represent integers of arbitrary length.\nA¬†BigInt¬†value is created by appending¬†n¬†to the end of an integer:\n// the \u0026#34;n\u0026#34; at the end means it\u0026#39;s a BigInt const bigInt = 1234567890123456789012345678901234567890n; 2. String A string in JavaScript must be surrounded by quotes.\nlet str = \u0026#34;Hello\u0026#34;; let str2 = \u0026#39;Single quotes are ok too\u0026#39;; let phrase = `can embed another ${str}`; In JavaScript, there are 3 types of quotes.\nDouble quotes:¬†\u0026quot;Hello\u0026quot;. Single quotes:¬†'Hello'. Backticks:¬†`Hello`. Double and single quotes are ‚Äúsimple‚Äù quotes. There‚Äôs practically no difference between them in JavaScript.\nBackticks are ‚Äúextended functionality‚Äù quotes. They allow us to embed variables and expressions into a string by wrapping them in¬†${‚Ä¶}, for example:\nlet name = \u0026#34;John\u0026#34;; // embed a variable console.log( `Hello, ${name}!` ); // Hello, John! // embed an expression console.log( `the result is ${1 + 2}` ); // the result is 3 There is no¬†character¬†type.\nIn some languages, there is a special ‚Äúcharacter‚Äù type for a single character. For example, in the C language and in Java it is called ‚Äúchar‚Äù.\nIn JavaScript, there is no such type. There‚Äôs only one type:¬†string. A string may consist of zero characters (be empty), one character or many of them.\n3. Boolean (logical type) The boolean type has only two values:¬†true¬†and¬†false.\nThis type is commonly used to store yes/no values:¬†true¬†means ‚Äúyes, correct‚Äù, and¬†false¬†means ‚Äúno, incorrect‚Äù.\nFor instance:\nlet nameFieldChecked = true; // yes, name field is checked let ageFieldChecked = false; // no, age field is not checked 4. The ‚Äúnull‚Äù value The special¬†null¬†value does not belong to any of the types described above.\nIt forms a separate type of its own which contains only the¬†null¬†value:\nlet age = null; In JavaScript,¬†null¬†is not a ‚Äúreference to a non-existing object‚Äù or a ‚Äúnull pointer‚Äù like in some other languages.\nIt‚Äôs just a special value which represents ‚Äúnothing‚Äù, ‚Äúempty‚Äù or ‚Äúvalue unknown‚Äù.\nThe code above states that¬†age¬†is unknown.\nThe \u0026ldquo;undefined\u0026rdquo; value The special value¬†undefined¬†also stands apart. It makes a type of its own, just like¬†null.\nThe meaning of¬†undefined¬†is ‚Äúvalue is not assigned‚Äù.\nIf a variable is declared, but not assigned, then its value is¬†undefined:\nlet age; console.log(age); // shows \u0026#34;undefined\u0026#34; Technically, it is possible to explicitly assign¬†undefined¬†to a variable:\nlet age = 100; // change the value to undefined age = undefined; console.log(age); // \u0026#34;undefined\u0026#34; ‚Ä¶But it\u0026rsquo;s don‚Äôt recommend doing that. Normally, one uses¬†null¬†to assign an ‚Äúempty‚Äù or ‚Äúunknown‚Äù value to a variable, while¬†undefined¬†is reserved as a default initial value for unassigned things.\nObjects and Symbols The¬†object¬†type is special.\nAll other types are called ‚Äúprimitive‚Äù because their values can contain only a single thing (be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex entities.\nBeing that important, objects deserve a special treatment. Deal with them later in the chapter¬†Objects, after we learn more about primitives.\nThe¬†symbol¬†type is used to create unique identifiers for objects. We have to mention it here for the sake of completeness, but also postpone the details till we know objects.\nThe typeof operator The¬†typeof¬†operator returns the type of the operand. It‚Äôs useful when we want to process values of different types differently or just want to do a quick check.\nA call to¬†typeof x¬†returns a string with the type name:\ntypeof undefined // \u0026#34;undefined\u0026#34; typeof 0 // \u0026#34;number\u0026#34; typeof 10n // \u0026#34;bigint\u0026#34; typeof true // \u0026#34;boolean\u0026#34; typeof \u0026#34;foo\u0026#34; // \u0026#34;string\u0026#34; typeof Symbol(\u0026#34;id\u0026#34;) // \u0026#34;symbol\u0026#34; typeof Math // \u0026#34;object\u0026#34; (1) typeof null // \u0026#34;object\u0026#34; (2) typeof alert// \u0026#34;function\u0026#34; (3) The¬†typeof(x)¬†syntax\nYou may also come across another syntax:¬†typeof(x). It‚Äôs the same as¬†typeof x.\nTo put it clear:¬†typeof¬†is an operator, not a function. The parentheses here aren‚Äôt a part of¬†typeof. It‚Äôs the kind of parentheses used for mathematical grouping.\nUsually, such parentheses contain a mathematical expression, such as¬†(2 + 2), but here they contain only one argument¬†(x). Syntactically, they allow to avoid a space between the¬†typeof¬†operator and its argument, and some people like it.\nSome people prefer¬†typeof(x), although the¬†typeof x¬†syntax is much more common.\nType Conversions Most of the time, operators and functions automatically convert the values given to them to the right type.\nFor example,¬†console.log¬†automatically converts any value to a string to show it. Mathematical operations convert values to numbers.\nThere are also cases when we need to explicitly convert a value to the expected type.\nString Conversion String conversion happens when we need the string form of a value.\nFor example,¬†console.log(value)¬†does it to show the value.\nWe can also call the¬†String(value)¬†function to convert a value to a string:\nlet value = true; console.log(typeof value); // boolean value = String(value); // now value is a string \u0026#34;true\u0026#34; console.log(typeof value); // string String conversion is mostly obvious. A¬†false¬†becomes¬†\u0026quot;false\u0026quot;,¬†null¬†becomes¬†\u0026quot;null\u0026quot;, etc.\nNumeric Conversion Numeric conversion in mathematical functions and expressions happens automatically.\nFor example, when division¬†/¬†is applied to non-numbers:\nconsole.log( \u0026#34;6\u0026#34; / \u0026#34;2\u0026#34; ); // 3, strings are converted to numbers We can use the¬†Number(value)¬†function to explicitly convert a¬†value¬†to a number:\nlet str = \u0026#34;123\u0026#34;; console.log(typeof str); // string let num = Number(str); // becomes a number 123 console.log(typeof num); // number Explicit conversion is usually required when we read a value from a string-based source like a text form but expect a number to be entered.\nIf the string is not a valid number, the result of such a conversion is¬†NaN. For instance:\nlet age = Number(\u0026#34;an arbitrary string instead of a number\u0026#34;); console.log(age); // NaN, conversion failed Numeric conversion rules:\nValue Becomes‚Ä¶ undefined NaN null 0 true¬†and¬†false 1¬†and¬†0 string Whitespaces (includes spaces, tabs¬†\\t, newlines¬†\\n¬†etc.) from the start and end are removed. If the remaining string is empty, the result is¬†0. Otherwise, the number is ‚Äúread‚Äù from the string. An error gives¬†NaN. console.log( Number(\u0026#34; 123 \u0026#34;) ); // 123 console.log( Number(\u0026#34;123z\u0026#34;) ); // NaN (error reading a number at \u0026#34;z\u0026#34;) console.log( Number(true) ); // 1 console.log( Number(false) ); // 0 Boolean Conversion Boolean conversion is the simplest one.\nIt happens in logical operations (later we‚Äôll meet condition tests and other similar things) but can also be performed explicitly with a call to¬†Boolean(value).\nThe conversion rule:\nValues that are intuitively ‚Äúempty‚Äù, like¬†0, an empty string,¬†null,¬†undefined, and¬†NaN, become¬†false. Other values become¬†true. console.log( Boolean(1) ); // true console.log( Boolean(0) ); // false console.log( Boolean(\u0026#34;hello\u0026#34;) ); // true console.log( Boolean(\u0026#34;\u0026#34;) ); // false Please note: the string with zero¬†\u0026quot;0\u0026quot;¬†is¬†true\nSome languages (namely PHP) treat¬†\u0026quot;0\u0026quot;¬†as¬†false. But in JavaScript, a non-empty string is always¬†true.\nalert( Boolean(\u0026#34;0\u0026#34;) ); // true alert( Boolean(\u0026#34; \u0026#34;) ); // spaces, also true (any non-empty string is true) Basic operators, maths We know many operators from school. They are things like addition¬†+, multiplication¬†*, subtraction¬†-, and so on.\nIn this chapter, we‚Äôll start with simple operators, then concentrate on JavaScript-specific aspects, not covered by school arithmetic.\nMaths The following math operations are supported:\nAddition¬†+, Subtraction¬†-, Multiplication¬†*, Division¬†/, Remainder¬†%, Exponentiation¬†**. Remainder The remainder operator¬†%, despite its appearance, is not related to percents.\nThe result of¬†a % b¬†is the¬†remainder¬†of the integer division of¬†a¬†by¬†b.\nFor instance:\nconsole.log(5 % 2); // 1, the remainder of 5 divided by 2 console.log(8 % 3); // 2, the remainder of 8 divided by 3 console.log(8 % 4); // 0, the remainder of 8 divided by 4 Exponentiation: The exponentiation operator¬†a ** b¬†raises¬†a¬†to the power of¬†b.\nIn school maths, we write that as ab.\nFor instance:\nconsole.log(2 ** 2); // 2¬≤ = 4 console.log(2 ** 3); // 2¬≥ = 8 console.log(2 ** 4); // 2‚Å¥ = 16 Just like in maths, the exponentiation operator is defined for non-integer numbers as well.\nFor example, a square root is an exponentiation by ¬Ω:\nconsole.log(4 ** (1 / 2)); // 2 (power of 1/2 is the same as a square root) console.log(8 ** (1 / 3)); // 2 (power of 1/3 is the same as a cubic root) String concatenation with binary Let‚Äôs meet the features of JavaScript operators that are beyond school arithmetics.\nUsually, the plus operator¬†+¬†sums numbers.\nBut, if the binary¬†+¬†is applied to strings, it merges (concatenates) them:\nlet s = \u0026#34;my\u0026#34; + \u0026#34;string\u0026#34;; console.log(s); // mystring Note that if any of the operands is a string, then the other one is converted to a string too.\nconsole.log( \u0026#39;1\u0026#39; + 2 ); // \u0026#34;12\u0026#34; console.log( 2 + \u0026#39;1\u0026#39; ); // \u0026#34;21\u0026#34; See, it doesn‚Äôt matter whether the first operand is a string or the second one.\nHere‚Äôs a more complex example:\nconsole.log(2 + 2 + \u0026#39;1\u0026#39; ); // \u0026#34;41\u0026#34; and not \u0026#34;221\u0026#34; Here, operators work one after another. The first¬†+¬†sums two numbers, so it returns¬†4, then the next¬†+¬†adds the string¬†1¬†to it, so it‚Äôs like¬†4 + '1' = '41'.\nconsole.log(\u0026#39;1\u0026#39; + 2 + 2); // \u0026#34;122\u0026#34; and not \u0026#34;14\u0026#34; The binary¬†+¬†is the only operator that supports strings in such a way. Other arithmetic operators work only with numbers and always convert their operands to numbers.\nHere‚Äôs the demo for subtraction and division:\nconsole.log( 6 - \u0026#39;2\u0026#39; ); // 4, converts \u0026#39;2\u0026#39; to a number console.log( \u0026#39;6\u0026#39; / \u0026#39;2\u0026#39; ); // 3, converts both operands to numbers Numeric conversion, unary The plus¬†+¬†exists in two forms: the binary form that we used above and the unary form.\nThe unary plus or, in other words, the plus operator¬†+¬†applied to a single value, doesn‚Äôt do anything to numbers. But if the operand is not a number, the unary plus converts it into a number.\nFor example:\n// No effect on numbers let x = 1; console.log( +x ); // 1 let y = -2; console.log( +y ); // -2 // Converts non-numbers console.log( +true ); // 1 console.log( +\u0026#34;\u0026#34; ); // 0 It actually does the same thing as¬†Number(...), but is shorter.\nThe binary plus would add them as strings:\nlet apples = \u0026#34;2\u0026#34;; let oranges = \u0026#34;3\u0026#34;; console.log( apples + oranges ); // \u0026#34;23\u0026#34;, the binary plus concatenates strings If we want to treat them as numbers, we need to convert and then sum them:\nlet apples = \u0026#34;2\u0026#34;; let oranges = \u0026#34;3\u0026#34;; // both values converted to numbers before the binary plus console.log( +apples + +oranges ); // 5 // the longer variant // console.log( Number(apples) + Number(oranges) ); // 5 From a mathematician‚Äôs standpoint, the abundance of pluses may seem strange. But from a programmer‚Äôs standpoint, there‚Äôs nothing special: unary pluses are applied first, they convert strings to numbers, and then the binary plus sums them up.\nOperator Precedence: If an expression has more than one operator, the execution order is defined by their¬†precedence, or, in other words, the default priority order of operators.\nPrecedence Name Sign ‚Ä¶ ‚Ä¶ ‚Ä¶ 14 unary plus + 14 unary negation - 13 exponentiation ** 12 multiplication * 12 division / 11 addition + 11 subtraction - ‚Ä¶ ‚Ä¶ ‚Ä¶ 2 assignment = ‚Ä¶ ‚Ä¶ ‚Ä¶ Assignment Let‚Äôs note that an assignment¬†=¬†is also an operator. It is listed in the precedence table with the very low priority of¬†2.\nThat‚Äôs why, when we assign a variable, like¬†x = 2 * 2 + 1, the calculations are done first and then the¬†=¬†is evaluated, storing the result in¬†x.\nlet x = 2 * 2 + 1; console.log( x ); // 5 Assignment = returns a value The fact of¬†=¬†being an operator, not a ‚Äúmagical‚Äù language construct has an interesting implication.\nAll operators in JavaScript return a value. That‚Äôs obvious for¬†+¬†and¬†-, but also true for¬†=.\nThe call¬†x = value¬†writes the¬†value¬†into¬†x¬†and then returns it.\nHere‚Äôs a demo that uses an assignment as part of a more complex expression:\nlet a = 1; let b = 2; let c = 3 - (a = b + 1); console.log( a ); // 3 console.log c ); // 0 In the example above, the result of expression¬†(a = b + 1)¬†is the value which was assigned to¬†a¬†(that is¬†3). It is then used for further evaluations.\nFunny code, isn‚Äôt it? We should understand how it works, because sometimes we see it in JavaScript libraries.\nAlthough, please don‚Äôt write the code like that. Such tricks definitely don‚Äôt make code clearer or readable.\nModify-in-place We often need to apply an operator to a variable and store the new result in that same variable.\nFor example:\nlet n = 2; n = n + 5; n = n * 2; This notation can be shortened using the operators¬†+=¬†and¬†*=:\nlet n = 2; n += 5; // now n = 7 (same as n = n + 5) n *= 2; // now n = 14 (same as n = n * 2) alert( n ); // 14 Increment/decrement Increasing or decreasing a number by one is among the most common numerical operations.\nSo, there are special operators for it:\nIncrement¬†++¬†increases a variable by 1: let counter = 2; counter++; // works the same as counter = counter + 1, but is shorter alert( counter ); // 3 Decrement¬†--¬†decreases a variable by 1: let counter = 2; counter--; // works the same as counter = counter - 1, but is shorter alert( counter ); // 1 Important: Increment/decrement can only be applied to variables. Trying to use it on a value like¬†5++¬†will give an error.\nThe operators¬†++¬†and¬†--¬†can be placed either before or after a variable.\nWhen the operator goes after the variable, it is in ‚Äúpostfix form‚Äù:¬†counter++. The ‚Äúprefix form‚Äù is when the operator goes before the variable:¬†++counter. Both of these statements do the same thing: increase¬†counter¬†by¬†1.\nIs there any difference? Yes, but we can only see it if we use the returned value of¬†++/--.\nLet‚Äôs clarify. As we know, all operators return a value. Increment/decrement is no exception. The prefix form returns the new value while the postfix form returns the old value (prior to increment/decrement).\nTo see the difference, here‚Äôs an example:\nlet counter = 1; let a = ++counter; // (*) alert(a); // 2 In the line¬†(*), the¬†prefix¬†form¬†++counter¬†increments¬†counter¬†and returns the new value,¬†2. So, the¬†alert¬†shows¬†2.\nNow, let‚Äôs use the postfix form:\nlet counter = 1; let a = counter++; // (*) changed ++counter to counter++ alert(a); // 1 In the line¬†(*), the¬†postfix¬†form¬†counter++¬†also increments¬†counter¬†but returns the¬†old¬†value (prior to increment). So, the¬†alert¬†shows¬†1.\nIncrement/decrement among other operators\nThe operators¬†++/--¬†can be used inside expressions as well. Their precedence is higher than most other arithmetical operations.\nFor instance:\nlet counter = 1; alert( 2 * ++counter ); // 4 Compare With:\nlet counter = 1; alert( 2 * counter++ ); // 2, because counter++ returns the \u0026#34;old\u0026#34; value Though technically okay, such notation usually makes code less readable. One line does multiple things ‚Äì not good.\nWhile reading code, a fast ‚Äúvertical‚Äù eye-scan can easily miss something like¬†counter++¬†and it won‚Äôt be obvious that the variable increased.\nWe advise a style of ‚Äúone line ‚Äì one action‚Äù:\nlet counter = 1; alert( 2 * counter ); counter++; Bitwise operators Bitwise operators treat arguments as 32-bit integer numbers and work on the level of their binary representation.\nThese operators are not JavaScript-specific. They are supported in most programming languages.\nThe list of operators:\nAND (¬†\u0026amp;¬†) OR (¬†|¬†) XOR (¬†^¬†) NOT (¬†~¬†) LEFT SHIFT (¬†\u0026lt;\u0026lt;¬†) RIGHT SHIFT (¬†\u0026gt;\u0026gt;¬†) ZERO-FILL RIGHT SHIFT (¬†\u0026gt;\u0026gt;\u0026gt;¬†) These operators are used very rarely, when we need to fiddle with numbers on the very lowest (bitwise) level. We won‚Äôt need these operators any time soon, as web development has little use of them, but in some special areas, such as cryptography, they are useful. You can read the¬†Bitwise Operators¬†chapter on MDN when a need arises.\nComma The comma operator¬†,¬†is one of the rarest and most unusual operators. Sometimes, it‚Äôs used to write shorter code, so we need to know it in order to understand what‚Äôs going on.\nThe comma operator allows us to evaluate several expressions, dividing them with a comma¬†,. Each of them is evaluated but only the result of the last one is returned.\nlet a = (1 + 2, 3 + 4); alert( a ); // 7 (the result of 3 + 4) Here, the first expression¬†1 + 2¬†is evaluated and its result is thrown away. Then,¬†3 + 4¬†is evaluated and returned as the result.\nComma has a very low precedence\nPlease note that the comma operator has very low precedence, lower than¬†=, so parentheses are important in the example above.\nWithout them:¬†a = 1 + 2, 3 + 4¬†evaluates¬†+¬†first, summing the numbers into¬†a = 3, 7, then the assignment operator¬†=¬†assigns¬†a = 3, and the rest is ignored. It‚Äôs like¬†(a = 1 + 2), 3 + 4.\nWhy do we need an operator that throws away everything except the last expression?\nSometimes, people use it in more complex constructs to put several actions in one line.\nFor example:\n// three operations in one line for (a = 1, b = 3, c = a * b; a \u0026lt; 10; a++) { ... } Comparisons We know many comparison operators from maths.\nIn JavaScript they are written like this:\nGreater/less than:¬†a \u0026gt; b,¬†a \u0026lt; b. Greater/less than or equals:¬†a \u0026gt;= b,¬†a \u0026lt;= b. Equals:¬†a == b, please note the double equality sign¬†==¬†means the equality test, while a single one¬†a = b¬†means an assignment. Not equals: In maths the notation is¬†‚â†, but in JavaScript it‚Äôs written as¬†a != b. In this article we‚Äôll learn more about different types of comparisons, how JavaScript makes them, including important peculiarities.\nAt the end you‚Äôll find a good recipe to avoid ‚ÄúJavaScript quirks‚Äù-related issues.\nBoolean is the result All comparison operators return a boolean value:\ntrue¬†‚Äì means ‚Äúyes‚Äù, ‚Äúcorrect‚Äù or ‚Äúthe truth‚Äù. false¬†‚Äì means ‚Äúno‚Äù, ‚Äúwrong‚Äù or ‚Äúnot the truth‚Äù. For example:\nconsole.log( 2 \u0026gt; 1 ); // true (correct) console.log( 2 == 1 ); // false (wrong) console.log( 2 != 1 ); // true (correct) A comparison result can be assigned to a variable, just like any value:\nlet result = 5 \u0026gt; 4; // assign the result of the comparison console.log( result ); // true String comparison To see whether a string is greater than another, JavaScript uses the so-called ‚Äúdictionary‚Äù or ‚Äúlexicographical‚Äù order.\nIn other words, strings are compared letter-by-letter.\nFor example:\nconsole.log( \u0026#39;Z\u0026#39; \u0026gt; \u0026#39;A\u0026#39; ); // true console.log( \u0026#39;Glow\u0026#39; \u0026gt; \u0026#39;Glee\u0026#39; ); // true console.log( \u0026#39;Bee\u0026#39; \u0026gt; \u0026#39;Be\u0026#39; ); // true The algorithm to compare two strings is simple:\nCompare the first character of both strings. If the first character from the first string is greater (or less) than the other string‚Äôs, then the first string is greater (or less) than the second. We‚Äôre done. Otherwise, if both strings‚Äô first characters are the same, compare the second characters the same way. Repeat until the end of either string. If both strings end at the same length, then they are equal. Otherwise, the longer string is greater. In the first example above, the comparison¬†'Z' \u0026gt; 'A'¬†gets to a result at the first step.\nThe second comparison¬†'Glow'¬†and¬†'Glee'¬†needs more steps as strings are compared character-by-character:\nG¬†is the same as¬†G. l¬†is the same as¬†l. o¬†is greater than¬†e. Stop here. The first string is greater. Not a real dictionary, but Unicode order\nThe comparison algorithm given above is roughly equivalent to the one used in dictionaries or phone books, but it‚Äôs not exactly the same.\nFor instance, case matters. A capital letter¬†\u0026quot;A\u0026quot;¬†is not equal to the lowercase¬†\u0026quot;a\u0026quot;. Which one is greater? The lowercase¬†\u0026quot;a\u0026quot;. Why? Because the lowercase character has a greater index in the internal encoding table JavaScript uses (Unicode). We‚Äôll get back to specific details and consequences of this in the chapter¬†Strings.\nComparison of different types When comparing values of different types, JavaScript converts the values to numbers.\nFor example:\nconsole.log( \u0026#39;2\u0026#39; \u0026gt; 1 ); // true, string \u0026#39;2\u0026#39; becomes a number 2 console.log( \u0026#39;01\u0026#39; == 1 ); // true, string \u0026#39;01\u0026#39; becomes a number 1 For boolean values,¬†true¬†becomes¬†1¬†and¬†false¬†becomes¬†0.\nFor example:\nalert( true == 1 ); // true alert( false == 0 ); // true A funny consequence\nIt is possible that at the same time:\nTwo values are equal. One of them is¬†true¬†as a boolean and the other one is¬†false¬†as a boolean. For example:\nlet a = 0; alert( Boolean(a) ); // false let b = \u0026#34;0\u0026#34;; alert( Boolean(b) ); // true alert(a == b); // true! From JavaScript‚Äôs standpoint, this result is quite normal. An equality check converts values using the numeric conversion (hence¬†\u0026quot;0\u0026quot;¬†becomes¬†0), while the explicit¬†Boolean¬†conversion uses another set of rules.\nStrict equality A regular equality check¬†==¬†has a problem. It cannot differentiate¬†0¬†from¬†false:\nalert( 0 == false ); // true The same thing happens with an empty string:\nalert( \u0026#39;\u0026#39; == false ); // true This happens because operands of different types are converted to numbers by the equality operator¬†==. An empty string, just like¬†false, becomes a zero.\nWhat to do if we‚Äôd like to differentiate¬†0¬†from¬†false?\nA strict equality operator¬†===¬†checks the equality without type conversion.\nIn other words, if¬†a¬†and¬†b¬†are of different types, then¬†a === b¬†immediately returns¬†false¬†without an attempt to convert them.\nLet‚Äôs try it:\nalert( 0 === false ); // false, because the types are different There is also a ‚Äústrict non-equality‚Äù operator¬†!==¬†analogous to¬†!=.\nThe strict equality operator is a bit longer to write, but makes it obvious what‚Äôs going on and leaves less room for errors.\nComparison with null and undefined There‚Äôs a non-intuitive behavior when¬†null¬†or¬†undefined¬†are compared to other values.\nFor a strict equality check¬†===\nThese values are different, because each of them is a different type.\nalert( null === undefined ); // false For a non-strict check¬†==\nThere‚Äôs a special rule. These two are a ‚Äúsweet couple‚Äù: they equal each other (in the sense of¬†==), but not any other value.\nFor maths and other comparisons¬†\u0026lt; \u0026gt; \u0026lt;= \u0026gt;=\nnull/undefined¬†are converted to numbers:¬†null¬†becomes¬†0, while¬†undefined¬†becomes¬†NaN.\nNow let‚Äôs see some funny things that happen when we apply these rules. And, what‚Äôs more important, how to not fall into a trap with them.\nStrange result: null vs 0 Let‚Äôs compare¬†null¬†with a zero:\nalert( null \u0026gt; 0 ); // (1) false alert( null == 0 ); // (2) false alert( null \u0026gt;= 0 ); // (3) true Mathematically, that‚Äôs strange. The last result states that ‚Äúnull¬†is greater than or equal to zero‚Äù, so in one of the comparisons above it must be¬†true, but they are both false.\nThe reason is that an equality check¬†==¬†and comparisons¬†\u0026gt; \u0026lt; \u0026gt;= \u0026lt;=¬†work differently. Comparisons convert¬†null¬†to a number, treating it as¬†0. That‚Äôs why (3)¬†null \u0026gt;= 0¬†is true and (1)¬†null \u0026gt; 0¬†is false.\nOn the other hand, the equality check¬†==¬†for¬†undefined¬†and¬†null¬†is defined such that, without any conversions, they equal each other and don‚Äôt equal anything else. That‚Äôs why (2)¬†null == 0¬†is false.\nAn incomparable undefined The value¬†undefined¬†shouldn‚Äôt be compared to other values:\nalert( undefined \u0026gt; 0 ); // false (1) alert( undefined \u0026lt; 0 ); // false (2) alert( undefined == 0 ); // false (3) Why does it dislike zero so much? Always false!\nWe get these results because:\nComparisons¬†(1)¬†and¬†(2)¬†return¬†false¬†because¬†undefined¬†gets converted to¬†NaN¬†and¬†NaN¬†is a special numeric value which returns¬†false¬†for all comparisons. The equality check¬†(3)¬†returns¬†false¬†because¬†undefined¬†only equals¬†null,¬†undefined, and no other value. Avoid Problems Why did we go over these examples? Should we remember these peculiarities all the time? Well, not really. Actually, these tricky things will gradually become familiar over time, but there‚Äôs a solid way to avoid problems with them:\nTreat any comparison with¬†undefined/null¬†except the strict equality¬†===¬†with exceptional care. Don‚Äôt use comparisons¬†\u0026gt;= \u0026gt; \u0026lt; \u0026lt;=¬†with a variable which may be¬†null/undefined, unless you‚Äôre really sure of what you‚Äôre doing. If a variable can have these values, check for them separately. Conditional branching: if, \u0026lsquo;?\u0026rsquo; Sometimes, we need to perform different actions based on different conditions.\nTo do that, we can use the¬†if¬†statement and the conditional operator¬†?, that‚Äôs also called a ‚Äúquestion mark‚Äù operator.\nThe ‚Äúif‚Äù statement The¬†if(...)¬†statement evaluates a condition in parentheses and, if the result is¬†true, executes a block of code.\nFor example:\nlet year = prompt(\u0026#34;In which year was ECMAScript-2015 specification published?\u0026#34;,\u0026#34;\u0026#34;); if (year == 2015) alert(\u0026#34;You are right!\u0026#34;); In the example above, the condition is a simple equality check (year == 2015), but it can be much more complex.\nIf we want to execute more than one statement, we have to wrap our code block inside curly braces:\nif (year == 2015) { alert( \u0026#34;That\u0026#39;s correct!\u0026#34; ); alert( \u0026#34;You\u0026#39;re so smart!\u0026#34; ); } We recommend wrapping your code block with curly braces¬†{}¬†every time you use an¬†if¬†statement, even if there is only one statement to execute. Doing so improves readability\nBoolean conversion The¬†if (‚Ä¶)¬†statement evaluates the expression in its parentheses and converts the result to a boolean.\nLet‚Äôs recall the conversion rules from the chapter¬†Type Conversions:\nA number¬†0, an empty string¬†\u0026quot;\u0026quot;,¬†null,¬†undefined, and¬†NaN¬†all become¬†false. Because of that they are called ‚Äúfalsy‚Äù values. Other values become¬†true, so they are called ‚Äútruthy‚Äù. So, the code under this condition would never execute:\nif (0) { // 0 is falsy ... } ‚Ä¶and inside this condition ‚Äì it always will:\nif (1) { // 1 is truthy ... } We can also pass a pre-evaluated boolean value to¬†if, like this:\nlet cond = (year == 2015); // equality evaluates to true or false if (cond) { ... } The ‚Äúelse‚Äù clause The if statement may contain an optional else block. It executes when the condition is falsy.\nFor example:\nlet year = prompt(\u0026#39;In which year was the ECMAScript-2015 specification published?\u0026#39;, \u0026#39;\u0026#39;); if (year == 2015) { alert( \u0026#39;You guessed it right!\u0026#39; ); } else { alert( \u0026#39;How can you be so wrong?\u0026#39; ); // any value except 2015 } Several conditions: ‚Äúelse if‚Äù Sometimes, we‚Äôd like to test several variants of a condition. The else if clause lets us do that.\nFor example:\nlet year = prompt(\u0026#39;In which year was the ECMAScript-2015 specification published?\u0026#39;, \u0026#39;\u0026#39;); if (year \u0026lt; 2015) { alert( \u0026#39;Too early...\u0026#39; ); } else if (year \u0026gt; 2015) { alert( \u0026#39;Too late\u0026#39; ); } else { alert( \u0026#39;Exactly!\u0026#39; ); } In the code above, JavaScript first checks¬†year \u0026lt; 2015. If that is falsy, it goes to the next condition¬†year \u0026gt; 2015. If that is also falsy, it shows the last¬†alert.\nThere can be more¬†else if¬†blocks. The final¬†else¬†is optional.\nConditional operator ‚Äò?‚Äô Sometimes, we need to assign a variable depending on a condition.\nFor instance:\nlet accessAllowed; let age = prompt(\u0026#39;How old are you?\u0026#39;, \u0026#39;\u0026#39;); if (age \u0026gt; 18) { accessAllowed = true; } else { accessAllowed = false; } alert(accessAllowed); The so-called ‚Äúconditional‚Äù or ‚Äúquestion mark‚Äù operator lets us do that in a shorter and simpler way.\nThe operator is represented by a question mark ?. Sometimes it‚Äôs called ‚Äúternary‚Äù, because the operator has three operands. It is actually the one and only operator in JavaScript which has that many.\nThe syntax is:\nlet result = condition ? value1 : value2; The¬†condition¬†is evaluated: if it‚Äôs truthy then¬†value1¬†is returned, otherwise ‚Äì¬†value2.\nFor example:\nlet accessAllowed = (age \u0026gt; 18) ? true : false; Technically, we can omit the parentheses around¬†age \u0026gt; 18. The question mark operator has a low precedence, so it executes after the comparison¬†\u0026gt;.\nThis example will do the same thing as the previous one:\n// the comparison operator \u0026#34;age \u0026gt; 18\u0026#34; executes first anyway // (no need to wrap it into parentheses) let accessAllowed = age \u0026gt; 18 ? true : false; But parentheses make the code more readable, so we recommend using them.\nPlease note: In the example above, you can avoid using the question mark operator because the comparison itself returns¬†true/false:\n// the same let accessAllowed = age \u0026gt; 18; Multiple ‚Äò?‚Äô A sequence of question mark operators¬†?¬†can return a value that depends on more than one condition.\nFor instance:\nlet age = prompt(\u0026#34;age?\u0026#34;, 18); let message = age \u0026lt; 3 ? \u0026#34;Hi, baby!\u0026#34; : age \u0026lt; 18 ? \u0026#34;Hello!\u0026#34; : age \u0026lt; 100 ? \u0026#34;Greetings!\u0026#34; : \u0026#34;What an unusual age!\u0026#34;; alert(message); It may be difficult at first to grasp what‚Äôs going on. But after a closer look, we can see that it‚Äôs just an ordinary sequence of tests:\nThe first question mark checks whether¬†age \u0026lt; 3. If true ‚Äì it returns¬†'Hi, baby!'. Otherwise, it continues to the expression after the colon ‚Äú:‚Äù, checking¬†age \u0026lt; 18. If that‚Äôs true ‚Äì it returns¬†'Hello!'. Otherwise, it continues to the expression after the next colon ‚Äú:‚Äù, checking¬†age \u0026lt; 100. If that‚Äôs true ‚Äì it returns¬†'Greetings!'. Otherwise, it continues to the expression after the last colon ‚Äú:‚Äù, returning¬†'What an unusual age!'. Here‚Äôs how this looks using¬†if..else:\nif (age \u0026lt; 3) { message = \u0026#39;Hi, baby!\u0026#39;; } else if (age \u0026lt; 18) { message = \u0026#39;Hello!\u0026#39;; } else if (age \u0026lt; 100) { message = \u0026#39;Greetings!\u0026#39;; } else { message = \u0026#39;What an unusual age!\u0026#39;; } Logical operators There are four logical operators in JavaScript:¬†||¬†(OR),¬†\u0026amp;\u0026amp;¬†(AND),¬†!¬†(NOT),¬†??¬†(Nullish Coalescing). Here we cover the first three, the¬†??¬†operator is in the next article.\nAlthough they are called ‚Äúlogical‚Äù, they can be applied to values of any type, not only boolean. Their result can also be of any type.\nLet‚Äôs see the details.\n|| (OR) The ‚ÄúOR‚Äù operator is represented with two vertical line symbols:\nresult = a || b; In classical programming, the logical OR is meant to manipulate boolean values only. If any of its arguments are¬†true, it returns¬†true, otherwise it returns¬†false.\nIn JavaScript, the operator is a little bit trickier and more powerful. But first, let‚Äôs see what happens with boolean values.\nThere are four possible logical combinations:\nconsole.log( true || true ); // true console.log( false || true ); // true console.log( true || false ); // true console.log( false || false ); // false As we can see, the result is always¬†true¬†except for the case when both operands are¬†false.\nIf an operand is not a boolean, it‚Äôs converted to a boolean for the evaluation.\nFor instance, the number¬†1¬†is treated as¬†true, the number¬†0¬†as¬†false:\nif (1 || 0) { // works just like if( true || false ) alert( \u0026#39;truthy!\u0026#39; ); } Most of the time, OR¬†||¬†is used in an¬†if¬†statement to test if¬†any¬†of the given conditions is¬†true.\nFor example:\nlet hour = 9; if (hour \u0026lt; 10 || hour \u0026gt; 18) { alert( \u0026#39;The office is closed.\u0026#39; ); } We can pass more conditions:\nlet hour = 12; let isWeekend = true; if (hour \u0026lt; 10 || hour \u0026gt; 18 || isWeekend) { alert( \u0026#39;The office is closed.\u0026#39; ); // it is the weekend } OR \u0026ldquo;||\u0026rdquo; finds the first truthy value The logic described above is somewhat classical. Now, let‚Äôs bring in the ‚Äúextra‚Äù features of JavaScript.\nThe extended algorithm works as follows.\nGiven multiple OR‚Äôed values:\nresult = value1 || value2 || value3; The OR || operator does the following:\nEvaluates operands from left to right. For each operand, converts it to boolean. If the result is true, stops and returns the original value of that operand. If all operands have been evaluated (i.e. all were false), returns the last operand. A value is returned in its original form, without the conversion.\nIn other words, a chain of OR || returns the first truthy value or the last one if no truthy value is found.\nFor instance:\nconsole.log(1 || 0); // 1 (1 is truthy) console.log(null || 1); // 1 (1 is the first truthy value) console.log(null || 0 || 1); // 1 (the first truthy value) console.log(undefined || null || 0); // 0 (all falsy, returns the last value) This leads to some interesting usage compared to a ‚Äúpure, classical, boolean-only OR‚Äù.\nGetting the first truthy value from a list of variables or expressions.\nFor instance, we have firstName, lastName and nickName variables, all optional (i.e. can be undefined or have falsy values).\nLet‚Äôs use OR || to choose the one that has the data and show it (or \u0026ldquo;Anonymous\u0026rdquo; if nothing set):\nlet firstName = \u0026#34;\u0026#34;; let lastName = \u0026#34;\u0026#34;; let nickName = \u0026#34;SuperCoder\u0026#34;; console.log( firstName || lastName || nickName || \u0026#34;Anonymous\u0026#34;); // SuperCoder If all variables were falsy,¬†\u0026quot;Anonymous\u0026quot;¬†would show up.\nShort-circuit evaluation.\nAnother feature of OR¬†||¬†operator is the so-called ‚Äúshort-circuit‚Äù evaluation.\nIt means that¬†||¬†processes its arguments until the first truthy value is reached, and then the value is returned immediately, without even touching the other argument.\nThe importance of this feature becomes obvious if an operand isn‚Äôt just a value, but an expression with a side effect, such as a variable assignment or a function call.\nIn the example below, only the second message is printed:\ntrue || alert(\u0026#34;not printed\u0026#34;); false || alert(\u0026#34;printed\u0026#34;); In the first line, the OR¬†||¬†operator stops the evaluation immediately upon seeing¬†true, so the¬†alert¬†isn‚Äôt run.\nSometimes, people use this feature to execute commands only if the condition on the left part is falsy.\n\u0026amp;\u0026amp; (AND) The AND operator is represented with two ampersands¬†\u0026amp;\u0026amp;:\nresult = a \u0026amp;\u0026amp; b; In classical programming, AND returns¬†true¬†if both operands are truthy and¬†false¬†otherwise:\nconsole.log( true \u0026amp;\u0026amp; true ); // true console.log( false \u0026amp;\u0026amp; true ); // false console.log( true \u0026amp;\u0026amp; false ); // false console.log( false \u0026amp;\u0026amp; false ); // false An example with¬†if:\nlet hour = 12; let minute = 30; if (hour == 12 \u0026amp;\u0026amp; minute == 30) { alert( \u0026#39;The time is 12:30\u0026#39; ); } Just as with OR, any value is allowed as an operand of AND:\nif (1 \u0026amp;\u0026amp; 0) { // evaluated as true \u0026amp;\u0026amp; false alert( \u0026#34;won\u0026#39;t work, because the result is falsy\u0026#34; ); } AND ‚Äú\u0026amp;\u0026amp;‚Äù finds the first falsy value Given multiple AND‚Äôed values:\nresult = value1 \u0026amp;\u0026amp; value2 \u0026amp;\u0026amp; value3; The AND¬†\u0026amp;\u0026amp;¬†operator does the following:\nEvaluates operands from left to right. For each operand, converts it to a boolean. If the result is¬†false, stops and returns the original value of that operand. If all operands have been evaluated (i.e. all were truthy), returns the last operand. In other words, AND returns the first falsy value or the last value if none were found.\nThe rules above are similar to OR. The difference is that AND returns the first¬†falsy¬†value while OR returns the first¬†truthy¬†one.\nExamples:\n// if the first operand is truthy, // AND returns the second operand: alert( 1 \u0026amp;\u0026amp; 0 ); // 0 alert( 1 \u0026amp;\u0026amp; 5 ); // 5 // if the first operand is falsy, // AND returns it. The second operand is ignored alert( null \u0026amp;\u0026amp; 5 ); // null alert( 0 \u0026amp;\u0026amp; \u0026#34;no matter what\u0026#34; ); // 0 We can also pass several values in a row. See how the first falsy one is returned:\nalert( 1 \u0026amp;\u0026amp; 2 \u0026amp;\u0026amp; null \u0026amp;\u0026amp; 3 ); // null When all values are truthy, the last value is returned:\nalert( 1 \u0026amp;\u0026amp; 2 \u0026amp;\u0026amp; 3 ); // 3, the last one Precedence of AND \u0026amp;\u0026amp; is higher than OR || The precedence of AND \u0026amp;\u0026amp; operator is higher than OR ||.\nSo the code a \u0026amp;\u0026amp; b || c \u0026amp;\u0026amp; d is essentially the same as if the \u0026amp;\u0026amp; expressions were in parentheses: (a \u0026amp;\u0026amp; b) || (c \u0026amp;\u0026amp; d).\nDon‚Äôt replace¬†if¬†with¬†||¬†or¬†\u0026amp;\u0026amp;\nSometimes, people use the AND¬†\u0026amp;\u0026amp;¬†operator as a ‚Äúshorter way to write¬†if‚Äù.\nFor instance:\nlet x = 1; (x \u0026gt; 0) \u0026amp;\u0026amp; alert( \u0026#39;Greater than zero!\u0026#39; ); The action in the right part of¬†\u0026amp;\u0026amp;¬†would execute only if the evaluation reaches it. That is, only if¬†(x \u0026gt; 0)¬†is true.\nSo we basically have an analogue for:\nlet x = 1; if (x \u0026gt; 0) alert( \u0026#39;Greater than zero!\u0026#39; ); Although, the variant with¬†\u0026amp;\u0026amp;¬†appears shorter,¬†if¬†is more obvious and tends to be a little bit more readable. So we recommend using every construct for its purpose: use¬†if¬†if we want¬†if¬†and use¬†\u0026amp;\u0026amp;¬†if we want AND.\n! (NOT) The boolean NOT operator is represented with an exclamation sign !.\nThe syntax is pretty simple:\nresult = !value; The operator accepts a single argument and does the following:\nConverts the operand to boolean type: true/false. Returns the inverse value.\nFor instance:\nalert( !true ); // false alert( !0 ); // true A double NOT¬†!!¬†is sometimes used for converting a value to boolean type:\nalert( !!\u0026#34;non-empty string\u0026#34; ); // true alert( !!null ); // false That is, the first NOT converts the value to boolean and returns the inverse, and the second NOT inverses it again. In the end, we have a plain value-to-boolean conversion.\nThere‚Äôs a little more verbose way to do the same thing ‚Äì a built-in¬†Boolean¬†function:\nalert( Boolean(\u0026#34;non-empty string\u0026#34;) ); // true alert( Boolean(null) ); // false The precedence of NOT¬†!¬†is the highest of all logical operators, so it always executes first, before¬†\u0026amp;\u0026amp;¬†or¬†||.\nNullish coalescing operator \u0026lsquo;??\u0026rsquo; The nullish coalescing operator is written as two question marks¬†??.\nAs it treats¬†null¬†and¬†undefined¬†similarly, we‚Äôll use a special term here, in this article. For brevity, we‚Äôll say that a value is ‚Äúdefined‚Äù when it‚Äôs neither¬†null¬†nor¬†undefined.\nThe result of¬†a ?? b¬†is:\nif¬†a¬†is defined, then¬†a, if¬†a¬†isn‚Äôt defined, then¬†b. In other words,¬†??¬†returns the first argument if it‚Äôs not¬†null/undefined. Otherwise, the second one.\nThe nullish coalescing operator isn‚Äôt anything completely new. It‚Äôs just a nice syntax to get the first ‚Äúdefined‚Äù value of the two.\nWe can rewrite¬†result = a ?? b¬†using the operators that we already know, like this:\nresult = (a !== null \u0026amp;\u0026amp; a !== undefined) ? a : b; Now it should be absolutely clear what ?? does. Let‚Äôs see where it helps.\nThe common use case for ?? is to provide a default value.\nFor example, here we show user if its value isn‚Äôt null/undefined, otherwise Anonymous:\nlet user; alert(user ?? \u0026#34;Anonymous\u0026#34;); // Anonymous (user is undefined) Here‚Äôs the example with¬†user¬†assigned to a name:\nlet user = \u0026#34;John\u0026#34;; alert(user ?? \u0026#34;Anonymous\u0026#34;); // John (user is not null/undefined) We can also use a sequence of¬†??¬†to select the first value from a list that isn‚Äôt¬†null/undefined.\nLet‚Äôs say we have a user‚Äôs data in variables¬†firstName,¬†lastName¬†or¬†nickName. All of them may be not defined, if the user decided not to fill in the corresponding values.\nWe‚Äôd like to display the user name using one of these variables, or show ‚ÄúAnonymous‚Äù if all of them are¬†null/undefined.\nLet‚Äôs use the¬†??¬†operator for that:\nlet firstName = null; let lastName = null; let nickName = \u0026#34;Supercoder\u0026#34;; // shows the first defined value: alert(firstName ?? lastName ?? nickName ?? \u0026#34;Anonymous\u0026#34;); // Supercoder Loops: while and for The ‚Äúwhile‚Äù loop The¬†while¬†loop has the following syntax:\nwhile (condition) { // code // so-called \u0026#34;loop body\u0026#34; } While the condition is truthy, the code from the loop body is executed.\nFor instance, the loop below outputs i while i \u0026lt; 3:\nlet i = 0; while (i \u0026lt; 3) { // shows 0, then 1, then 2 alert( i ); i++; } A single execution of the loop body is called¬†an iteration. The loop in the example above makes three iterations.\nIf¬†i++¬†was missing from the example above, the loop would repeat (in theory) forever. In practice, the browser provides ways to stop such loops, and in server-side JavaScript, we can kill the process.\nAny expression or variable can be a loop condition, not just comparisons: the condition is evaluated and converted to a boolean by¬†while.\nFor instance, a shorter way to write¬†while (i != 0)¬†is¬†while (i):\nlet i = 3; while (i) { // when i becomes 0, the condition becomes falsy, and the loop stops alert( i ); i--; } Curly braces are not required for a single-line body\nIf the loop body has a single statement, we can omit the curly braces¬†{‚Ä¶}:\nlet i = 3; while (i) alert(i--); The ‚Äúdo‚Ä¶while‚Äù loop The condition check can be moved below the loop body using the do..while syntax:\ndo { // loop body } while (condition); The loop will first execute the body, then check the condition, and, while it‚Äôs truthy, execute it again and again.\nlet i = 0; do { alert( i ); i++; } while (i \u0026lt; 3); This form of syntax should only be used when you want the body of the loop to execute¬†at least once¬†regardless of the condition being truthy. Usually, the other form is preferred:¬†while(‚Ä¶) {‚Ä¶}.\nThe ‚Äúfor‚Äù loop The for loop is more complex, but it‚Äôs also the most commonly used loop.\nIt looks like this:\nfor (begin; condition; step) { // ... loop body ... } Let‚Äôs learn the meaning of these parts by example. The loop below runs alert(i) for i from 0 up to (but not including) 3:\nfor (let i = 0; i \u0026lt; 3; i++) { // shows 0, then 1, then 2 alert(i); } Let‚Äôs examine the¬†for¬†statement part-by-part:\npart begin let i = 0 executes once upon entering the loop condition i\u0026lt; 3 Checked before every loop iteration. If false, the loop stops body alert(i) Run again and again while the condition is truthy step i++ Executes after the body on each iteration. The general loop algorithm works like this: Run begin ‚Üí (if condition ‚Üí run body and run step) ‚Üí (if condition ‚Üí run body and run step) ‚Üí (if condition ‚Üí run body and run step) ‚Üí ... That is,¬†begin¬†executes once, and then it iterates: after each¬†condition¬†test,¬†body¬†and¬†step¬†are executed.\nIf you are new to loops, it could help to go back to the example and reproduce how it runs step-by-step on a piece of paper.\nHere‚Äôs exactly what happens in our case:\n// for (let i = 0; i \u0026lt; 3; i++) alert(i) // run begin let i = 0 // if condition ‚Üí run body and run step if (i \u0026lt; 3) { alert(i); i++ } // if condition ‚Üí run body and run step if (i \u0026lt; 3) { alert(i); i++ } // if condition ‚Üí run body and run step if (i \u0026lt; 3) { alert(i); i++ } // ...finish, because now i == 3 Breaking the loop Normally, a loop exits when its condition becomes falsy.\nBut we can force the exit at any time using the special¬†break¬†directive.\nFor example, the loop below asks the user for a series of numbers, ‚Äúbreaking‚Äù when no number is entered:\nlet sum = 0; while (true) { let value = +prompt(\u0026#34;Enter a number\u0026#34;, \u0026#39;\u0026#39;); if (!value) break; // (*) sum += value; } alert( \u0026#39;Sum: \u0026#39; + sum ); The¬†break¬†directive is activated at the line¬†(*)¬†if the user enters an empty line or cancels the input. It stops the loop immediately, passing control to the first line after the loop. Namely,¬†alert.\nThe combination ‚Äúinfinite loop +¬†break¬†as needed‚Äù is great for situations when a loop‚Äôs condition must be checked not in the beginning or end of the loop, but in the middle or even in several places of its body.\nContinue to the next iteration The¬†continue¬†directive is a ‚Äúlighter version‚Äù of¬†break. It doesn‚Äôt stop the whole loop. Instead, it stops the current iteration and forces the loop to start a new one (if the condition allows).\nWe can use it if we‚Äôre done with the current iteration and would like to move on to the next one.\nThe loop below uses¬†continue¬†to output only odd values:\nfor (let i = 0; i \u0026lt; 10; i++) { // if true, skip the remaining part of the body if (i % 2 == 0) continue; alert(i); // 1, then 3, 5, 7, 9 } For even values of¬†i, the¬†continue¬†directive stops executing the body and passes control to the next iteration of¬†for¬†(with the next number). So the¬†alert¬†is only called for odd values.\nNo¬†break/continue¬†to the right side of ‚Äò?‚Äô\nPlease note that syntax constructs that are not expressions cannot be used with the ternary operator¬†?. In particular, directives such as¬†break/continue¬†aren‚Äôt allowed there.\nFor example, if we take this code:\nif (i \u0026gt; 5) { alert(i); } else { continue; } ‚Ä¶and rewrite it using a question mark:\n(i \u0026gt; 5) ? alert(i) : continue; // continue isn\u0026#39;t allowed here ‚Ä¶it stops working: there‚Äôs a syntax error.\nThis is just another reason not to use the question mark operator¬†?¬†instead of¬†if.\nLabels for break/continue Sometimes we need to break out from multiple nested loops at once.\nFor example, in the code below we loop over¬†i¬†and¬†j, prompting for the coordinates¬†(i, j)¬†from¬†(0,0)¬†to¬†(2,2):\nfor (let i = 0; i \u0026lt; 3; i++) { for (let j = 0; j \u0026lt; 3; j++) { let input = prompt(`Value at coords (${i},${j})`, \u0026#39;\u0026#39;); // what if we want to exit from here to Done (below)? } } alert(\u0026#39;Done!\u0026#39;); We need a way to stop the process if the user cancels the input.\nThe ordinary¬†break¬†after¬†input¬†would only break the inner loop. That‚Äôs not sufficient ‚Äì labels, come to the rescue!\nA¬†label¬†is an identifier with a colon before a loop:\nlabelName: for (...) { ... } The¬†break \u0026lt;labelName\u0026gt;¬†statement in the loop below breaks out to the label:\nouter: for (let i = 0; i \u0026lt; 3; i++) { for (let j = 0; j \u0026lt; 3; j++) { let input = prompt(`Value at coords (${i},${j})`, \u0026#39;\u0026#39;); // if an empty string or canceled, then break out of both loops if (!input) break outer; // (*) // do something with the value... } } alert(\u0026#39;Done!\u0026#39;); In the code above,¬†break outer¬†looks upwards for the label named¬†outer¬†and breaks out of that loop.\nSo the control goes straight from¬†(*)¬†to¬†alert('Done!').\nWe can also move the label onto a separate line:\nouter: for (let i = 0; i \u0026lt; 3; i++) { ... } The¬†continue¬†directive can also be used with a label. In this case, code execution jumps to the next iteration of the labeled loop.\nLabels do not allow to ‚Äújump‚Äù anywhere\nLabels do not allow us to jump into an arbitrary place in the code.\nFor example, it is impossible to do this:\nbreak label; // jump to the label below (doesn\u0026#39;t work) label: for (...) A¬†break¬†directive must be inside a code block. Technically, any labelled code block will do, e.g.:\nlabel: { // ... break label; // works // ... } ‚Ä¶Although, 99.9% of the time¬†break¬†is used inside loops, as we‚Äôve seen in the examples above.\nA¬†continue¬†is only possible from inside a loop.\nThe \u0026ldquo;switch\u0026rdquo; statement A¬†switch¬†statement can replace multiple¬†if¬†checks.\nIt gives a more descriptive way to compare a value with multiple variants.\nThe syntax The¬†switch¬†has one or more¬†case¬†blocks and an optional default.\nIt looks like this:\nswitch(x) { case \u0026#39;value1\u0026#39;: // if (x === \u0026#39;value1\u0026#39;) ... [break] case \u0026#39;value2\u0026#39;: // if (x === \u0026#39;value2\u0026#39;) ... [break] default: ... [break] } The value of¬†x¬†is checked for a strict equality to the value from the first¬†case¬†(that is,¬†value1) then to the second (value2) and so on. If the equality is found,¬†switch¬†starts to execute the code starting from the corresponding¬†case, until the nearest¬†break¬†(or until the end of¬†switch). If no case is matched then the¬†default¬†code is executed (if it exists). Type matters Let‚Äôs emphasize that the equality check is always strict. The values must be of the same type to match.\nFor example, let‚Äôs consider the code:\nlet arg = prompt(\u0026#34;Enter a value?\u0026#34;); switch (arg) { case \u0026#39;0\u0026#39;: case \u0026#39;1\u0026#39;: alert( \u0026#39;One or zero\u0026#39; ); break; case \u0026#39;2\u0026#39;: alert( \u0026#39;Two\u0026#39; ); break; case 3: alert( \u0026#39;Never executes!\u0026#39; ); break; default: alert( \u0026#39;An unknown value\u0026#39; ); } For¬†0,¬†1, the first¬†alert¬†runs. For¬†2¬†the second¬†alert¬†runs. But for¬†3, the result of the¬†prompt¬†is a string¬†\u0026quot;3\u0026quot;, which is not strictly equal¬†===¬†to the number¬†3. So we‚Äôve got a dead code in¬†case 3! The¬†default¬†variant will execute. Functions Quite often we need to perform a similar action in many places of the script.\nFor example, we need to show a nice-looking message when a visitor logs in, logs out and maybe somewhere else.\nFunctions are the main ‚Äúbuilding blocks‚Äù of the program. They allow the code to be called many times without repetition.\nWe‚Äôve already seen examples of built-in functions, like alert(message), prompt(message, default) and confirm(question). But we can create functions of our own as well.\nFunction Declaration To create a function we can use a function declaration.\nIt looks like this:\nfunction showMessage() { alert( \u0026#39;Hello everyone!\u0026#39; ); } The¬†function¬†keyword goes first, then goes the¬†name of the function, then a list of¬†parameters¬†between the parentheses (comma-separated, empty in the example above, we‚Äôll see examples later) and finally the code of the function, also named ‚Äúthe function body‚Äù, between curly braces.\nfunction name(parameter1, parameter2, ... parameterN) { // body } Our new function can be called by its name:¬†showMessage().\nThe call showMessage() executes the code of the function. Here we will see the message two times.\nThis example clearly demonstrates one of the main purposes of functions: to avoid code duplication.\nIf we ever need to change the message or the way it is shown, it‚Äôs enough to modify the code in one place: the function which outputs it.\nLocal variables A variable declared inside a function is only visible inside that function.\nFor example:\nfunction showMessage() { let message = \u0026#34;Hello, I\u0026#39;m JavaScript!\u0026#34;; // local variable alert( message ); } showMessage(); // Hello, I\u0026#39;m JavaScript! alert( message ); // \u0026lt;-- Error! The variable is local to the function Outer Variables A function can access an outer variable as well, for example:\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { let message = \u0026#39;Hello, \u0026#39; + userName; alert(message); } showMessage(); // Hello, John The function has full access to the outer variable. It can modify it as well.\nFor instance:\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { userName = \u0026#34;Bob\u0026#34;; // (1) changed the outer variable let message = \u0026#39;Hello, \u0026#39; + userName; alert(message); } alert( userName ); // John before the function call showMessage(); alert( userName ); // Bob, the value was modified by the function The outer variable is only used if there‚Äôs no local one.\nIf a same-named variable is declared inside the function then it¬†shadows¬†the outer one. For instance, in the code below the function uses the local¬†userName. The outer one is ignored:\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { let userName = \u0026#34;Bob\u0026#34;; // declare a local variable let message = \u0026#39;Hello, \u0026#39; + userName; // Bob alert(message); } // the function will create and use its own userName showMessage(); alert( userName ); // John, unchanged, the function did not access the outer variable Parameters We can pass arbitrary data to functions using parameters.\nIn the example below, the function has two parameters:¬†from¬†and¬†text.\nfunction showMessage(from, text) { // parameters: from, text alert(from + \u0026#39;: \u0026#39; + text); } showMessage(\u0026#39;Ann\u0026#39;, \u0026#39;Hello!\u0026#39;); // Ann: Hello! (1) showMessage(\u0026#39;Ann\u0026#39;, \u0026#34;What\u0026#39;s up?\u0026#34;); // Ann: What\u0026#39;s up? (2) When the function is called in lines (1) and (2), the given values are copied to local variables from and text. Then the function uses them.\nHere‚Äôs one more example: we have a variable from and pass it to the function. Please note: the function changes from, but the change is not seen outside, because a function always gets a copy of the value:\nfunction showMessage(from, text) { from = \u0026#39;*\u0026#39; + from + \u0026#39;*\u0026#39;; // make \u0026#34;from\u0026#34; look nicer alert( from + \u0026#39;: \u0026#39; + text ); } let from = \u0026#34;Ann\u0026#34;; showMessage(from, \u0026#34;Hello\u0026#34;); // *Ann*: Hello // the value of \u0026#34;from\u0026#34; is the same, the function modified a local copy alert( from ); // Ann When a value is passed as a function parameter, it‚Äôs also called an argument.\nIn other words, to put these terms straight:\nA parameter is the variable listed inside the parentheses in the function declaration (it‚Äôs a declaration time term). An argument is the value that is passed to the function when it is called (it‚Äôs a call time term). We declare functions listing their parameters, then call them passing arguments.\nIn the example above, one might say: ‚Äúthe function showMessage is declared with two parameters, then called with two arguments: from and \u0026ldquo;Hello\u0026rdquo;‚Äù.\nDefault values If a function is called, but an argument is not provided, then the corresponding value becomes undefined.\nFor instance, the aforementioned function showMessage(from, text) can be called with a single argument:\nfunction showMessage(from, text = \u0026#34;no text given\u0026#34;) { alert( from + \u0026#34;: \u0026#34; + text ); } showMessage(\u0026#34;Ann\u0026#34;); // Ann: no text given Default parameters in old JavaScript code Several years ago, JavaScript didn‚Äôt support the syntax for default parameters. So people used other ways to specify them.\nNowadays, we can come across them in old scripts.\nFor example, an explicit check for undefined:\nfunction showMessage(from, text) { if (text === undefined) { text = \u0026#39;no text given\u0026#39;; } alert( from + \u0026#34;: \u0026#34; + text ); } ‚Ä¶Or using the¬†||¬†operator:\nfunction showMessage(from, text) { // If the value of text is falsy, assign the default value // this assumes that text == \u0026#34;\u0026#34; is the same as no text at all text = text || \u0026#39;no text given\u0026#39;; ... } Alternative default parameters Sometimes it makes sense to assign default values for parameters at a later stage after the function declaration.\nWe can check if the parameter is passed during the function execution, by comparing it with¬†undefined:\nfunction showMessage(text) { // ... if (text === undefined) { // if the parameter is missing text = \u0026#39;empty message\u0026#39;; } alert(text); } showMessage(); // empty message Returning a value A function can return a value back into the calling code as the result.\nThe simplest example would be a function that sums two values:\nfunction sum(a, b) { return a + b; } let result = sum(1, 2); console.log( result ); // 3 A function with an empty¬†return¬†or without it returns¬†undefined\nIf a function does not return a value, it is the same as if it returns¬†undefined\nfunction doNothing() { /* empty */ } alert( doNothing() === undefined ); // true An empty¬†return¬†is also the same as¬†return undefined:\nfunction doNothing() { return; } alert( doNothing() === undefined ); // true One function ‚Äì one action\nA function should do exactly what is suggested by its name, no more.\nTwo independent actions usually deserve two functions, even if they are usually called together (in that case we can make a 3rd function that calls those two).\nA few examples of breaking this rule:\ngetAge¬†‚Äì would be bad if it shows an¬†alert¬†with the age (should only get). createForm¬†‚Äì would be bad if it modifies the document, adding a form to it (should only create it and return). checkPermission¬†‚Äì would be bad if it displays the¬†access granted/denied¬†message (should only perform the check and return the result). These examples assume common meanings of prefixes. You and your team are free to agree on other meanings, but usually they‚Äôre not much different. In any case, you should have a firm understanding of what a prefix means, what a prefixed function can and cannot do. All same-prefixed functions should obey the rules. And the team should share the knowledge.\nFunction expressions In JavaScript, a function is not a ‚Äúmagical language structure‚Äù, but a special kind of value.\nThe syntax that we used before is called a¬†Function Declaration:\nfunction sayHi() { alert( \u0026#34;Hello\u0026#34; ); } There is another syntax for creating a function that is called a Function Expression.\nIt allows us to create a new function in the middle of any expression.\nFor example:\nlet sayHi = function() { alert( \u0026#34;Hello\u0026#34; ); }; Here we can see a variable¬†sayHi¬†getting a value, the new function, created as¬†function() { alert(\u0026quot;Hello\u0026quot;); }.\nAs the function creation happens in the context of the assignment expression (to the right side of¬†=), this is a¬†Function Expression.\nPlease note, there‚Äôs no name after the¬†function¬†keyword. Omitting a name is allowed for Function Expressions.\nHere we immediately assign it to the variable, so the meaning of these code samples is the same: ‚Äúcreate a function and put it into the variable¬†sayHi‚Äù.\nIn more advanced situations, that we‚Äôll come across later, a function may be created and immediately called or scheduled for a later execution, not stored anywhere, thus remaining anonymous.\nFunction is a value Let‚Äôs reiterate: no matter how the function is created, a function is a value. Both examples above store a function in the¬†sayHi¬†variable.\nWe can even print out that value using¬†alert:\nfunction sayHi() { alert( \u0026#34;Hello\u0026#34; ); } alert( sayHi ); // shows the function code Please note that the last line does not run the function, because there are no parentheses after¬†sayHi. There are programming languages where any mention of a function name causes its execution, but JavaScript is not like that.\nIn JavaScript, a function is a value, so we can deal with it as a value. The code above shows its string representation, which is the source code.\nSurely, a function is a special value, in the sense that we can call it like¬†sayHi().\nBut it‚Äôs still a value. So we can work with it like with other kinds of values.\nWe can copy a function to another variable:\nfunction sayHi() { // (1) create alert( \u0026#34;Hello\u0026#34; ); } let func = sayHi; // (2) copy func(); // Hello // (3) run the copy (it works)! sayHi(); // Hello // this still works too (why wouldn\u0026#39;t it) Here‚Äôs what happens above in detail:\nThe Function Declaration¬†(1)¬†creates the function and puts it into the variable named¬†sayHi. Line¬†(2)¬†copies it into the variable¬†func. Please note again: there are no parentheses after¬†sayHi. If there were, then¬†func = sayHi()¬†would write¬†the result of the call¬†sayHi()¬†into¬†func, not¬†the function¬†sayHi¬†itself. Now the function can be called as both¬†sayHi()¬†and¬†func(). We could also have used a Function Expression to declare¬†sayHi, in the first line:\nlet sayHi = function() { // (1) create alert( \u0026#34;Hello\u0026#34; ); }; let func = sayHi; // ... Everything would work the same.\nWhy is there a semicolon at the end?\nYou might wonder, why do Function Expressions have a semicolon¬†;¬†at the end, but Function Declarations do not:\nfunction sayHi() { // ... } let sayHi = function() { // ... }; The answer is simple: a Function Expression is created here as function(‚Ä¶) {‚Ä¶} inside the assignment statement: let sayHi = ‚Ä¶;. The semicolon ; is recommended at the end of the statement, it‚Äôs not a part of the function syntax.\nThe semicolon would be there for a simpler assignment, such as let sayHi = 5;, and it‚Äôs also there for a function assignment.\nfunction callbacks Let‚Äôs look at more examples of passing functions as values and using function expressions.\nWe‚Äôll write a function¬†ask(question, yes, no)¬†with three parameters:\nquestion\nText of the question\nyes\nFunction to run if the answer is ‚ÄúYes‚Äù\nno\nFunction to run if the answer is ‚ÄúNo‚Äù\nThe function should ask the¬†question¬†and, depending on the user‚Äôs answer, call¬†yes()¬†or¬†no():\nfunction ask(question, yes, no) { if (confirm(question)) yes() else no(); } function showOk() { alert( \u0026#34;You agreed.\u0026#34; ); } function showCancel() { alert( \u0026#34;You canceled the execution.\u0026#34; ); } // usage: functions showOk, showCancel are passed as arguments to ask ask(\u0026#34;Do you agree?\u0026#34;, showOk, showCancel); In practice, such functions are quite useful. The major difference between a real-life¬†ask¬†and the example above is that real-life functions use more complex ways to interact with the user than a simple¬†confirm. In the browser, such functions usually draw a nice-looking question window. But that‚Äôs another story.\nThe arguments¬†showOk¬†and¬†showCancel¬†of¬†ask¬†are called¬†callback functions¬†or just¬†callbacks.\nThe idea is that we pass a function and expect it to be ‚Äúcalled back‚Äù later if necessary. In our case,¬†showOk¬†becomes the callback for ‚Äúyes‚Äù answer, and¬†showCancel¬†for ‚Äúno‚Äù answer.\nWe can use Function Expressions to write an equivalent, shorter function:\nfunction ask(question, yes, no) { if (confirm(question)) yes() else no(); } ask( \u0026#34;Do you agree?\u0026#34;, function() { alert(\u0026#34;You agreed.\u0026#34;); }, function() { alert(\u0026#34;You canceled the execution.\u0026#34;); } ); Here, functions are declared right inside the¬†ask(...)¬†call. They have no name, and so are called¬†anonymous. Such functions are not accessible outside of¬†ask¬†(because they are not assigned to variables), but that‚Äôs just what we want here.\nSuch code appears in our scripts very naturally, it‚Äôs in the spirit of JavaScript.\nA function is a value representing an ‚Äúaction‚Äù Regular values like strings or numbers represent the data.\nA function can be perceived as an action.\nWe can pass it between variables and run when we want.\nFunction Expression vs Function Declaration Let‚Äôs formulate the key differences between Function Declarations and Expressions.\nFirst, the syntax: how to differentiate between them in the code.\nFunction Declaration:¬†a function, declared as a separate statement, in the main code flow: // Function Declaration function sum(a, b) { return a + b; } Function Expression:¬†a function, created inside an expression or inside another syntax construct. Here, the function is created on the right side of the ‚Äúassignment expression‚Äù¬†=: // Function Expression let sum = function(a, b) { return a + b; }; The more subtle difference is¬†when¬†a function is created by the JavaScript engine.\nA Function Expression is created when the execution reaches it and is usable only from that moment. Once the execution flow passes to the right side of the assignment¬†let sum = function‚Ä¶¬†‚Äì here we go, the function is created and can be used (assigned, called, etc. ) from now on.\nFunction Declarations are different.\nA Function Declaration can be called earlier than it is defined. For example, a global Function Declaration is visible in the whole script, no matter where it is.\nThat‚Äôs due to internal algorithms. When JavaScript prepares to run the script, it first looks for global Function Declarations in it and creates the functions. We can think of it as an ‚Äúinitialization stage‚Äù.\nAnd after all Function Declarations are processed, the code is executed. So it has access to these functions.\nFor example, this works:\nsayHi(\u0026#34;John\u0026#34;); // Hello, John function sayHi(name) { alert( `Hello, ${name}` ); } The Function Declaration sayHi is created when JavaScript is preparing to start the script and is visible everywhere in it.\n‚Ä¶If it were a Function Expression, then it wouldn‚Äôt work\nsayHi(\u0026#34;John\u0026#34;); // error! let sayHi = function(name) { // (*) no magic any more alert( `Hello, ${name}` ); }; In strict mode, when a Function Declaration is within a code block, it‚Äôs visible everywhere inside that block. But not outside of it. When to choose Function Declaration versus Function Expression? As a rule of thumb, when we need to declare a function, the first thing to consider is Function Declaration syntax. It gives more freedom in how to organize our code, because we can call such functions before they are declared.\nThat‚Äôs also better for readability, as it‚Äôs easier to look up function f(‚Ä¶) {‚Ä¶} in the code than let f = function(‚Ä¶) {‚Ä¶};. Function Declarations are more ‚Äúeye-catching‚Äù.\n‚Ä¶But if a Function Declaration does not suit us for some reason, or we need a conditional declaration (we‚Äôve just seen an example), then Function Expression should be used.\nSummary Functions are values. They can be assigned, copied or declared in any place of the code. If the function is declared as a separate statement in the main code flow, that‚Äôs called a ‚ÄúFunction Declaration‚Äù. If the function is created as a part of an expression, it‚Äôs called a ‚ÄúFunction Expression‚Äù. Function Declarations are processed before the code block is executed. They are visible everywhere in the block. Function Expressions are created when the execution flow reaches them. In most cases when we need to declare a function, a Function Declaration is preferable, because it is visible prior to the declaration itself. That gives us more flexibility in code organization, and is usually more readable.\nSo we should use a Function Expression only when a Function Declaration is not fit for the task. We‚Äôve seen a couple of examples of that in this chapter, and will see more in the future.\nArrow functions, the basics There‚Äôs another very simple and concise syntax for creating functions, that‚Äôs often better than Function Expressions.\nIt‚Äôs called ‚Äúarrow functions‚Äù, because it looks like this:\nlet func = (arg1, arg2, ..., argN) =\u0026gt; expression; This creates a function¬†func¬†that accepts arguments¬†arg1..argN, then evaluates the¬†expression¬†on the right side with their use and returns its result.\nIn other words, it‚Äôs the shorter version of:\nlet func = function(arg1, arg2, ..., argN) { return expression; }; Let‚Äôs see a concrete example:\nlet sum = (a, b) =\u0026gt; a + b; /* This arrow function is a shorter form of: let sum = function(a, b) { return a + b; }; */ alert( sum(1, 2) ); // 3 As you can see,¬†(a, b) =\u0026gt; a + b¬†means a function that accepts two arguments named¬†a¬†and¬†b. Upon the execution, it evaluates the expression¬†a + b¬†and returns the result.\nIf we have only one argument, then parentheses around parameters can be omitted, making that even shorter. For example:\nlet double = n =\u0026gt; n * 2; // roughly the same as: let double = function(n) { return n * 2 } alert( double(3) ); // 6 If there are no arguments, parentheses are empty, but they must be present: let sayHi = () =\u0026gt; alert(\u0026#34;Hello!\u0026#34;); sayHi(); Arrow functions can be used in the same way as Function Expressions.\nFor instance, to dynamically create a function:\nlet age = prompt(\u0026#34;What is your age?\u0026#34;, 18); let welcome = (age \u0026lt; 18) ? () =\u0026gt; alert(\u0026#39;Hello!\u0026#39;) : () =\u0026gt; alert(\u0026#34;Greetings!\u0026#34;); welcome(); Arrow functions may appear unfamiliar and not very readable at first, but that quickly changes as the eyes get used to the structure.\nThey are very convenient for simple one-line actions, when we‚Äôre just too lazy to write many words.\nMultiline arrow functions The arrow functions that we‚Äôve seen so far were very simple. They took arguments from the left of =\u0026gt;, evaluated and returned the right-side expression with them.\nSometimes we need a more complex function, with multiple expressions and statements. In that case, we can enclose them in curly braces. The major difference is that curly braces require a return within them to return a value (just like a regular function does).\nLike this:\nlet sum = (a, b) =\u0026gt; { // the curly brace opens a multiline function let result = a + b; return result; // if we use curly braces, then we need an explicit \u0026#34;return\u0026#34; }; alert( sum(1, 2) ); // 3 More to come Here we praised arrow functions for brevity. But that‚Äôs not all!\nArrow functions have other interesting features.\nTo study them in-depth, we first need to get to know some other aspects of JavaScript, so we‚Äôll return to arrow functions later in the chapter Arrow functions revisited.\nFor now, we can already use arrow functions for one-line actions and callbacks.\nSummary Arrow functions are handy for simple actions, especially for one-liners. They come in two flavors:\nWithout curly braces:¬†(...args) =\u0026gt; expression¬†‚Äì the right side is an expression: the function evaluates it and returns the result. Parentheses can be omitted, if there‚Äôs only a single argument, e.g.¬†n =\u0026gt; n*2. With curly braces:¬†(...args) =\u0026gt; { body }¬†‚Äì brackets allow us to write multiple statements inside the function, but we need an explicit¬†return¬†to return something. ","permalink":"http://localhost:1313/posts/fundamentals-of-javascript/","summary":"\u003cp\u003e\u003cimg alt=\"JS Image\" loading=\"lazy\" src=\"/posts/assets/web/JS/js.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eJavaScript was originally created to bring static web pages to life, enabling them to respond dynamically to user interactions. Its code, known as scripts, is directly embedded within HTML documents and executed by the browser as soon as the page loads. Because these scripts are delivered and interpreted as plain text, they bypass the need for a separate compilation process‚Äîthis makes development swift and flexible.\u003c/p\u003e\n\u003cp\u003eThis interpretive nature is a key characteristic of JavaScript and distinguishes it from compiled languages like Java. Whereas Java requires a compile step to transform code into bytecode before execution, JavaScript‚Äôs immediate execution model facilitates rapid testing and iterative development. Over time, JavaScript has evolved from a simple tool for adding interactivity to a robust language capable of handling complex web applications, manipulating the Document Object Model (DOM), and even running on servers through environments like Node.js.\u003c/p\u003e","title":"Fundamentals of JavaScript"},{"content":"\nI recently uploaded a video showcasing my Arch Linux (btw) setup just for fun, and to my surprise, it went viral within the Linux community! Since then, I‚Äôve received numerous messages asking about the installation process. Although I wanted to make a detailed video tutorial, my laptop\u0026rsquo;s older specs make it difficult to handle both recording and installation simultaneously. So, I‚Äôve decided to write this article to guide you through the installation process using my dotfiles and the installation script from Ja.Kool.It. Below, you‚Äôll find a step-by-step guide to get started.\n1. Install ArchLinux With Minimal Configuration Make a Bootable USB First Download ArchLinux ISO from official site : Download Link Second Download for Your Operating System Ventoy Extract the Ventoy Folder and Write it on your USB. Copy ArchLinux ISO into USB. if you Don\u0026rsquo;t Know how to use ventoy read this article Boot From USB Restart Your Computer and Press the Boot Menu key according to your Computer. In Boot Menu Select Your USB It will open ventoy and show you all ISO file available in USB Select the ArchLinux ISO and Open in Normal Mode. Connect to Internet For wired internet you don\u0026rsquo;t need to do anyting For wireless Command Given Below $ iwctl [iwd]# From the [iwd]# prompt you will need figure out your device name. Then, assuming you know the SSID (service set identifier) of your wireless network, go ahead and connect like so:\n[iwd]# device list # You should see something like this: # # Devices # ------------------------------------------------------------- # Name Address Powered Adapter Mode # ------------------------------------------------------------- # wlan0 ... on ... ... [iwd]# station YOURDEVICE connect YOURSSID For a secured wireless network, you will be prompted for the WiFi password. Once you enter the correct password, you‚Äôll be off to the races!\nMaking Partition Ready for Archinstall for that first we will use the cfdisk to make partitions and then mfks for formatting that $ lsblk if will show your all partitions and there information\n$ cfdisk it show you all of your information about your drives\nYou have to make 3 partitions\nEFI boot Partition - Type Must be EFI System Swap Partition - Type Must be Swap Partition Root Partition - Type Must be Linux File System after Make Partitions write and exit the cfdisk and Run these commands and just change paths\n$ mkfs.ext4 /path/to/root/partition $ mfks.vfat -F 32 /path/to/efi/partition $ mkswap /path/to/swap/partition we will use the pre-mounted disk configuration for that run\n$ mkdir /mnt/archinstall $ mount /path/to/root/partition /mnt/archinstall $ mkdir /mnt/archinstall/boot $ mount /path/to/efi/partition/ /mnt/archinstall/boot $ swapon /path/to/swap/partition now we are done with partitioning the partitions\nUpdate System and Run ArchInstall $ pacman -Sy archinstall archlinux-keyring $ archinstall Actual Installation Start Here After running the archinstall command it will show you something like this.\nLocales : In locales select your keyboard layout, locale language, and endcoding Mirrors : In Mirrors select best mirror region according to your location Disk Configuration : -\u0026gt;Partitioning-\u0026gt;Pre-mounted Configuration-\u0026gt; Enter /mnt/archinstall Swap : Enable it if you made the swap partition Boot Loader : Select which boot loader do you need like grub, system-d-boot Unified kernel images : Enable if you want Hostname : Select your hostname what you want Root Password : Enter Your Root Password User account : make a account for normal user Profile : Select-\u0026gt;Type-\u0026gt;Minimal Audio : Select-\u0026gt;Pipewire Kernels : Select one or many according your need. if don\u0026rsquo;t know don\u0026rsquo;t touch it Network configuration : Select-\u0026gt;Use NetworkManager Additional packages : git vim Optional repositories : Enable additional repos if you want like multilib Timezone : Select timezone according to your location Automatic time sync (NTP) : Leave Enabled after that just press the install and wait for installation to be finished\nCongratulationsüéâ!! You have successfully installed the ArchLinux and now you can say that I use Arch btw\n2. Installing JaKooLit Arch-Hyprland Script. reboot your system and login with username and password and connect with internet and clone the repo and preform these operations.\ngit clone --depth=1 https://github.com/JaKooLit/Arch-Hyprland.git ~/Arch-Hyprland cd ~/Arch-Hyprland chmod +x install.sh ./install.sh select the option according the option given in image I have explained each one of them and those without comment means go with that are in image.\nAfter selecting all the options, I will start installing Hyprland and additional components. During the installation, you may be prompted to enter the password 2-3 times, so stay attentive. Once the installation is successful, it will show a prompt to press \u0026lsquo;Y\u0026rsquo; to reboot the system.\nYou have successfully installed Archlinux+Hyprland.\n3. My Dotfiles Configuration To set up your environment using these dotfiles, follow these steps:\nClone the Repository: git clone https://github.com/ahmad9059/dotfiles.git cd dotfiles Backup Existing Dotfiles: Before copying new configurations, it\u0026rsquo;s wise to back up your current dotfiles: mkdir -p ~/dotfiles_backup cp ~/.config ~/dotfiles_backup -r cp ~/.tmux.conf ~/dotfiles_backup cp ~/.zshrc ~/dotfiles_backup Copy New Configurations: Remember you must in dotfiles folder to run following commands cp -r .config ~/ cp .zshrc ~/ cp -r .themes ~/.themes cd .icons cp .icons.zip ~/ cd ~/ unzip .icons.zip rm .icons.zip After the installation, you can start using the configured applications. Open your GTK settings and set the widget theme to Andromeda-dark, the icon theme to Dracula, and the mouse cursor to Future-black Cursors.\nPackages¬†pacman: Install of these Packages using pacman\nsudo pacman -S foot alacritty lsd bat tmux neovim tldr obs-studio vlc yazi Packages¬†yay(Optional): Install of these Packages Using yay. Remember they are according to my preference like I have install vscode, telegram etc.\nyay -S thorium-browser-bin visual-studio-code-bin 64gram-desktop-bin apple-fonts fum Congratulations! You have successfully completed the installation.\n","permalink":"http://localhost:1313/posts/archlinux-installation-guide/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/posts/assets/archlinux/archlinux.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eI recently uploaded a video showcasing my Arch Linux (btw) setup just for fun, and to my surprise, it went viral within the Linux community! Since then, I‚Äôve received numerous messages asking about the installation process. Although I wanted to make a detailed video tutorial, my laptop\u0026rsquo;s older specs make it difficult to handle both recording and installation simultaneously. So, I‚Äôve decided to write this article to guide you through the installation process using my dotfiles and the installation script from Ja.Kool.It. Below, you‚Äôll find a step-by-step guide to get started.\u003c/p\u003e","title":"ArchLinux Installation Guide Using My Dotfiles"},{"content":"Tailwind CSS is a utility-first CSS framework designed to allow developers to build custom designs quickly. Instead of writing custom styles, Tailwind provides a collection of utility classes that you can use to style elements directly in the HTML.\n1. Installation and Setup How to install Tailwind using CDN For quick prototyping, you can include Tailwind directly in your project with a CDN. Add the following to your HTML \u0026lt;head\u0026gt; tag:\nAdd the Play CDN script tag to the¬†\u0026lt;head\u0026gt;¬†of your HTML file, and start using Tailwind‚Äôs utility classes to style your content.\n\u0026lt;script src=\u0026#34;https://unpkg.com/@tailwindcss/browser@4\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 2. Key Concepts in Tailwind CSS Utility-First Approach Tailwind uses small utility classes like text-center, bg-blue-500, and mt-4 to control elements\u0026rsquo; design directly in the HTML. This eliminates the need for writing custom CSS.\nResponsive Design Tailwind provides responsive utilities that help you design mobile-first and scale up for larger screens. You can add breakpoints to utilities using sm:, md:, lg:, xl:, etc.\n3. Core Concepts Colors Tailwind provides a set of predefined colors. You can apply them using classes like bg-blue-500 or text-red-600. Example:\n\u0026lt;div class=\u0026#34;bg-blue-500 text-white p-4\u0026#34;\u0026gt; This is a blue background with white text. \u0026lt;/div\u0026gt; Spacing (Padding and Margin) Tailwind has utilities for margin (m-*) and padding (p-*), where * is a scale value. Example:\n\u0026lt;div class=\u0026#34;m-4 p-6\u0026#34;\u0026gt; This element has 1rem margin and 1.5rem padding. \u0026lt;/div\u0026gt; Typography Tailwind provides utilities for font size (text-*), font weight (font-*), text color (text-*), and line height (leading-*). Example:\n\u0026lt;p class=\u0026#34;text-lg font-semibold leading-relaxed\u0026#34;\u0026gt; This is a large, semi-bold text with relaxed line height. \u0026lt;/p\u0026gt; 4. Layout Utilities Flexbox and Grid Tailwind CSS makes it easy to use Flexbox and CSS Grid with utilities like flex, grid, flex-col, justify-center, etc. Example of Flexbox:\n\u0026lt;div class=\u0026#34;flex justify-center items-center h-screen\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bg-gray-200 p-6\u0026#34;\u0026gt;Center me!\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Example of Grid:\n\u0026lt;div class=\u0026#34;grid grid-cols-3 gap-4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bg-red-500\u0026#34;\u0026gt;Item 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-blue-500\u0026#34;\u0026gt;Item 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-green-500\u0026#34;\u0026gt;Item 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Container The .container class centers your content and applies responsive width.\n\u0026lt;div class=\u0026#34;container mx-auto p-4\u0026#34;\u0026gt; Content here will be centered. \u0026lt;/div\u0026gt; 5. Customization You can customize Tailwind‚Äôs default theme using the tailwind.config.js file. For example, you can change the color palette, font sizes, spacing, etc.\nmodule.exports = { theme: { extend: { colors: { customBlue: \u0026#39;#123456\u0026#39;, }, }, }, } 7. Tailwind Directives @tailwind base;: Applies the base styles like resets. @tailwind components;: Injects component-level styles. @tailwind utilities;: Includes utility classes like padding, margin, colors, etc. @apply: Use this directive to group utilities into a single class (useful for custom components). .btn { @apply bg-blue-500 text-white p-2 rounded; } 8. Handling States with Pseudo-Classes Tailwind provides utilities for pseudo-classes such as hover:, focus:, active:, etc. Example:\n\u0026lt;button class=\u0026#34;bg-blue-500 hover:bg-blue-700 text-white p-2\u0026#34;\u0026gt; Hover me! \u0026lt;/button\u0026gt; 9. Transitions and Animations You can add smooth transitions and animations using Tailwind‚Äôs utility classes. Example:\n\u0026lt;div class=\u0026#34;transition ease-in-out duration-500 transform hover:scale-110\u0026#34;\u0026gt; Hover to scale up! \u0026lt;/div\u0026gt; 10. Plugins Tailwind allows you to extend its functionality with plugins, such as for forms, typography, or aspect ratio utilities. Example of installing a plugin:\nnpm install @tailwindcss/forms Then, add it to your tailwind.config.js:\nmodule.exports = { plugins: [ require(\u0026#39;@tailwindcss/forms\u0026#39;), ], } 11. Tailwind CSS with JIT Mode Just-in-time (JIT) mode generates only the classes you use, reducing file size and speeding up development. To enable JIT:\nmodule.exports = { mode: \u0026#39;jit\u0026#39;, content: [\u0026#39;./**/*.html\u0026#39;], } 12. Example Project \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Tailwind Example\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;https://cdn.tailwindcss.com\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;bg-gray-100 text-gray-900\u0026#34;\u0026gt; \u0026lt;header class=\u0026#34;bg-blue-500 text-white p-4\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;text-xl font-bold\u0026#34;\u0026gt;My Tailwind Page\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;main class=\u0026#34;p-6\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bg-white p-4 rounded shadow-md\u0026#34;\u0026gt;Card 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-white p-4 rounded shadow-md\u0026#34;\u0026gt;Card 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-white p-4 rounded shadow-md\u0026#34;\u0026gt;Card 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer class=\u0026#34;bg-gray-800 text-white p-4 text-center\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026amp;copy; 2025 My Tailwind Site\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","permalink":"http://localhost:1313/posts/tailwind-css/","summary":"\u003cp\u003eTailwind CSS is a utility-first CSS framework designed to allow developers to build custom designs quickly. Instead of writing custom styles, Tailwind provides a collection of utility classes that you can use to style elements directly in the HTML.\u003c/p\u003e\n\u003ch3 id=\"1-installation-and-setup\"\u003e1. Installation and Setup\u003c/h3\u003e\n\u003chr\u003e\n\u003ch4 id=\"how-to-install-tailwind-using-cdn\"\u003eHow to install Tailwind using CDN\u003c/h4\u003e\n\u003cp\u003eFor quick prototyping, you can include Tailwind directly in your project with a CDN. Add the following to your HTML \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e tag:\u003c/p\u003e","title":"Tailwind CSS - A Utility-First CSS Framework"},{"content":"CSS (Cascadia Styling Sheet) is the style sheet language that\u0026rsquo;s use to specify how a document written in HTML or XML should be presented and styled.\nCSS Boilerplate *{ margin: 0; padding: 0; box-sizing: border-box; } html,body{ width: 100%; height: 100%; } How to Link CSS with HTML Add the line after tittle tag in your html file\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;\nTips:\nWe use . dot to target class in CSS We use # hash to target id in CSS Also if you want to target tag we can simply target like h3{} Div: box means div and also when e have more than one element and also when there is rectangle shape, very high change there is div ;). Units in CSS px : It is use to define the measurement in pixels. 1px = 1/96th of inch % : It is used to define the measurement as a percentage that is relative to another value (maybe to their parent element). vh : It is relative to the height of the viewpoint(screen). 1vh = 1% or 1/100 of the height of the viewpoint vw : It is relative to the width of the viewpoint(screen). 1vm or 1/100 of the width of the width of viewpoint em : Relative to the font-size of the element 2em means 2 times the size of the current font rem : Relative to font-size of the root element like html tag. vmin : Relative to 1% of viewport\u0026rsquo;s* smaller dimension vmax : Relative to 1% of viewport\u0026rsquo;s* larger dimension Tip: There are mainly two type of fonts sans-serif and serif. The difference is the presence of decorative strokes, or serifs at the beginning and end of letters.\nExamples\nMargin VS Padding: padding: padding is the space inside an element, between its content and its border. margin: margin is the space outside an element, between the element\u0026rsquo;s border and other elements. border: A shorthand property for border-width, border-style, border-color ex: border: 3px solid gray border-radius: A shorthand property for the for border *_radius properties. We can also add radius on only one corner. like using these properties border-bottom-left-radius, border-bottom-right-radius,border-top-left-radius,border-top-right-radius Block VS Inline VS Inline-Block: Block Element:- Start on a new line (occupy full width) and take-up 100% of the width by default. You can set height, width, margin,padding. ex: \u0026lt;div\u0026gt;, \u0026lt;p\u0026gt;, \u0026lt;h1\u0026gt;.\nInline Element:- Do not start on a new line and only take-up as much width as their content/required. Height and width cannot be set/change. ex: \u0026lt;span\u0026gt;,\u0026lt;a\u0026gt;,\u0026lt;strong\u0026gt;.\nInline-Block Element:- Behave like inline element(do not start on a new line). Allow setting height,width like block elements. Useful for layouts purposes without breaking the flow.ex: \u0026lt;img\u0026gt;,button,\u0026lt;input\u0026gt;.\ndisplay: specifies how a certain HTML should be displayed. attributes: block,inline,inline-block Position Absolute VS Position Relative: Position Absolute:-\nAn element with position: absolute is removed from the normal document flow. It is positioned relative to its nearest positioned ancestor (an ancestor with position: relative, absolute, or fixed). If no such ancestor exists, it is positioned relative to the initial containing block (viewport). It does not occupy space in the normal layout, allowing it to move freely within its containing block. Position Relative:-\nAn element with position: relative remains in the normal document flow. It is positioned relative to its original position, using top, right, bottom, and left values. Space for the element is still reserved in the layout, so it affects other elements. position: specifies the type of positioning method used for an element absolute,relative,fixed. Background Properties: background: A shorthand property for all the background properties. It set by img(),color, linear-gradiant(to bottom right, red,yellow) etc. background-size: Specifies the size of the background images like cover,contain etc. background-repeat: Sets if/how a background image will be repeated. like no-repeat, round etc. background-position: specifies the position of a background image like center,right, left,top,bottom. Flexbox: Flexbox is a CSS layout model designed to help arrange elements in a responsive flexible way. It simplifies alignment, distribution, and spacing of items within a container-even when their size is unknown or dynamic. The Flexbox model is one-dimensional, meaning it handles either row or a column layout, Unlike CSS Grid which is two-dimensional(rows and columns). Key Concepts:\nFlex Container: The parent element that holds flex items. We can define a flex container by applying display: flex; to it. Flex items: The child elements of a flex container that will be laid out according to the flexbox rules. Main Axis and Cross Axis: Main Axis(x-axis): This axis along which flex items are placed. It depends on the flex-direction property (row by default). Cross Axis(y-axis): The perpendicular axis to the main axis. for example, if the flex-direction is row, the cross axis will be vertical. display: flex; Defines the element as flex container. flex-direction: Specifies the direction of the main axis like row, column,row-reverse,column-reverse. justify-content: Aligns items along the main axis like start,center,space-between,space-evenlly. align-items: Aligns items along the cross-axis stretch,center, flex-start,flex-end. flex-wrap: The¬†flex-wrap¬†property specifies whether the flexible items should wrap or not. like nowrap,wrap,wrap-reverse. flex-shrink: The¬†flex-shrink¬†property specifies how the item will shrink relative to the rest of the flexible items inside the same container. value like 0 or 1. Pseudo-Class and Pseudo-Elements:- Pseudo-elements and pseudo-classes are both powerful CSS features used to style elements based on specific states or to target parts of elements that aren\u0026rsquo;t directly available in the DOM, although they serve similar purposes, modifying or styling elements based on conditions, they function differently.\nPseudo-Classes: They targets an element in a specific state, and we use : for pseudo-classes. Syntax: selector:pesudo-class\nCommon Examples:\n:hover when an element is hovered. :focus when an element is focused. :th-child(n) targets the nth child of parent. :active when an element is being clicked. :visited for visited links Pseudo-Elements: Targets part of an element or inserts content before/after it. we use :: for elements. Syntax: selector::pesudo-element\nCommon Examples:\n::before insert content before an element. ::after inserts content after an element. ::first-letter styles the first-letter. ::first-line styles the first line. ::selection styles the selected text. Pseudo Classes Pseudo-Elements Interact with element states (e.g., :hover, :focus) Target parts of an element or add content (e.g., ::before, ::first-letter). Color Science and their Units 1. Color Name: CSS provides a set of predefined names that are recognized by all browsers ex: red,green,blue,black (total around 140 standard names) Example: background-color: red;\n2. Hexadecimal Notation(#RRGGBB): A more precise way to specify color in CSS is using hexadecimal(hx) notation. Hex values are written in the form #RRGGBB, where:\n#RR : represent the red component. #GG : represent the green component. #BB : represent the blue component. The values range is 00-FF, 00 means no color and FF means full intensity. Example: background-color: #11111b; 3. RGB Functional Notation: The rgb notation uses the same concept as hex but, specifies values in the decimal range from 0-255. The format is rgb(red,green,blue), where each color component is an integer between 0(no color) and 255(full intensity). Example: background-color: rgb(255,0.0);\n4. RGBA Functional Notation: rgba() extends the rgb() notation by adding an alpha channel for transparency. The format is rgba(red,green,blue,alpha), where alpha value is a decimal between 0(completely transparent) and 1(completely opoque). Example: background-color: rgba(255,0,0,0.5).\nGrid in CSS CSS Grid Layout is a powerful two-dimensional layout system designed to handle both rows and columns. It provides a way to create web layouts without relying on floats or positioning.\nCore Concepts of CSS Grid; Grid Container: The parent element where display: grid; is applied. Grid Items: The direct child elements of a grid container. Grid Lines: Horizontal and vertical lines that divide the gird into cells. Defining a Grid: Columns and Rows: Use grid-template-columns and grid-template-rows to define the grid. grid-template-columns: Specifies the size of the columns, and how many columns in a grid layout grid-template-rows: Specifies the size of the rows in a grid layout. Gap between Grid items: Use gap,row-gap,column-gap to create spacing. Alignment and Justification: align-items: Aligns items vertically inside the container. justify-items: Aligns items horizontally inside the container. align-content: Vertically aligns the whole grid inside the container (when total grid size is smaller than container). jusitfy-content: Horizontally aligns the whole grid inside the container (when total grid size is smaller than container). other useful: justify-self: Aligns the content for a specific grid item along the row axis align-self: Aligns the content for a specific grid item along the column axis grid-row-start: Specifies where to start the grid item grid-row-end: Specifies where to end the grid item grid-column-start: Specifies where to start the grid item grid-column-end: Specifies where to end the grid item grid-row: A shorthand property for the¬†grid-row-start¬†and the¬†grid-row-end¬†properties.ex: grid-row: 1 / 3; grid-column: A shorthand property for the¬†grid-column-start¬†and the¬†grid-column-end¬†properties.ex: grid-column: 1 / 4; CSS Grid vs Flexbox CSS Grid Flexbox Two-dimensional layout One-dimensional layout Suitable for complex layouts Ideal for simpler layouts (row/column) Explicit rows and columns No rows/columns concept Responsive Web Design 1.Understanding Units The first thing in responsiveness is to understand the Absolute(like px) and Relative(em,vh) Units and given are units in css.\nAbsolute Units These units are fixed and not affected by the size of other elements or the viewport.\npx (pixels): A single pixel on the screen. cm (centimeters): A physical centimeter. mm (millimeters): A physical millimeter. in (inches): A physical inch (1 inch = 2.54 cm). Relative Units These units are based on the size of other elements, the viewport, or the font size.\nRelative to the Font Size em: Relative to the font size of the parent element. rem (root em): Relative to the font size of the root element (\u0026lt;html\u0026gt;). ex: Relative to the height of the lowercase letter \u0026ldquo;x\u0026rdquo; in the current font. ch: Relative to the width of the character \u0026ldquo;0\u0026rdquo; (zero) in the current font. Relative to the Viewport vw (viewport width): 1% of the viewport‚Äôs width. vh (viewport height): 1% of the viewport‚Äôs height. vmin: 1% of the smaller dimension (width or height) of the viewport. vmax: 1% of the larger dimension (width or height) of the viewport. Relative to the Element‚Äôs Size % (percentage): Relative to the size of the parent element. 3. Flexbox Flexbox is a powerful tool for creating responsive layouts that adapt to different screen sizes and devices. Below are key takeaways for using Flexbox in responsive design:\nGeneral Concepts Flex Direction: Use flex-direction: row; for horizontal layouts. Switch to flex-direction: column; for vertical layouts on smaller screens using media queries. Flex Wrap: Use flex-wrap: wrap; to allow flex items to wrap onto new lines if necessary. Flex Property: Use the flex property with percentages (e.g., flex: 50%;) to adjust the width of items based on the screen size. 3. CSS Media Queries Media query is a CSS technique introduced in CSS3. It uses the¬†@mediarule to include a block of CSS properties only if a certain condition is true.\nExample If the browser window is 600px or smaller, the background color will be lightblue:\n@media (max-width: 600px) { body { background-color: lightblue; } Add a Breakpoint: Earlier in this tutorial we made a web page with rows and columns, and it was responsive, but it did not look good on a small screen.\nMedia queries can help with that. We can add a breakpoint where certain parts of the design will behave differently on each side of the breakpoint.\nAlways Design for Mobile First Mobile First means designing for mobile before designing for desktop or any other device (This will make the page display faster on smaller devices).\nThis means that we must make some changes in our CSS.\nInstead of changing styles when the width gets¬†smaller¬†than 768px, we should change the design when the width gets¬†larger¬†than 768px. This will make our design Mobile First:\nTypical Device Breakpoints There are tons of screens and devices with different heights and widths, so it is hard to create an exact breakpoint for each device. To keep things simple you could target five groups:\n/* Extra small devices (phones, 600px and down) */ @media only screen and (max-width: 600px) {...} /* Small devices (portrait tablets and large phones, 600px and up) */ @media only screen and (min-width: 600px) {...} /* Medium devices (landscape tablets, 768px and up) */ @media only screen and (min-width: 768px) {...} /* Large devices (laptops/desktops, 992px and up) */ @media only screen and (min-width: 992px) {...} /* Extra large devices (large laptops and desktops, 1200px and up) */ @media only screen and (min-width: 1200px) {...} CSS Animations CSS allows animation of HTML elements without using JavaScript!. An animation lets an element gradually change from one style to another. You can change as many CSS properties you want, as many times as you want. To use CSS animation, you must first specify some keyframes for the animation. Keyframes hold what styles the element will have at certain times. Animations is just transaction from initial to final position. The @keyframes Rule: When you specify CSS styles inside the @keyframes rule, the animation will gradually change from the current to the new style at certain times.\n@keyframes animation-name { to{ /* Intial properties */ left: 0%; rotate: 0; top: 0; } from{ /* final properties */ left: 75%; rotate: 360deg; border-radius: 50%; background-color: green; } } /* we can also give animation in percenatge so when the animation is 25% complete, 50% complete, and again when the animation is 100% complete: */ @keyframes animation-name { 0%{ left: 0%; rotate: 0; top: 0; } 25%{ left: 75%; top: 0; background-color: blue; } 50%{ left: 75%; top: 73%; rotate: 360deg; background-color: green; } 75%{ left: 0; top: 73%; background-color: aqua; } 100%{ left: 0; top: 0; } } CSS Animation Properties Property Description @keyframes Specifies the animation code animation A shorthand property for setting all the animation properties. animation:¬†example 5s linear 2s infinite alternate; animation-delay specifies a delay for start of an animation. like 1s,5s animation-direction Specifies whether an animation should be played forwards, backward or in alternate cycles.normal,reverse,alternate,alternate-reverse. animation-duration specifies how long time an animation should take to complete one cycle like. 2s,4s. animation-iteration-count Specifies the number of times an animation should be played. like 2,4, or infinite. animation-name Specifies the name of the @keyframes animation. animation-fill-mode Specifies a style for the element when animation is not playing or completed(before it starts, after it ends, or both).none,forwards,backwards,both. animation-timing-function Specifes the speed curve of the animation like ease,linear,ease-in,ease-out,ease-in-out,cubic-bezier(n,n,n,n) Animation-timing-function: ease¬†- Specifies an animation with a slow start, then fast, then end slowly (this is default) linear¬†- Specifies an animation with the same speed from start to end ease-in¬†- Specifies an animation with a slow start ease-out¬†- Specifies an animation with a slow end ease-in-out¬†- Specifies an animation with a slow start and end cubic-bezier(n,n,n,n)¬†- Lets you define your own values in a cubic-bezier function. ","permalink":"http://localhost:1313/posts/css/","summary":"\u003cp\u003eCSS (Cascadia Styling Sheet) is the style sheet language that\u0026rsquo;s use to specify how a document written in HTML or XML should be presented and styled.\u003c/p\u003e\n\u003ch2 id=\"css-boilerplate\"\u003eCSS Boilerplate\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003e*\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003emargin\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003epadding\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003ebox-sizing\u003c/span\u003e: \u003cspan style=\"color:#ff79c6\"\u003eborder-box\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003ehtml\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e,\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003ebody\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003ewidth\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e100\u003c/span\u003e\u003cspan style=\"color:#8be9fd\"\u003e%\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003eheight\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e100\u003c/span\u003e\u003cspan style=\"color:#8be9fd\"\u003e%\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"how-to-link-css-with-html\"\u003eHow to Link CSS with HTML\u003c/h2\u003e\n\u003cp\u003eAdd the line after tittle tag in your html file\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTips:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWe use \u003ccode\u003e.\u003c/code\u003e dot to target class in CSS\u003c/li\u003e\n\u003cli\u003eWe use \u003ccode\u003e#\u003c/code\u003e hash to target id in CSS\u003c/li\u003e\n\u003cli\u003eAlso if you want to target tag we can simply target like h3{}\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eDiv:\u003c/em\u003e box means div and also when e have more than one element and also when there is rectangle shape, very high change there is div ;).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"units-in-css\"\u003eUnits in CSS\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003epx :\u003c/strong\u003e It is use to define the measurement in pixels. \u003ccode\u003e1px = 1/96th of inch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e% :\u003c/strong\u003e It is used to define the measurement as a percentage that is relative to another value (maybe to their \u003ccode\u003eparent element\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evh :\u003c/strong\u003e It is relative to the height of the \u003ccode\u003eviewpoint(screen)\u003c/code\u003e. \u003ccode\u003e1vh = 1% or 1/100 of the height of the viewpoint\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evw :\u003c/strong\u003e It is relative to the width of the \u003ccode\u003eviewpoint(screen)\u003c/code\u003e. \u003ccode\u003e1vm or 1/100 of the width of the width of viewpoint\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eem :\u003c/strong\u003e Relative to the font-size of the element \u003ccode\u003e2em means 2 times the size of the current font\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003erem :\u003c/strong\u003e Relative to font-size of the root element like \u003ccode\u003ehtml tag\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evmin :\u003c/strong\u003e Relative to 1% of viewport\u0026rsquo;s* smaller dimension\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evmax :\u003c/strong\u003e Relative to 1% of viewport\u0026rsquo;s* larger dimension\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cem\u003eTip:\u003c/em\u003e There are mainly two type of fonts sans-serif and serif. The difference is the presence of decorative strokes, or serifs at the beginning and end of letters.\u003c/p\u003e","title":"CSS - Cascading Style Sheets"},{"content":"HTML(Hyper Text Markup Language) is the standard language use to create and structure content on the web.\nWhy learn html: because we need to create website for that we need html, or because of content.\nGetting with HTML Tip: type - html:5 / ! - for boilerplate code\nBoilerplate Code \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;!-- tells that we are using HTML5 --\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;!--The tag represents the root of an HTML document.--\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- head is a container for metadata (data about data)--\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;!--tag defines metadata about an HTML document--\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;!--defines the title of the document.--\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- defines the document\u0026#39;s body.--\u0026gt; \u0026lt;!-- content added here --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Tags in HTML \u0026lt;h1\u0026gt;\u0026lt;/h1\u0026gt; - heading tag and Most Importance \u0026lt;h2\u0026gt;\u0026lt;/h2\u0026gt; - less Importance than h1 \u0026lt;h3\u0026gt;\u0026lt;/h3\u0026gt; - less Importance than h2 \u0026lt;h4\u0026gt;\u0026lt;/h4\u0026gt; - less Importance than h3 \u0026lt;h5\u0026gt;\u0026lt;/h5\u0026gt; - less Importance than h4 \u0026lt;h6\u0026gt;\u0026lt;/h6\u0026gt; - less Importance than h5 \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; - paragraph tag used to add paragraph/text on website \u0026lt;b\u0026gt;\u0026lt;/b\u0026gt; - used to bold the text \u0026lt;i\u0026gt;\u0026lt;/i\u0026gt; - used to italic the text \u0026lt;sup\u0026gt;\u0026lt;/sup\u0026gt; - used for to add super script \u0026lt;sub\u0026gt;\u0026lt;/sub\u0026gt; - used to add sub script \u0026lt;br\u0026gt;\u0026lt;/br\u0026gt; - used to break line \u0026lt;hr\u0026gt; - used to add horizontal row \u0026lt;ol\u0026gt;\u0026lt;/ol\u0026gt; - used to add ordered list \u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt; - used to add unordered list \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; - used to add items in list \u0026lt;a href =\u0026quot;source\u0026quot;\u0026gt; \u0026lt;/a\u0026gt; - used to make text clickable/hyperlink Tip: to open link in new tab use this target=\u0026quot;_blank\u0026quot; \u0026lt;img src=\u0026quot;source\u0026quot; alt=\u0026quot; \u0026quot;\u0026gt; - used to add image to website \u0026lt;form\u0026gt;\u0026lt;/form\u0026gt; - used to create the form \u0026lt;label\u0026gt;\u0026lt;/label\u0026gt; - used to add label to input field \u0026lt;input id =\u0026quot;abc\u0026quot; type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot; \u0026gt; - used to add input field \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; div is rectangle in his nature with 0 height div is used to combine multiple elements together in html \u0026lt;table\u0026gt;\u0026lt;/table\u0026gt; - A table in HTML consists of table cells inside rows and columns. \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; - Each table cell is defined by a and a tag \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt; - table row starts with a and ends with a tag \u0026lt;th\u0026gt;\u0026lt;/th\u0026gt; - Defines a header cell in a table Input Types for Input tag text : \u0026lt;input type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot;\u0026gt; email : \u0026lt;input type=\u0026quot;email\u0026quot; placeholder=\u0026quot;Email\u0026quot;\u0026gt; password : \u0026lt;input type=\u0026quot;password\u0026quot; placeholder=\u0026quot;Password\u0026quot;\u0026gt; checkbox : \u0026lt;input type=\u0026quot;checkbox\u0026quot; \u0026gt; radio button : \u0026lt;input type=\u0026quot;radio\u0026quot; \u0026gt; Male file : \u0026lt;input type=\u0026quot;file\u0026quot; \u0026gt; range : \u0026lt;input type=\u0026quot;range\u0026quot; \u0026gt; color: \u0026lt;input type=\u0026quot;color\u0026quot; \u0026gt; date : \u0026lt;input type=\u0026quot;date\u0026quot; \u0026gt; submit : \u0026lt;input type=\u0026quot;submit\u0026quot; \u0026gt; id: id is attribute that is used to assign id to an element. It is very helpful when we have multiple of same type but we need to treat them differently. id must be unique of element.\nclass: As we know that we are not allowed to assign same id to different element but when we need this type of thing we use the class attribute.\nHTML5 Semantics HTML5 semantics refers to the use of specific tags like \u0026lt;header\u0026gt;,\u0026lt;footer\u0026gt;,\u0026lt;nav\u0026gt;,\u0026lt;article\u0026gt;,\u0026lt;section\u0026gt;,etc, to provide clearer structure and meaning to web content. This improves accessibility, better SEO, and facilitates better better understanding by both human and machines, These tags did not to something special they act like normal div but with clearer structure and meaning about there content.\nSemantics Elements \u0026lt;header\u0026gt; : First section website can be called header nav : Navigation bar. \u0026lt;main\u0026gt; : complete website in this tag. \u0026lt;section\u0026gt; : A page can split into sections like introduction, contact information, Details, etc and each of these sections can be in a different section tag. \u0026lt;article\u0026gt; : It contains independent content which does not require any other context, blog post, newspaper article etc. \u0026lt;aside\u0026gt; : It is used to place content in a sidebar i.e aside from the existing content. IT is related to surrounding context. \u0026lt;footer\u0026gt; : Footer located at the bottom of any article or document, they can contain contact details, copyright information etc. There can be multiple footers on a page. \u0026lt;audio\u0026gt; : use to add audio support \u0026lt;video\u0026gt; : use to add video support ","permalink":"http://localhost:1313/posts/html/","summary":"\u003cp\u003eHTML(Hyper Text Markup Language) is the standard language use to create and structure content on the web.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhy learn html:\u003c/strong\u003e because we need to create website for that we need html, or because of content.\u003c/p\u003e\n\u003ch2 id=\"getting-with-html\"\u003eGetting with HTML\u003c/h2\u003e\n\u003cp\u003eTip: type - \u003ccode\u003ehtml:5\u003c/code\u003e / \u003ccode\u003e!\u003c/code\u003e - for boilerplate code\u003c/p\u003e\n\u003ch5 id=\"boilerplate-code\"\u003eBoilerplate Code\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- tells that we are using HTML5 --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003ehtml\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003elang\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!--The tag represents the root of an HTML document.--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003ehead\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- head is a container for metadata (data about data)--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003echarset\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!--tag defines metadata about an HTML document--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003ename\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;viewport\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003econtent\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003etitle\u003c/span\u003e\u0026gt;Document\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003etitle\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!--defines the title of the document.--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003ehead\u003c/span\u003e\u0026gt; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003ebody\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- defines the document\u0026#39;s body.--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- content added here --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003ehtml\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"tags-in-html\"\u003eTags in HTML\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u0026lt;/h1\u0026gt;\u003c/code\u003e - heading tag and Most Importance\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u0026lt;/h2\u0026gt;\u003c/code\u003e - less Importance than h1\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h3\u0026gt;\u0026lt;/h3\u0026gt;\u003c/code\u003e - less Importance than h2\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h4\u0026gt;\u0026lt;/h4\u0026gt;\u003c/code\u003e - less Importance than h3\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h5\u0026gt;\u0026lt;/h5\u0026gt;\u003c/code\u003e - less Importance than h4\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h6\u0026gt;\u0026lt;/h6\u0026gt;\u003c/code\u003e - less Importance than h5\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;\u003c/code\u003e - paragraph tag used to add paragraph/text on website\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;b\u0026gt;\u0026lt;/b\u0026gt;\u003c/code\u003e - used to bold the text\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;i\u0026gt;\u0026lt;/i\u0026gt;\u003c/code\u003e - used to italic the text\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;sup\u0026gt;\u0026lt;/sup\u0026gt;\u003c/code\u003e - used for to add super script\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;sub\u0026gt;\u0026lt;/sub\u0026gt;\u003c/code\u003e - used to add sub script\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;br\u0026gt;\u0026lt;/br\u0026gt;\u003c/code\u003e - used to break line\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;hr\u0026gt;\u003c/code\u003e - used to add horizontal row\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u0026lt;/ol\u0026gt;\u003c/code\u003e - used to add ordered list\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt;\u003c/code\u003e - used to add unordered list\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;\u003c/code\u003e - used to add items in list\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;a href =\u0026quot;source\u0026quot;\u0026gt; \u0026lt;/a\u0026gt;\u003c/code\u003e - used to make text clickable/hyperlink\n\u003cul\u003e\n\u003cli\u003eTip: to open link in new tab use this \u003ccode\u003etarget=\u0026quot;_blank\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;img src=\u0026quot;source\u0026quot; alt=\u0026quot; \u0026quot;\u0026gt;\u003c/code\u003e - used to add image to website\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;form\u0026gt;\u0026lt;/form\u0026gt;\u003c/code\u003e - used to create the form\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;label\u0026gt;\u0026lt;/label\u0026gt;\u003c/code\u003e - used to add label to input field\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;input id =\u0026quot;abc\u0026quot; type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot; \u0026gt;\u003c/code\u003e - used to add input field\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u003c/code\u003e\n\u003col\u003e\n\u003cli\u003ediv is rectangle in his nature with 0 height\u003c/li\u003e\n\u003cli\u003ediv is used to combine multiple elements together in html\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u0026lt;/table\u0026gt;\u003c/code\u003e - A table in HTML consists of table cells inside rows and columns.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;td\u0026gt;\u0026lt;/td\u0026gt;\u003c/code\u003e - Each table cell is defined by a and a tag\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003c/code\u003e - table row starts with a and ends with a tag\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;th\u0026gt;\u0026lt;/th\u0026gt;\u003c/code\u003e - Defines a header cell in a table\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"input-types-for-input-tag\"\u003eInput Types for Input tag\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003etext :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot;\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eemail :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;email\u0026quot; placeholder=\u0026quot;Email\u0026quot;\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003epassword :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;password\u0026quot; placeholder=\u0026quot;Password\u0026quot;\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003echeckbox :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;checkbox\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eradio button :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;radio\u0026quot; \u0026gt; Male\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003efile :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;file\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003erange :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;range\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecolor:\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;color\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003edate :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;date\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003esubmit :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;submit\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"id\"\u003eid:\u003c/h5\u003e\n\u003cp\u003eid is attribute that is used to assign id to an element. It is very helpful when we have multiple of same type but we need to treat them differently. id must be unique of element.\u003c/p\u003e","title":"HTML - The Language of the Web"},{"content":"\nWeb development is a continuously evolving field, and becoming a proficient full-stack developer in 2025 requires not only mastering essential basics but also adopting advanced tools and concepts. This roadmap will guide you, step by step, through the skills and technologies you need to become job-ready and adaptable to industry trends.\nWeb Development [Basic] (3 Months) üìÑ Topics Covered: 1. HTML \u0026amp; CSS Build at least 100 static landing pages to master the fundamentals and different layouts. 2. Git and GitHub Learn the foundations of version control: Creating repositories Branching and merging workflows Collaborating on platforms like GitHub 3. Basic JavaScript Core Concepts: Variables Functions Control Flow (if/else, loops) Data Structures (objects, arrays) DOM APIs: Event handling DOM manipulation Using browser-native features 4. Build the Following Projects Digital Clock Build a digital clock with accurate timed updates.\nStopwatch and Timer App Create an app with stopwatch and countdown timer functionality.\nTodo App with Local Storage Save user data (tasks) using localStorage.\nWeather App Fetch live weather data using APIs based on the user‚Äôs location.\n**Monkey Typing Game Create a typing test with stats like speed (WPM) and accuracy.\nImage Slider Build an interactive slider component.\nBreak Time (15 Days): Quick Networking and Internet Basics Learn essential network and web communication concepts: **What is the Internet?, **How it works?** Understanding Protocols (HTTP, HTTPS, FTP, TCP/IP) **TCP vs UDP Protocol Basics of DNS and **DNS Records** (A, CNAME, MX, TXT) Client-Server Architecture Diving into topics like 3-way TCP Handshakes, IP Addresses (Private vs Public), and Subnet Masks Basic Backend Development (3 Months) üìÑ Topics Covered: Servers: Understand the function of a server. Differentiate between Web Servers, API Servers, and File Servers. Cloud Servers vs On-Premises Servers Introduce virtualization concepts.\nNode.js Learn how to build REST APIs with Node.js: Using frameworks like Express.js, Hono.js, or Intent.js\nConcepts like Headers, Body, and HTTP Methods Databases (DB): Integrate MongoDB with Mongoose (NoSQL Database). Learn SQL databases with PostgreSQL. Compare SQL vs NoSQL Databases. Introduce **ORM Frameworks** (Prisma, Drizzle, Knex). **Authentication and Authorization**: **JWT vs Sessions** Learn different identification and security methods.\n**Build Backend Projects**: Simple CRUD Applications (like task managers) E-Commerce API Weather API Wrapper Task Management API **Advanced Backend Concepts**: **Redis** and caching systems Queue systems (BullMQ, SQS) Rate limiting strategies for APIs Batch processing jobs for async tasks **Database Optimizations** and indexing **Soft Skills for Developers**: Build a presence on platforms like Twitter. Share what you\u0026rsquo;re learning and building to connect with others.\nShare feedback and ask for advanced learning topics. Build confidence while solving real-life problems. React.js (2 Months) React.js is one of the most popular front-end libraries for building web interfaces.\nüìÑ Topics Covered: **Why Use React?** Understand the advantages of component-based architecture. **React Fundamentals**: **Hooks** (useState, useEffect, useReducer) **Components** and JSX Component lifecycle Adding styling with **TailwindCSS** State management using **Redux** and **Zustand** **Routing with React Router**: Learn navigation in React-based apps **React Projects**: **Todo App with Local Storage** **Weather App** **Amazon-like Working Clone** (FE only) **YouTube Clone** (using Google APIs for video data) Full-Stack Applications (MERN or PERN) Begin combining front-end and back-end skills to create complex applications:\nReal-Time Collaboration Tools (like Google Docs) Multi-Vendor E-Commerce Platforms Social Media Automation Tools (similar to LinkedIn‚Äôs automation tools) Video Conferencing Applications (leveraging **WebRTC or SFU**) Live Streaming Studio (with RTMP) Advanced whiteboarding tools Connectors for workflow automation (Zapier-like APIs) Cloud Basics (AWS) (1.5 Months) Learn the fundamentals of hosting, deploying, and scaling applications on servers.\nüìÑ Topics Covered: **AWS Services**: **EC2**, Load Balancers, CloudFront, S3 Storage **Private and Public VPC** IAM Roles and Federated Management Depict networking setups using Internet Gateways. **Scripts and Automation**: Learn how to automate deployments with **CloudFormation Templates**. Become Unstoppable (Advanced Topics) Master niche tools and technologies to thrive in enterprise environments.\n1. **Distributed Systems** Learn **microservices architecture**: Communication strategies like REST, gRPC, Saga patterns. Understanding CAP Theorem and data sharding. 2. **API Design and Optimization** **GraphQL** and **gRPC** for fast and scalable APIs. API version control and rate-limiting (use Redis, HATEOAS). 3. **Caching Strategies** CDN integration and distributed caches using Redis. Optimize performance with **cache partitioning**. 4. **Authentication \u0026amp; Authorization** Secure APIs with **OAuth 2.0, JWT**, and session management. Implement **Role-Based Access Control (RBAC)**. 5. **Database Optimization** Schema optimization with indexing. Learn SQL Query Optimization. Explore distributed databases (like CockroachDB, Cassandra). 6. **Observability** Set up dashboards with **Prometheus and Grafana**. Implement **distributed tracing** for debugging. Final Thought on Becoming Full-Stack in 2025 This roadmap provides a clear and structured guide to becoming a proficient full-stack developer by 2025. It covers everything from the basics of HTML to advanced distributed systems, ensuring you\u0026rsquo;re equipped to handle real-world challenges with confidence.\nHappy coding! üöÄ\n","permalink":"http://localhost:1313/posts/web-dev-roadmap/","summary":"\u003cp\u003e\u003cimg alt=\"cover-image\" loading=\"lazy\" src=\"/posts/assets/web-dev-roadmap/web-dev-roadmap.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eWeb development is a continuously evolving field, and becoming a proficient full-stack developer in 2025 requires not only mastering essential basics but also adopting advanced tools and concepts. This roadmap will guide you, step by step, through the skills and technologies you need to become job-ready and adaptable to industry trends.\u003c/p\u003e\n\u003ch2 id=\"web-development-basic-3-months\"\u003eWeb Development [Basic] (3 Months)\u003c/h2\u003e\n\u003ch3 id=\"-topics-covered\"\u003eüìÑ Topics Covered:\u003c/h3\u003e\n\u003ch4 id=\"1-html--css\"\u003e1. HTML \u0026amp; CSS\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eBuild \u003cstrong\u003eat least 100 static landing pages\u003c/strong\u003e to master the fundamentals and different layouts.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"2-git-and-github\"\u003e2. Git and GitHub\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eLearn the foundations of version control:\u003c/li\u003e\n\u003cli\u003eCreating repositories\u003c/li\u003e\n\u003cli\u003eBranching and merging workflows\u003c/li\u003e\n\u003cli\u003eCollaborating on platforms like GitHub\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"3-basic-javascript\"\u003e3. Basic JavaScript\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCore Concepts:\u003c/li\u003e\n\u003cli\u003eVariables\u003c/li\u003e\n\u003cli\u003eFunctions\u003c/li\u003e\n\u003cli\u003eControl Flow (if/else, loops)\u003c/li\u003e\n\u003cli\u003eData Structures (objects, arrays)\u003c/li\u003e\n\u003cli\u003eDOM APIs:\u003c/li\u003e\n\u003cli\u003eEvent handling\u003c/li\u003e\n\u003cli\u003eDOM manipulation\u003c/li\u003e\n\u003cli\u003eUsing browser-native features\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"4-build-the-following-projects\"\u003e4. Build the Following Projects\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDigital Clock\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBuild a digital clock with accurate timed updates.\u003c/p\u003e","title":"Becoming a Full-Stack Web Developer in 2025"},{"content":"\nThere comes a time in life when everything around you seems stifling. Every breath becomes a fight; the air seems weighty and pushes against your chest. Until you feel as though you are drowning, the weight of unmet expectations, unresolved grief, and constant disappointment presses down on your soul. Running away is not really an option; you yearn for escape; mountain tops call with promises of seclusion, vast roads whisper freedom into your ears. You thus withdraw inside, running back to yourself as the last haven remaining.\nThe never-ending battle to articulate what you are going through wears you out. Exhaustion penetrates into your bones, therefore rendering the act of hoping or trusting an impossible task. Love seems far, as like it belongs in a world you are no longer able to reach. You paste on a brave front at first since that is what others expect. You convince everyone you are good while donning a mask of normalcy. Still, the lies get more difficult to maintain quickly. You start to shun people‚Äînot out of indifference but rather because you have nothing left to offer. Plans are called off, messages go unacknowledged, calls are dismissed. Loneliness starts to be your haven since it feels safer than you could want. Alone, you can breathe without thinking about others.\nYou haven\u0026rsquo;t ceased yearning connection. Somewhere deep within, a part of you still yearns for closeness‚Äîfor someone who knows. Still, the suffering has caused you caution. You want the flames of your rage and grief to scorish those you love, but you worry bringing your inner turmoil upon others. You thus build towering, impervious barriers to keep everyone out. Your narrative too weighty to discuss, hence it appears impossible to explain your emotions. You worry about being misinterpreted and about people judging you for the wounds you bear as much as for your behavior. Vulnerability seems like a trap, and in a society where rumors travel like wildfire the risk is too large.\nStill, the damage stays, chewing away at you. The weight of past mistakes and losses hangs on your soul like a shadow not going to erase. The toughest is nighttime. The silence sharpens everything‚Äîthe regrets, the \u0026ldquo;what-ifs,\u0026rdquo; the memories of what you had and lost. \u0026ldquo;If only,\u0026rdquo; you consider. If only you had chosen another course. Just you would have been sufficient. Your chest hurts constantly, a faint aching never going away. The tears have stopped even though the suffering seems too great to contain. Even alone, crying seems like a luxury you cannot afford right now.\nThough certain emotions never alter with time. Despite the years and the heartache, that love you carried for someone still persists, stubborn and immobile. You know, though, you cannot go back to what was. Your heart‚Äîfragile, wounded‚Äîno longer has the strength to fall another time; the trust you once freely offered feels irreversibly damaged.\nThough it is debilitating, pain does not define you. Indeed, it shapes you, but it does not define you totally. Healing is nonlinear, messy, and usually frustrating. Setbacks and times when the weight seems intolerable will abound. Even in those times, though, it\u0026rsquo;s crucial to forgive yourself‚Äîfor the times you felt weak or stumbled under pressure. Honor the love you bear, even if it is complex or mixed-fevers. Above all, hang on. Because the weight won\u0026rsquo;t last permanently regardless of how heavy it feels right now. Deepest scars can heal as well. The darkest darkness lift too, finally.\n","permalink":"http://localhost:1313/posts/forher/","summary":"\u003cp\u003e\u003cimg alt=\"cover-image\" loading=\"lazy\" src=\"/posts/assets/forher/forher.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eThere comes a time in life when everything around you seems stifling. Every breath becomes a fight; the air seems weighty and pushes against your chest. Until you feel as though you are drowning, the weight of unmet expectations, unresolved grief, and constant disappointment presses down on your soul. Running away is not really an option; you yearn for escape; mountain tops call with promises of seclusion, vast roads whisper freedom into your ears. You thus withdraw inside, running back to yourself as the last haven remaining.\u003c/p\u003e","title":"What It Means to Feel for Someone"},{"content":"This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can‚Äôt cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax.\nHeadings Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores. Strong emphasis, aka bold, with asterisks or underscores. Combined emphasis with asterisks and underscores. Strikethrough with two tildes. Bold and nested italic. All bold and italic. Bold and italic nested.\nLists Ordered: First ordered list item Another item Actual numbers don\u0026rsquo;t matter, just that it\u0026rsquo;s a number 1st. 2nd. 3rd. Unordered: This is a list item\nThis is a nested list item This is a nested list item This is another list item This is another list item\nWrite the press release\nUpdate the website\nContact the media\nLinks This is a link.\nThis link has a title attribute.\nTables Syntax Description Header Title Paragraph Text Blockquotes Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.\nYou can reference a footnote like this.\nAll generalizations are false, including this one. ‚Äî Mark Twain. 1\nCode Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print(s) #include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; void heapify(int *arr, int index, int n) { int largest = index; int left = 2 * index + 1; int right = 2 * index + 2; if (left \u0026lt; n \u0026amp;\u0026amp; arr[left] \u0026gt; arr[largest]) largest = left; if (right \u0026lt; n \u0026amp;\u0026amp; arr[right] \u0026gt; arr[largest]) largest = right; if (largest != index) { swap(arr[largest], arr[index]); heapify(arr, largest, n); } } void buildHeap(int *arr, int n) { for (int i = (n / 2) - 1; i \u0026gt;= 0; i--) { heapify(arr, i, n); } } void heapSort(int *arr, int n) { buildHeap(arr, n); for (int i = n - 1; i \u0026gt; 0; i--) { swap(arr[i], arr[0]); heapify(arr, 0, i); } } void print(int *arr, int size) { for (int i = 0; i \u0026lt; size; i++) cout \u0026lt;\u0026lt; arr[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; } int main() { int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; buildHeap(arr, 10); print(arr, 10); heapSort(arr, 10); print(arr, 10); return 0; } No language indicated, so no syntax highlighting. But let\u0026#39;s throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. You can remove line numbers, change the highlighting theme, and more. See Syntax Highlighting and Highlight.\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello, World!\\n\u0026#34;); return 0; } Math You can use LaTeX-style math with $ and $$ delimiters. For example, $x^2$ renders as $x^2$, and $$\\frac{x}{y}$$ renders as: $$\\frac{x}{y}$$\nWe can throw this scary-looking equation at you:\n$$ \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\ldots} } } } $$\nHorizontal Rules Three or more\u0026hellip; Hyphens ---, Asterisks ***, or Underscores ___.\nMiscellaneous Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:scroll-auto to only The world is flat. apply the scroll-auto utility on hover.\nterm definition another definition https://www.brainyquote.com/quotes/mark_twain_137872.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/posts/markdown/","summary":"\u003cp\u003eThis Markdown cheat sheet \u003cstrong\u003eprovides\u003c/strong\u003e a quick overview of all the Markdown syntax elements. It can‚Äôt cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic \u003cem\u003esyntax\u003c/em\u003e and extended syntax.\u003c/p\u003e\n\u003ch1 id=\"headings\"\u003eHeadings\u003c/h1\u003e\n\u003chr\u003e\n\u003ch1 id=\"heading-1\"\u003eHeading 1\u003c/h1\u003e\n\u003ch2 id=\"heading-2\"\u003eHeading 2\u003c/h2\u003e\n\u003ch3 id=\"heading-3\"\u003eHeading 3\u003c/h3\u003e\n\u003ch4 id=\"heading-4\"\u003eHeading 4\u003c/h4\u003e\n\u003ch5 id=\"heading-5\"\u003eHeading 5\u003c/h5\u003e\n\u003ch6 id=\"heading-6\"\u003eHeading 6\u003c/h6\u003e\n\u003ch1 id=\"emphasis\"\u003eEmphasis\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003eEmphasis, aka italics, with asterisks or underscores. \u003cstrong\u003eStrong emphasis\u003c/strong\u003e, aka bold, with asterisks or underscores. Combined emphasis with asterisks and underscores. \u003cdel\u003eStrikethrough\u003c/del\u003e with two tildes. \u003cstrong\u003e\u003cem\u003eBold and nested italic\u003c/em\u003e\u003c/strong\u003e. \u003cstrong\u003e\u003cem\u003eAll bold and italic\u003c/em\u003e\u003c/strong\u003e. \u003cstrong\u003e\u003cem\u003e\u003cem\u003eBold and italic nested\u003c/em\u003e\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e","title":"Markdown Cheat Sheet"},{"content":"This is English text.\n€å€Å ÿßÿ±ÿØŸà €Å€í€î\nAnother test: ⁄©€åÿß €å€Å ŸÅŸàŸÜŸπ ⁄©ÿßŸÖ ⁄©ÿ± ÿ±€Åÿß €Å€íÿü\n","permalink":"http://localhost:1313/posts/temp-article/","summary":"\u003cp\u003eThis is English text.\u003c/p\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003e€å€Å ÿßÿ±ÿØŸà €Å€í€î\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003cp\u003eAnother test: \u003c!-- raw HTML omitted --\u003e⁄©€åÿß €å€Å ŸÅŸàŸÜŸπ ⁄©ÿßŸÖ ⁄©ÿ± ÿ±€Åÿß €Å€íÿü\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e","title":"temp article"},{"content":"\nReact.js is a JavaScript library for building user interfaces. Developed by Facebook (now Meta) in 2013. It is component-based, declarative, and allows for efficient UI updates. Key Features of React Component-Based Architecture: UI is built using reusable components. Virtual DOM: Updates only the changed parts, making React fast. Unidirectional Data Flow: Props and state maintain a predictable data structure. JSX (JavaScript XML): A syntax extension that lets you write HTML inside JavaScript. Hooks: Allow functional components to have state and other features. Mutable vs Immutable Mutable (Changeable) Mutable data types can be changed after creation. Example: Objects \u0026amp; Arrays are mutable. let arr = [1, 2, 3]; arr.push(4); // Modifies the original array console.log(arr); // [1, 2, 3, 4] Immutable (Unchangeable) Immutable data cannot be changed directly. Instead, you create a new copy. Example: Strings \u0026amp; Numbers are immutable. let str = \u0026#34;Hello\u0026#34;; str[0] = \u0026#34;M\u0026#34;; // This won\u0026#39;t change the string console.log(str); // \u0026#34;Hello\u0026#34; Example of immutable object handling (creating a new object instead of modifying the original):\nconst person = { name: \u0026#34;Ahmad\u0026#34;, age: 19 }; const updatedPerson = { ...person, age: 20 }; console.log(updatedPerson); // { name: \u0026#34;Ahmad\u0026#34;, age: 20 } Arrays \u0026amp; Objects Destructuring Array Destructuring Extract values from an array and assign them to variables. const numbers = [10, 20, 30]; const [a, b, c] = numbers; console.log(a, b, c); // 10 20 30 Object Destructuring const person = { name: \u0026#34;Ahmad\u0026#34;, age: 19, city: \u0026#34;Multan\u0026#34; }; const { name, age } = person; console.log(name, age); // Ahmad 19 Import \u0026amp; Export in JavaScript Exporting in JavaScript Named Export (Multiple Exports) export const name = \u0026#34;Ahmad\u0026#34;; export const age = 19; export function greet() { return \u0026#34;Hello!\u0026#34;; } Default Export (Single Export per File) export default function greet() { return \u0026#34;Hello!\u0026#34;; } Importing in JavaScript Named Import import { name, age, greet } from \u0026#34;./module.js\u0026#34;; console.log(name, age); // Ahmad 19 console.log(greet()); // Hello! Default Import import greet from \u0026#34;./module.js\u0026#34;; console.log(greet()); // Hello! Import Everything import * as data from \u0026#34;./module.js\u0026#34;; console.log(data.name); // Ahmad console.log(data.greet()); // Hello! Concept Description Mutable Can be changed (Objects, Arrays). Immutable Cannot be changed (Strings, Numbers). Primitive Types Stored by value (string, number, boolean, etc.). Reference Types Stored by reference (object, array, function). Destructuring Extracts values from arrays/objects into variables. Import/Export Used to share JavaScript files/modules. Spread (...) Expands arrays/objects into individual values. Rest (...) Gathers multiple values into an array. Map \u0026amp; Filter in JavaScript for React map() Method map() is used to iterate over an array and return a new array with modified elements. It does not modify the original array. Syntax:\nconst newArray = array.map((element, index, array) =\u0026gt; { return modifiedElement; }); Example:\nconst numbers = [1, 2, 3, 4]; const doubled = numbers.map(num =\u0026gt; num * 2); console.log(doubled); // [2, 4, 6, 8] filter() Method filter() is used to filter elements based on a condition. It returns a new array with only the elements that satisfy the condition. The original array remains unchanged. Syntax:\nconst newArray = array.filter((element, index, array) =\u0026gt; { return condition; }); Example:\nconst numbers = [1, 2, 3, 4, 5, 6]; const evenNumbers = numbers.filter(num =\u0026gt; num % 2 === 0); console.log(evenNumbers); // [2, 4, 6] Method Purpose Returns map() Transforms each element in an array A new array with modified values filter() Selects elements that match a condition A new array with filtered values map() + filter() First filters elements, then transforms them A new modified and filtered array ‚úÖ Use map() to modify each element in an array.\n‚úÖ Use filter() to remove unwanted elements from an array.\n‚úÖ Always use a key prop in React when rendering lists.\nDifference Between Library \u0026amp; Framework Feature Library Framework Definition A collection of reusable code that helps developers perform specific tasks. A full-fledged structure that dictates how the code should be organized. Control You control when and how to use the library. The framework controls the flow of execution. Flexibility More flexible, can be used with other tools. Less flexible, enforces a specific architecture. Example React.js (UI library), Lodash, jQuery Angular, Django, Ruby on Rails Key Difference React (Library): You decide how to structure the app. Angular (Framework): It dictates the structure. Real DOM vs Virtual DOM What is the DOM (Document Object Model)? The DOM represents the structure of an HTML document as a tree. JavaScript can manipulate the DOM to update elements dynamically. What is Real DOM? The actual structure of an HTML document in the browser. When a change is made, the entire page re-renders. Slow performance for frequent updates. What is Virtual DOM? A lightweight copy of the Real DOM. React updates the Virtual DOM first, then compares it with the previous version using diffing. Only the changed parts of the Real DOM get updated, making React much faster. Difference Between Real DOM \u0026amp; Virtual DOM Feature Real DOM Virtual DOM Definition Actual representation of the webpage. Lightweight copy of the Real DOM. Updates Directly updates the UI. Updates in memory first, then syncs with the Real DOM. Performance Slower (entire page re-renders). Faster (only updates changed parts). Efficiency Expensive updates, slow rendering. Optimized updates, fast rendering. Used in Vanilla JavaScript, jQuery. React, Vue.js. Why Virtual DOM is Important in React? ‚úÖ Faster updates compared to Real DOM.\n‚úÖ Better performance for dynamic content.\n‚úÖ Efficient UI rendering with minimal reflows.\nVite vs Create React App (CRA) in React.js 1. Vite üöÄ Modern, fast, and optimized build tool for React. Uses ES modules (ESM) and Hot Module Replacement (HMR) for instant updates. Super fast startup (no bundling in development). Supports TypeScript, JSX, and more out-of-the-box. Tree-shaking \u0026amp; optimized builds for production. Install React with Vite\nnpm create vite@latest npm install npm run dev 2. Create React App (CRA) üèóÔ∏è Traditional way to set up React projects. Uses Webpack (slower than Vite). Slower builds and HMR compared to Vite. Good for beginners, but outdated for large apps. Install React with CRA\nnpx create-react-app my-app cd my-app npm start JSX (JavaScript XML) \u0026amp; React Vite Folder Structure 1. JSX (JavaScript XML) JSX is a syntax extension for JavaScript used in React. Looks like HTML inside JavaScript but gets converted to JavaScript functions or React.createElement. Allows embedding JavaScript inside {}. Must return a single parent element (use \u0026lt;\u0026gt;...\u0026lt;/\u0026gt; if needed). const App = () =\u0026gt; { const name = \u0026#34;Ahmad\u0026#34;; return \u0026lt;h1\u0026gt;Hello, {name}!\u0026lt;/h1\u0026gt;; }; export default App; 2. React Vite Folder Structure . ‚îú‚îÄ‚îÄ eslint.config.js # ESLint configuration (optional) ‚îú‚îÄ‚îÄ index.html # Main HTML file (root of the app) ‚îú‚îÄ‚îÄ node_modules/ # Installed dependencies ‚îú‚îÄ‚îÄ package.json # Project metadata \u0026amp; dependencies ‚îú‚îÄ‚îÄ package-lock.json # Exact versions of installed packages ‚îú‚îÄ‚îÄ public/ # Static assets (images, fonts, etc.) ‚îú‚îÄ‚îÄ README.md # Project documentation ‚îú‚îÄ‚îÄ src/ # Main source code directory ‚îÇ ‚îú‚îÄ‚îÄ App.jsx # Main React component ‚îÇ ‚îú‚îÄ‚îÄ main.jsx # React entry file (renders App) ‚îÇ ‚îú‚îÄ‚îÄ assets/ # Images, styles, etc. ‚îÇ ‚îú‚îÄ‚îÄ components/ # Reusable UI components ‚îÇ ‚îú‚îÄ‚îÄ pages/ # Page components (if using routing) ‚îÇ ‚îî‚îÄ‚îÄ styles/ # Global CSS files (if needed) ‚îî‚îÄ‚îÄ vite.config.js # Vite configuration file Key Points ‚úÖ src/ contains all React components \u0026amp; logic.\n‚úÖ index.html is the main HTML template.\n‚úÖ Vite uses main.jsx to mount the React app into #root.\n‚úÖ Public files are served as-is from /public/.\nReact Components \u0026amp; How They Work 1. Component in React A component is a reusable, independent UI piece in React. Two types: Functional Components (recommended, use hooks). Class Components (older, uses this.state). Components return JSX and manage their own logic \u0026amp; state. const MyComponent = () =\u0026gt; { return \u0026lt;h1\u0026gt;Hello, React!\u0026lt;/h1\u0026gt;; }; export default MyComponent; 2. How They Work ‚úÖ We create components inside the src/components/ folder (e.g., MyComponent.jsx).\n‚úÖ Components are imported into App.jsx, which acts as the main component.\n‚úÖ main.jsx is responsible for rendering App.jsx inside the root \u0026lt;div\u0026gt; in index.html.\n‚úÖ ReactDOM.createRoot(document.getElementById('root')) creates the Virtual DOM and syncs\nFlow of Code in React Create a component (MyComponent.jsx): const MyComponent = () =\u0026gt; \u0026lt;h1\u0026gt;Hello, React!\u0026lt;/h1\u0026gt;; export default MyComponent; import it inside App.jsx: import MyComponent from \u0026#34;./components/MyComponent\u0026#34;; const App = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;MyComponent /\u0026gt; \u0026lt;/div\u0026gt; ); }; export default App; Render App.jsx inside main.jsx: import React from \u0026#34;react\u0026#34;; import ReactDOM from \u0026#34;react-dom/client\u0026#34;; import App from \u0026#34;./App\u0026#34;; ReactDOM.createRoot(document.getElementById(\u0026#34;root\u0026#34;)).render(\u0026lt;App /\u0026gt;); index.html contains root div: \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;root\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; Key Points ‚úÖ Components are modular \u0026amp; reusable in React.\n‚úÖ main.jsx renders App.jsx inside the root div.\n‚úÖ React Virtual DOM updates only changed parts for better performance. üöÄ\nConditional Rendering in React Conditional rendering in React allows components to render dynamically based on conditions.\nUsing if-else Statements\nfunction Greeting(props) { if (props.isLoggedIn) { return \u0026lt;h1\u0026gt;Welcome Back!\u0026lt;/h1\u0026gt;; } else { return \u0026lt;h1\u0026gt;Please Sign In\u0026lt;/h1\u0026gt;; } } Using Ternary Operator (? :)\nfunction Greeting({ isLoggedIn }) { return \u0026lt;h1\u0026gt;{isLoggedIn ? \u0026#34;Welcome Back!\u0026#34; : \u0026#34;Please Sign In\u0026#34;}\u0026lt;/h1\u0026gt;; } Event Handling in React React follows the Synthetic Event system, making event handling efficient across different browsers.\nHandling Click Events\nfunction Button() { function handleClick() { alert(\u0026#34;Button Clicked!\u0026#34;); } return \u0026lt;button onClick={handleClick}\u0026gt;Click Me\u0026lt;/button\u0026gt;; } Passing Arguments in Event Handlers\nfunction Greeting({ name }) { function sayHello(name) { alert(`Hello, ${name}!`); } return \u0026lt;button onClick={() =\u0026gt; sayHello(name)}\u0026gt;Greet\u0026lt;/button\u0026gt;; } Handling Keyboard Events\nfunction InputBox() { function handleKeyPress(event) { if (event.key === \u0026#34;Enter\u0026#34;) { alert(\u0026#34;Enter key pressed!\u0026#34;); } } return \u0026lt;input type=\u0026#34;text\u0026#34; onKeyPress={handleKeyPress} /\u0026gt;; } ‚úÖ Conditional Rendering: Use if-else, ternary (? :), \u0026amp;\u0026amp;, or switch-case for rendering components based on conditions.\n‚úÖ Event Handling: Use event handlers like onClick, onKeyPress, onSubmit, etc., with functions.\n‚úÖ Pass Parameters: Use arrow functions for passing arguments in event handlers.\n‚úÖ Prevent Default Behavior: Use event.preventDefault() to stop default browser actions like form submissions.\nState in React State is an object that holds dynamic data that affects a component‚Äôs rendering. Unlike props, state is mutable and can be changed within a component. When state changes, React re-renders the component to reflect the updates. Types of State in React Local State: Managed within a single component using useState(). Example: Form inputs, modals, toggles. Global State: Shared across multiple components. Managed using Context API, Redux, or other state management libraries. Server State: Data fetched from an API that needs to be integrated into UI. Managed using tools like React Query, SWR, or Redux Thunk. URL State: State stored in the URL (query parameters, path, etc.). Managed using React Router. Understanding useState() Hook useState() is a React Hook that allows functional components to manage state. It returns an array with two values: The current state value. A function to update the state. Syntax:\nconst [state, setState] = useState(initialValue); Example: Counter App\nimport { useState } from \u0026#34;react\u0026#34;; function Counter() { const [count, setCount] = useState(0); // Initial state is 0 return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Count: {count}\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt;Increment\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } export default Counter; useState(0): Initializes count to 0. setCount(count + 1): Updates the state, causing a re-render. Updating State Correctly 1. Using Functional Updates (Best Practice)\nWhen the new state depends on the previous state, use a function inside setState(). setCount((prevCount) =\u0026gt; prevCount + 1); This ensures correct updates, especially in async operations. 2. Updating Objects in State\nUse spread operator (...) to avoid modifying the original state. const [user, setUser] = useState({ name: \u0026#34;Ahmad\u0026#34;, age: 19 }); setUser(prevUser =\u0026gt; ({ ...prevUser, age: prevUser.age + 1 })); 3. Updating Arrays in State\nUse spread operator (...) to update arrays. const [items, setItems] = useState([1, 2, 3]); setItems(prevItems =\u0026gt; [...prevItems, 4]); // Adds new item ‚úÖ State is a way to store data inside a component.\n‚úÖ useState() is used to manage local state in functional components.\n‚úÖ Always use the updater function when updating state based on previous values.\n‚úÖ Never modify state directly, always use setState().\nProps (Properties) in React What are Props? Props stand for Properties. Props are read-only data passed from a parent component to a child component. They allow components to be dynamic and reusable by passing different data to them. Think of props as function arguments for components. How Props Work Parent component passes props to a child component. Child component receives them as a parameter (usually an object). The child accesses props using props.propName. Syntax 1. Passing Props \u0026lt;ChildComponent name=\u0026#34;Ahmad\u0026#34; age={19} /\u0026gt; 2. Receiving Props function ChildComponent(props) { return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Name: {props.name}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Age: {props.age}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } ‚úÖ OR Using Destructuring function ChildComponent({ name, age }) { return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Name: {name}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Age: {age}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } üß© Key Points Props are immutable: You cannot change props inside the child component. Unidirectional flow: Data flows from parent to child (one-way data binding). Can be any data type: String, number, boolean, array, object, function, etc. Used to customize components and make them reusable. CSS Modules A CSS Module is a CSS file in which all class and animation names are scoped locally by default. This means that styles defined in one component won‚Äôt affect other components, preventing style conflicts. Used in React.js to maintain modular, reusable, and conflict-free CSS How It Works A CSS file is treated as a module when named with the .module.css extension. Example: MyComponent.module.css In React, you import it as an object where each CSS class becomes a property of that object. üìÑ Example File: Button.module.css\n.button { background-color: blue; color: white; } Example Usage in Component import styles from \u0026#39;./Button.module.css\u0026#39;; function Button() { return \u0026lt;button className={styles.button}\u0026gt;Click me\u0026lt;/button\u0026gt;; } Behind the Scenes CSS Modules use a build tool like Webpack to automatically transform class names into unique identifiers. Example: .button in the source might become .Button_button__3hWkj in the final DOM. The mapping ensures local scoping and uniqueness across components. Comparison with Other Styling Methods Method Scoped Reusable Global Impact Setup Required CSS Modules ‚úÖ ‚úÖ ‚ùå Minimal Inline Styles ‚úÖ ‚ùå ‚ùå None Global CSS ‚ùå ‚úÖ ‚úÖ None CSS-in-JS (e.g. styled-components) ‚úÖ ‚úÖ ‚ùå More setup Form Handling in React.js Form handling refers to how input data is captured from HTML forms (like \u0026lt;input\u0026gt;, \u0026lt;textarea\u0026gt;, \u0026lt;select\u0026gt;) and managed using state or references in React.\nKey Concepts: React forms are usually managed through state (controlled) or refs (uncontrolled). You handle form submissions via an onSubmit event handler. You use onChange to capture input updates. Uncontrolled Components \u0026amp; useRef() An uncontrolled component lets the DOM manage the input value, and React accesses it using a ref.\nUsed to directly access a DOM element Doesn‚Äôt re-render the component on value change const inputRef = useRef(); const handleSubmit = () =\u0026gt; { console.log(inputRef.current.value); }; \u0026lt;input type=\u0026#34;text\u0026#34; ref={inputRef} /\u0026gt; Controlled Components A controlled component is an input element whose value is controlled by React state.\nconst [name, setName] = useState(\u0026#34;\u0026#34;); \u0026lt;input type=\u0026#34;text\u0026#34; value={name} onChange={(e) =\u0026gt; setName(e.target.value)} /\u0026gt; Full Example:\nimport React, { useState } from \u0026#34;react\u0026#34;; function Form() { const [val, setVal] = useState({ name: \u0026#34;\u0026#34;, email: \u0026#34;\u0026#34; }); const handleSubmit = (event) =\u0026gt; { event.preventDefault(); console.log(val); }; return ( \u0026lt;\u0026gt; \u0026lt;form action=\u0026#34;\u0026#34; onSubmit={handleSubmit}\u0026gt; \u0026lt;input onChange={(event) =\u0026gt; setVal({ ...val, name: event.target.value })} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; placeholder=\u0026#34;Email\u0026#34; onChange={(event) =\u0026gt; setVal({ ...val, email: event.target.value })} /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/\u0026gt; ); } export default Form; React Hook Form (Library) React Hook Form is a popular library for building performant and flexible forms in React.\nWhy Use It? Reduces boilerplate code Built-in validation Integrates well with UI libraries like Material UI, Chakra UI, etc. Basic Example:\nimport { useForm } from \u0026#34;react-hook-form\u0026#34;; const { register, handleSubmit } = useForm(); const onSubmit = (data) =\u0026gt; console.log(data); \u0026lt;form onSubmit={handleSubmit(onSubmit)}\u0026gt; \u0026lt;input {...register(\u0026#34;username\u0026#34;)} /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; Full Example\nimport React from \u0026#34;react\u0026#34;; import { useForm } from \u0026#34;react-hook-form\u0026#34;; function Form() { const { register, handleSubmit } = useForm(); return ( \u0026lt;\u0026gt; \u0026lt;form action=\u0026#34;\u0026#34; onSubmit={handleSubmit((data) =\u0026gt; console.log(data))}\u0026gt; \u0026lt;input {...register(\u0026#34;name\u0026#34;)} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;input {...register(\u0026#34;age\u0026#34;)} type=\u0026#34;age\u0026#34; placeholder=\u0026#34;age\u0026#34; /\u0026gt; \u0026lt;input {...register(\u0026#34;email\u0026#34;)} type=\u0026#34;email\u0026#34; placeholder=\u0026#34;email\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/\u0026gt; ); } export default Form; Dynamic Routing in React.js Dynamic Routing means that the routing is handled at runtime (not at compile time like in traditional HTML websites).\nIn React.js, dynamic routing is implemented using React Router, a library that enables navigation among views of various components.\nUnlike traditional routing where routes are hardcoded in a file (like routes.php), React dynamically loads components based on the current URL.\nInstallation of react-router-dom\nnpm install react-router-dom Core Components of React Router BrowserRouter ‚Äì Wraps the app and enables routing. Routes ‚Äì A container for all the Route components. Route ‚Äì Defines the path and component to render. Link / NavLink ‚Äì Used for navigation without reloading the page. useParams ‚Äì Hook to access URL parameters (useful for dynamic routes). Basic Routing Setup import { BrowserRouter, Routes, Route } from \u0026#34;react-router-dom\u0026#34;; import Home from \u0026#39;./Home\u0026#39;; import About from \u0026#39;./About\u0026#39;; function App() { return ( \u0026lt;BrowserRouter\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/\u0026#34; element={\u0026lt;Home /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/about\u0026#34; element={\u0026lt;About /\u0026gt;} /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/BrowserRouter\u0026gt; ); } What is Dynamic Routing? Dynamic routing allows us to create routes where parts of the URL are variables, e.g., /user/1, /user/2, etc.\n\u0026lt;Route path=\u0026#34;/user/:id\u0026#34; element={\u0026lt;UserProfile /\u0026gt;} /\u0026gt; In this case, :id is a route parameter.\nAccessing Dynamic Parameters: useParams useParams() is a React Router hook used to access dynamic parameters from the current URL. It is most useful with dynamic routes like /user/:id, /post/:slug, etc. import { useParams } from \u0026#34;react-router-dom\u0026#34;; function UserProfile() { const { id } = useParams(); return \u0026lt;h1\u0026gt;User ID: {id}\u0026lt;/h1\u0026gt;; } useNavigate() in React Router useNavigate() is a hook provided by react-router-dom. It is used to programmatically navigate to different routes (without clicking a \u0026lt;Link\u0026gt; or \u0026lt;NavLink\u0026gt;). It replaces the older useHistory() from React Router v5. const navigate = useNavigate(); function handleClick() { navigate(\u0026#34;/about\u0026#34;); } üîÅ Navigate with Parameters navigate(`/user/${userId}`); ‚èÆÔ∏è Navigate Back or Forward navigate(-1); // Go back navigate(1); // Go forward Feature Description navigate(\u0026quot;/path\u0026quot;) Navigate to a route navigate(-1) Go back navigate(1) Go forward { replace: true } Replace history entry { state: {...} } Pass data with navigation NavLink in React Router NavLink is a special version of the \u0026lt;Link\u0026gt; component in react-router-dom that adds styling attributes to the rendered element when it matches the current URL.\nIt‚Äôs perfect when you want to highlight the active page in a navigation menu (e.g., changing the color or adding underline).\n\u0026lt;NavLink to=\u0026#34;/home\u0026#34;\u0026gt;Home\u0026lt;/NavLink\u0026gt; \u0026lt;NavLink to=\u0026#34;/about\u0026#34;\u0026gt;About\u0026lt;/NavLink\u0026gt; Active Styling with NavLink By default, NavLink applies an active class when the route matches.\nYou can also provide your own styles or class names based on the active state using:\n‚úÖ className as a Function\n\u0026lt;NavLink to=\u0026#34;/home\u0026#34; className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;inactive-link\u0026#34;} \u0026gt; Home \u0026lt;/NavLink\u0026gt; ‚úÖ style as a Function\n\u0026lt;NavLink to=\u0026#34;/about\u0026#34; style={({ isActive }) =\u0026gt; ({ color: isActive ? \u0026#34;green\u0026#34; : \u0026#34;gray\u0026#34;, textDecoration: isActive ? \u0026#34;underline\u0026#34; : \u0026#34;none\u0026#34; })} \u0026gt; About \u0026lt;/NavLink\u0026gt; Example with Full NavBar import { NavLink } from \u0026#34;react-router-dom\u0026#34;; import \u0026#34;./styles.css\u0026#34;; // Assume you have .active-link class here function Navbar() { return ( \u0026lt;nav\u0026gt; \u0026lt;NavLink to=\u0026#34;/\u0026#34; end className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;\u0026#34;}\u0026gt; Home \u0026lt;/NavLink\u0026gt; \u0026lt;NavLink to=\u0026#34;/about\u0026#34; className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;\u0026#34;}\u0026gt; About \u0026lt;/NavLink\u0026gt; \u0026lt;NavLink to=\u0026#34;/contact\u0026#34; className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;\u0026#34;}\u0026gt; Contact \u0026lt;/NavLink\u0026gt; \u0026lt;/nav\u0026gt; ); } Summary of NavLink Prop/Feature Description to=\u0026quot;/path\u0026quot; Target route className Function that gives conditional class style Function that returns conditional style end Ensures exact matching isActive Boolean indicating current URL match \u0026lt;Outlet /\u0026gt; in React Router \u0026lt;Outlet /\u0026gt; is a placeholder component used to render child routes inside a parent route. It\u0026rsquo;s like saying: ‚ÄúHere is where the nested component will appear.‚Äù ‚úÖ How It Works Visiting /dashboard/profile will render: Dashboard component Profile component inside the \u0026lt;Outlet /\u0026gt; Visiting /dashboard/settings will render: Dashboard component Settings component inside the \u0026lt;Outlet /\u0026gt; import { Outlet } from \u0026#34;react-router-dom\u0026#34;; function Dashboard() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Dashboard Layout\u0026lt;/h1\u0026gt; {/* Nested route component will be rendered here */} \u0026lt;Outlet /\u0026gt; \u0026lt;/div\u0026gt; ); } API Integration in React.js using AJAX (fetch / axios) API integration in React lets your app communicate with backends, external services, or databases. AJAX (Asynchronous JavaScript and XML) is used to make asynchronous requests to APIs.\n1. Using fetch useEffect(() =\u0026gt; { fetch(\u0026#39;https://api.example.com/data\u0026#39;) .then(res =\u0026gt; res.json()) .then(data =\u0026gt; setData(data)) .catch(err =\u0026gt; console.error(err)); }, []); fetch() returns a Promise. Must manually handle JSON parsing (res.json()). 2. Using axios npm install axios // install this package to use axios import axios from \u0026#34;axios\u0026#34;; import React from \u0026#34;react\u0026#34;; const App = () =\u0026gt; { const api = \u0026#34;https://fakestoreapi.com/products\u0026#34;; // üì• Function to GET products from the API const getProducts = () =\u0026gt; { axios .get(api) .then((res) =\u0026gt; console.log(\u0026#34;GET:\u0026#34;, res)) .catch((err) =\u0026gt; console.error(\u0026#34;GET Error:\u0026#34;, err)); }; // üì§ Function to POST (add) a new product to the API const addProducts = () =\u0026gt; { axios .post(api, { id: 0, title: \u0026#34;Sample Product\u0026#34;, price: 0.1, description: \u0026#34;This is a test product.\u0026#34;, category: \u0026#34;sample-category\u0026#34;, image: \u0026#34;http://example.com/image.jpg\u0026#34;, }) .then((res) =\u0026gt; console.log(\u0026#34;POST:\u0026#34;, res)) .catch((err) =\u0026gt; console.error(\u0026#34;POST Error:\u0026#34;, err)); }; return ( \u0026lt;div className=\u0026#34;p-5\u0026#34;\u0026gt; {/* üü¢ Button to trigger GET request */} \u0026lt;button onClick={getProducts} className=\u0026#34;px-3 py-2 m-2 bg-blue-500 rounded-lg text-white\u0026#34; \u0026gt; Get Data \u0026lt;/button\u0026gt; {/* üîµ Button to trigger POST request */} \u0026lt;button onClick={addProducts} className=\u0026#34;px-3 py-2 m-2 bg-green-600 rounded-lg text-white\u0026#34; \u0026gt; Send Data \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); }; export default App; Example (with async/await) useEffect(() =\u0026gt; { const fetchData = async () =\u0026gt; { try { const response = await axios.get(\u0026#39;https://api.example.com/data\u0026#39;); setData(response.data); } catch (err) { console.error(err); } finally { setLoading(false); } }; fetchData(); }, []); React Component Lifecycle The component lifecycle refers to the sequence of methods/functions that are invoked during the life of a React component ‚Äî from its creation to its removal from the DOM.\nüß± 3 Main Phases: 1. Mounting Component is being created and inserted into the DOM.\nconstructor() ‚Üí (Class component only) render() componentDidMount() ‚úÖ (ideal for API calls, subscriptions) 2. Updating When props or state change.\nshouldComponentUpdate() ‚Üí (optional) render() componentDidUpdate() ‚úÖ (runs after update) 3. Unmounting Component is removed from the DOM.\ncomponentWillUnmount() ‚úÖ (cleanup tasks: timers, subscriptions, etc.) Functional Components use useEffect for all of this! A React Hook for handling side effects (e.g. API calls, DOM updates, subscriptions). Runs after the component renders. Basic Syntax useEffect(() =\u0026gt; { // effect logic return () =\u0026gt; { // optional cleanup }; }, [dependencies]); Dependency Array []: runs once after initial render (like componentDidMount) [var]: runs when var changes No array: runs after every render Note: When we [] square bracket in useEffect() component only update the changed part and if we don\u0026rsquo;t add square bracket component re-render means first it deleted and then again created.\nüí° Common Uses API calls Event listeners Timers Cleanups (return function) Full Example useEffect(() =\u0026gt; { console.log(\u0026#34;About Component is Created\u0026#34;); return () =\u0026gt; { console.log(\u0026#34;About Comonent is Deleted\u0026#34;); }; Example: Cleanup (like componentWillUnmount) useEffect(() =\u0026gt; { const timer = setInterval(() =\u0026gt; { console.log(\u0026#34;Running interval...\u0026#34;); }, 1000); return () =\u0026gt; { clearInterval(timer); // üßπ cleanup console.log(\u0026#34;Interval cleared\u0026#34;); }; }, []); What is React Reconciliation React Reconciliation is the process React uses to update the DOM efficiently when the state or props of a component change.\nThis makes updates fast and efficient, instead of redrawing the whole UI.\nNote: üîç Think of reconciliation as React saying: \u0026ldquo;Okay, what exactly changed? Let me only update that part.\u0026rdquo;\nTerm What it Means Triggered By Happens In Updating When React detects a change in props or state. setState, parent re-render, context change, etc. Component lifecycle Re-rendering When the component‚Äôs render method runs again (or JSX is re-evaluated in function components). After an update (or forced render) Virtual DOM const [val, setVal] = useState(\u0026#34;This is Normal Data\u0026#34;); const [val2, setVal2] = useState(\u0026#34;This is Very Large Data\u0026#34;); useEffect(() =\u0026gt; { console.log(\u0026#34;About Component is Created\u0026#34;); return () =\u0026gt; { console.log(\u0026#34;About Comonent is Deleted\u0026#34;); }; }, [val2]); // component only re-render when val2 is changed otherwise it update only changed part. Axios for Session Management \u0026amp; Separation 1. Why Use a Separate Axios File? Centralizes config (base URL, headers, interceptors) Cleaner code, reusable instance Easy to maintain sessions (cookies, tokens) Can add error handlers globally 2. Basic Axios Setup (Separate File) üóÇÔ∏è File: axiosInstance.js\nimport axios from \u0026#34;axios\u0026#34;; // Create an Axios instance const instance = axios.create({ baseURL: \u0026#34;https://fakestoreapi.com/\u0026#34;, // üè† Your backend URL withCredentials: true, // ‚úÖ Important for session cookies }); export default instance; 3. What withCredentials: true Does Allows Axios to send cookies and authentication headers Required when working with sessions (esp. JWT or Express sessions) Must also be enabled on backend (CORS settings) 4. Using It in Components import axios from \u0026#34;../axiosInstance\u0026#34;; const getProducts = async () =\u0026gt; { try { const res = await axios.get(\u0026#34;/products\u0026#34;); console.log(res.data); } catch (err) { console.error(err); } }; Concept Purpose withCredentials Send cookies for session management axios.create() Reusable config for base URL, etc. interceptors Add headers (like auth) automatically instance.get() Use anywhere like normal Axios ReactJS Context API A way to share data between components without passing props manually at every level. Solves prop drilling (passing data from parent to child repeatedly). When to Use Context API? When you need to share state across many components (e.g., theme, user authentication, language, etc.) Good for global state management in small to medium-sized apps. Key Components of Context API React.createContext() Creates a context object. const MyContext = React.createContext(); \u0026lt;Context.Provider\u0026gt; Wraps components to provide the context value. \u0026lt;MyContext.Provider value={someData}\u0026gt; \u0026lt;ChildComponent /\u0026gt; \u0026lt;/MyContext.Provider\u0026gt; useContext(Context) A hook to access the context value in a functional component. const value = useContext(MyContext); Example: Basic Usage // 1. Create Context const ThemeContext = React.createContext(); // 2. Create a Provider Component const ThemeProvider = ({ children }) =\u0026gt; { const [theme, setTheme] = React.useState(\u0026#34;light\u0026#34;); return ( \u0026lt;ThemeContext.Provider value={{ theme, setTheme }}\u0026gt; {children} \u0026lt;/ThemeContext.Provider\u0026gt; ); }; // 3. Use Context in a Child Component const ThemeToggler = () =\u0026gt; { const { theme, setTheme } = React.useContext(ThemeContext); return ( \u0026lt;button onClick={() =\u0026gt; setTheme(theme === \u0026#34;light\u0026#34; ? \u0026#34;dark\u0026#34; : \u0026#34;light\u0026#34;)}\u0026gt; Switch to {theme === \u0026#34;light\u0026#34; ? \u0026#34;dark\u0026#34; : \u0026#34;light\u0026#34;} mode \u0026lt;/button\u0026gt; ); }; // 4. Wrap in App const App = () =\u0026gt; ( \u0026lt;ThemeProvider\u0026gt; \u0026lt;ThemeToggler /\u0026gt; \u0026lt;/ThemeProvider\u0026gt; ); Redux Toolkit (RTK) What is Redux Redux is a state management library used with JavaScript apps (especially React) to manage and share application-wide state in a predictable way.\nWhat is React-Redux? React-Redux is the official binding library that allows React components to interact with the Redux store using hooks like:\nuseSelector() ‚Äì read state useDispatch() ‚Äì send actions It acts as a bridge between Redux and React.\nWhy Redux Toolkit is Useful ‚úÖ Reduces boilerplate code (less code, same result) ‚úÖ Built-in support for async actions using createAsyncThunk ‚úÖ Uses Immer.js internally so you can write mutable-style logic safely ‚úÖ Easy and clean setup via configureStore and createSlice ‚úÖ Encourages best practices by default Core Concepts Concept Description Store Holds the global state Slice A piece of the store: includes state + reducers Action An object describing a change Reducer A function that updates state based on action Dispatch A way to send actions to the store Selector Reads state from the store Redux Toolkit vs Context API Feature Redux Toolkit Context API üß† Purpose Complex state management Simple state sharing üîÅ Re-renders Optimized with useSelector() Causes re-renders of all consumers üîå DevTools Built-in support for Redux DevTools ‚ùå No DevTools üßµ Async Logic Built-in with createAsyncThunk Needs custom setup üì¶ Scalability Highly scalable (slices, modular code) Not ideal for large apps üîß Boilerplate Minimal with RTK Less than raw Redux, but Context still has limitations üîí Predictability More structured and strict More flexible but can lead to mess Use Context API: For theme, language, auth user ‚Äì simple state Use Redux Toolkit: For complex state logic, shared global data, multiple components, async logic Redux Flow Diagram: üì¶ Store ‚Äì Global State Container The store is where all the application state lives. It combines different reducers (e.g., user, products, carts) into one centralized global state. The store is created using configureStore() in Redux Toolkit. üß© Reducers ‚Äì Handle State Changes Reducers are functions that decide how the state should change in response to actions. Each reducer manages its own slice of state (e.g., user state, products state, carts state). Redux Toolkit allows you to define reducers inside createSlice(). üéØ Action ‚Äì Event Trigger An action is a plain JavaScript object that describes what happened. Actions are sent from components using dispatch() and are automatically created via createSlice() in RTK. For example:\n{ type: \u0026quot;cart/addToCart\u0026quot;, payload: { id: 1, name: \u0026quot;Product A\u0026quot; } } üßµ From App.jsx (Any Component) Any component (like App.jsx or its children) can: Read data using useSelector() ‚Äì it\u0026rsquo;s read-only, not mutable. Send actions using useDispatch() to update the global state. Installation and Usage 1. Install Redux Toolkit and React-Redux Add the Redux Toolkit and React-Redux packages to your project:\nnpm install @reduxjs/toolkit react-redux 2. Create a Redux Store Create a file named src/app/store.js. Import the configureStore API from Redux Toolkit. We\u0026rsquo;ll start by creating an empty Redux store, and exporting it:\nimport { configureStore } from \u0026#39;@reduxjs/toolkit\u0026#39; export const store = configureStore({ reducer: {}, }) 3. Provide the Redux Store to React Once the store is created, we can make it available to our React components by putting a React-Redux \u0026lt;Provider\u0026gt; around our application in src/index.js. Import the Redux store we just created, put a \u0026lt;Provider\u0026gt; around your \u0026lt;App\u0026gt;, and pass the store as a prop:\ncreateRoot(document.getElementById(\u0026#34;root\u0026#34;)).render( \u0026lt;Provider store={store}\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;/Provider\u0026gt; ); Note: Redux installed and below is example usage\n4. Create a Redux State Slice import { createSlice } from \u0026#39;@reduxjs/toolkit\u0026#39; const initialState = { value: 0, } export const counterSlice = createSlice({ name: \u0026#39;counter\u0026#39;, initialState, reducers: { increment: (state) =\u0026gt; { // Redux Toolkit allows us to write \u0026#34;mutating\u0026#34; logic in reducers. It // doesn\u0026#39;t actually mutate the state because it uses the Immer library, // which detects changes to a \u0026#34;draft state\u0026#34; and produces a brand new // immutable state based off those changes state.value += 1 }, decrement: (state) =\u0026gt; { state.value -= 1 }, incrementByAmount: (state, action) =\u0026gt; { state.value += action.payload }, }, }) // Action creators are generated for each case reducer function export const { increment, decrement, incrementByAmount } = counterSlice.actions export default counterSlice.reducer 5. Add Slice Reducers to the Store import { configureStore } from \u0026#39;@reduxjs/toolkit\u0026#39; import counterReducer from \u0026#39;../features/counter/counterSlice\u0026#39; export const store = configureStore({ reducer: { counter: counterReducer, }, }) 6. Use Redux State and Actions in React Components import React from \u0026#39;react\u0026#39; import { useSelector, useDispatch } from \u0026#39;react-redux\u0026#39; import { decrement, increment } from \u0026#39;./counterSlice\u0026#39; export function Counter() { const count = useSelector((state) =\u0026gt; state.counter.value) const dispatch = useDispatch() return ( \u0026lt;div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button aria-label=\u0026#34;Increment value\u0026#34; onClick={() =\u0026gt; dispatch(increment())} \u0026gt; Increment \u0026lt;/button\u0026gt; \u0026lt;span\u0026gt;{count}\u0026lt;/span\u0026gt; \u0026lt;button aria-label=\u0026#34;Decrement value\u0026#34; onClick={() =\u0026gt; dispatch(decrement())} \u0026gt; Decrement \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) } There is always room for improvement and continuous learning, but we\u0026rsquo;ll end this note/article here. We\u0026rsquo;ve gained valuable knowledge about React ‚Äî congratulations!\n","permalink":"http://localhost:1313/posts/reactjs/","summary":"\u003cp\u003e\u003cimg alt=\"JS Image\" loading=\"lazy\" src=\"/posts/assets/react/react.webp\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReact.js is a JavaScript library for building \u003cstrong\u003euser interfaces\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eDeveloped by \u003cstrong\u003eFacebook\u003c/strong\u003e (now Meta) in 2013.\u003c/li\u003e\n\u003cli\u003eIt is \u003cstrong\u003ecomponent-based\u003c/strong\u003e, \u003cstrong\u003edeclarative\u003c/strong\u003e, and allows for efficient UI updates.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"key-features-of-react\"\u003eKey Features of React\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eComponent-Based Architecture\u003c/strong\u003e: UI is built using reusable components.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVirtual DOM\u003c/strong\u003e: Updates only the changed parts, making React fast.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUnidirectional Data Flow\u003c/strong\u003e: Props and state maintain a predictable data structure.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eJSX (JavaScript XML)\u003c/strong\u003e: A syntax extension that lets you write HTML inside JavaScript.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHooks\u003c/strong\u003e: Allow functional components to have state and other features.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"mutable-vs-immutable\"\u003eMutable vs Immutable\u003c/h2\u003e\n\u003ch3 id=\"mutable-changeable\"\u003eMutable (Changeable)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eMutable data types \u003cstrong\u003ecan be changed\u003c/strong\u003e after creation.\u003c/li\u003e\n\u003cli\u003eExample: \u003cstrong\u003eObjects \u0026amp; Arrays\u003c/strong\u003e are mutable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e arr \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#bd93f9\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#bd93f9\"\u003e3\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003earr.push(\u003cspan style=\"color:#bd93f9\"\u003e4\u003c/span\u003e); \u003cspan style=\"color:#6272a4\"\u003e// Modifies the original array\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#6272a4\"\u003e\u003c/span\u003econsole.log(arr); \u003cspan style=\"color:#6272a4\"\u003e// [1, 2, 3, 4]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"immutable-unchangeable\"\u003eImmutable (Unchangeable)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eImmutable data \u003cstrong\u003ecannot be changed\u003c/strong\u003e directly. Instead, you create a new copy.\u003c/li\u003e\n\u003cli\u003eExample: \u003cstrong\u003eStrings \u0026amp; Numbers\u003c/strong\u003e are immutable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e str \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estr[\u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;M\u0026#34;\u003c/span\u003e; \u003cspan style=\"color:#6272a4\"\u003e// This won\u0026#39;t change the string\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#6272a4\"\u003e\u003c/span\u003econsole.log(str); \u003cspan style=\"color:#6272a4\"\u003e// \u0026#34;Hello\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eExample of immutable object handling (creating a new object instead of modifying the original):\u003c/p\u003e","title":"React ‚Äì A JavaScript Library"},{"content":"\nHow anyone can be more effective with less effort by learning how to identify and leverage the 80/20 principle\u0026ndash;the well-known, unpublicized secret that 80 percent of all our results in business and in life stem from a mere 20 percent of our efforts.\nThe 80/20 principle is one of the great secrets of highly effective people and organizations.\nDid you know, for example, that 20 percent of customers account for 80 percent of revenues? That 20 percent of our time accounts for 80 percent of the work we accomplish? The 80/20 Principle shows how we can achieve much more with much less effort, time, and resources, simply by identifying and focusing our efforts on the 20 percent t at really counts. Although the 80/20 principle has long influenced today\u0026rsquo;s business world, author Richard Koch reveals how the principl works and shows how we can use it in a systematic and practical way to vastly increase our effectiveness, and improve our careers and o r companies.\nThe unspoken corollary to the 80/20 principle is that little of what we spend our time on actually counts. But by concentrating on those things that do, we can unlock the enormous potential of the magic 20 percent, and transform our effectiveness in our jobs, our careers, our businesses, and our lives.\n1) 80/20: The Basics The 80/20 Principle:\n80% of your effort, action, or input will lead to only 20% of your results, output, rewards, or victories. 20% of your efforts, action, or input is what leads to the majority of your results, output, rewards and victories. It is a proven nonlinear approach to everything that happens. You will see this consistently across the board 20% of the pea pods will have 80% of the peas 80% of the money in this world is controlled by 20% of the people 80% of your carpet wear will be on 20% of your carpet 80% of your profits come from 20% of your customers 2) You Can Be great The 80/20 principle states that it is possible for anyone to achieve greatness.\nThe key: Do not spend your time trying to figure out how much effort you will need to become great at something.\nInstead: Figure out what is the right thing for you to do.\njWhat is it that makes you great? What is it that makes you come alive? What is that area where you are the best? If you\u0026rsquo;re spending your time on everything else, you\u0026rsquo;re just going to be wasting your life away, never getting to that point of greatness.\nSo find that area where you can be great and just push on that. Continue to work on that.\nThat may be where you\u0026rsquo;re expending minimum effort but are getting the most benefit from. That is the area where you will get exponential results.\n3) Choose Your Allies One of the most important decisions you can make in your life concerns your allies \u0026ndash; figuring out who are the people you are going to spend time with.\nBut in most cases, people are doing this wrong.\nThe allies they have are by default. They just happened to run into certain kinds of people and hence they associated with them. That how they choose \u0026ndash; or how they don‚Äôt choose \u0026ndash; their allies.\nThese are the wrong kinds of ‚Äúallies.‚Äù Your allies should not be chosen by default People have too many allies. There are just too many people in their lives who do not add much value.\nPeople do not know how to use their allies, how to be able to leverage them.\nThe key to 80/20 thinking Say this: ‚ÄúI\u0026rsquo;m going to choose my allies who are going to help me move forward in my life.‚Äù\nYou\u0026rsquo;re not going to do it by default. It\u0026rsquo;s going to be by design.\nPick a few allies that are powerful. Pick a few that are going to really help you move the needle forward. Don‚Äôt have too many. And then use them properly. Leverage their strengths and they will leverage yours. That\u0026rsquo;s the power of allies. You help each other out and you build each other up and get exponential results in the process.\n4) Design Your Own Game How people play the game of life\nThey play their game of life by default They play the game of life that their parents want them to play, that the society wants them to play They continue to lose at that game because they never designed the game that they are in. But as 80/20 thinkers, we need to design our game \u0026ndash; the game that we most want to play \u0026ndash; then it will be really easy for us to win at that game.\nThose with default conditioning are actually playing someone else\u0026rsquo;s game. They\u0026rsquo;re simply wasting their time playing others‚Äô games, society‚Äôs games, and so on \u0026ndash; anything but their own game, which is what really matters.\nThe greatest innovations and the greatest accomplishments are always a result of people who are designing their own game and hence winning at those games. They\u0026rsquo;re designing their own races of life and are playing in those races, winning in those races, and that\u0026rsquo;s what we need to do.\nWe need to design our own game and win in those games to get exponential results.\n5) Achievement Island / Desert As you look back at your life, what you\u0026rsquo;ll see is That\nthere are short periods of time when you get extreme results there are long periods of time when you got almost no results Wonder what‚Äôs going on?\nThe key to harnessing the power of 80/20:\nRealize that we\u0026rsquo;re gonna have these short periods of extreme results (or the author‚Äôs so-called ‚ÄúAchievement Islands‚Äù)\nTo Do:\nMake a list of all the times in your life where you\u0026rsquo;ve had these Achievement Islands. Be guided by these questions: Where have you had extreme results in very short durations of time? What are the key characteristics of those situations? What are the things that stand out when you think about these moments of extreme results? What happened? Why did you get those results? On the other end, make a list of the times in your life where you almost got no results at all despite trying and trying (‚ÄúAchievement Deserts‚Äù). What happened? What were the common situations or characteristics that were happening during those long periods of time? Now your job is to focus as much as possible on the things where you were getting maximum results. Those are what will get you to move towards your Achievement Islands rather than your Achievement Deserts. 6) 80/20 in Relationships When it comes to relationships, 80/20 principle still holds true.\n80% of your relationships give you only 20% value 20% of your relationships give you 80% value So what you need to do is ensure that you\u0026rsquo;re spending 80% of your relationship time on only 20% of those relationships. These are your high-leverage people, the relationships that are creating the most value.\nWith that, spend only 20% on the remaining 80% people in your life.\nMany people tend to spray their effort with a lot of different relationships (the 80%) all over the place.\nThese are relationships that don\u0026rsquo;t bring them any long-term value. They have a lot of friends, but none of them are real. None of them are actually going to help them build anything useful or accomplish great goals. As an 80/20 practitioner, find a few powerful alliances. These are your key allies ( your 20%).\nDevelop deep relationships with them. Spend a lot of quality time with them in order to strengthen those 20% relationships. Richard Koch says that all we need is just 6-7 key allies, and then we can do tremendously in our lives. We don\u0026rsquo;t need 100, 200, or 500 friends. From there we can leverage the power of our relationships.\nStart figuring out who these people are, or those who will add that value to your life. Design your circle rather than let it happen b default, which happens unfortunately to most people.\n7) Ruthlessly Prune We need to cut down. We don\u0026rsquo;t need to add. We need to remove, to reduce, so that we can get massive results. This process is called ruthless pruning.\nThe problem that happens with most people:\n80% of their time is encroaching on their 20% time where they create the most value. 80% of their allies are encroaching on the 20% that create the most value for them. 80% of your customers actually take up so much value that you end up not having enough value to give to the 20% customers who create the most value for you. Mental energy expended on 80% of your projects is taking away mental energy from. the 20% projects that create the most value/exponential results for you. Actions expended on 80% of your projects do the same thing. They take away from the 20% projects that are creating the most leverage, the most value for you. The same happens with any area of business - marketing efforts, sales effort, strategic efforts, whatever it is.\nThat\u0026rsquo;s why one of the things Jack Welch at G.E said was: ‚ÄúWe\u0026rsquo;re only going to do things that we can be in the Top 2 to Top 3 in the world. If we\u0026rsquo;re not in the Top 2 or Top 3, then we\u0026rsquo;re going to stop doing those things.‚Äù\nHence, we\u0026rsquo;re going to only expend our energy on the 20% things and we\u0026rsquo;re going to ruthlessly prune the 80%, even if there is some result coming from it\u0026hellip; in order to exponentially grow the areas of business and life where we\u0026rsquo;re getting maximum results.\n8) Multiply Output In order to multiply our output, we need to move our resources from an unproductive place to a productive place, from an unproductive arena into an arena, where the resource can be productive.\nEXAMPLE: A hammer is great at hammering a nail but it\u0026rsquo;s not useful when it comes to cutting a piece of cloth. It\u0026rsquo;s not going to help.\nSimilarly, a pair of scissors is great at cutting a piece of cloth but entirely useless when it comes to hammering a nail.\nBoth these resources are very powerful but they have to be used in the right arena and that\u0026rsquo;s the key.\nThat\u0026rsquo;s the 80/20 \u0026ndash; the understanding that the resource needs to be used in the right arena where you get 10x, 100x, even 1000x more improvement or higher productivity.\nThe same holds with you. If you\u0026rsquo;re using your resources and your strengths properly, then you are living in the right arena. You are being highly productive.\nBut if you\u0026rsquo;re not using those strengths properly, if you are using them in the wrong arena, you are in the unproductive zone.\nAgain, our job is to move our resources from an unproductive area to a productive area. That‚Äôs when we can massively multiply our productivity.\nKEY POINTS: The basics - The 80/20 principle in a nutshell. You can be great - How the 80/20 principle can make you, and everyone else, great. Choosing allies - Why choosing your allies is important and how to identify them. Design your own game - Stop living your life by default. Achievement island and desert - Be clear with your ‚Äúachievement islands‚Äù and only build on them. Relationships - How the 80/20 principle applies to our relationships and how we can improve them. Ruthlessly prune - Why we need to reduce, not add, in our lives. Multiplying output - Use your strengths and resources properly in order to multiply your productivity. ","permalink":"http://localhost:1313/posts/80-20-rule/","summary":"\u003cp\u003e\u003cimg alt=\"cover-image\" loading=\"lazy\" src=\"/posts/assets/80-20/80-20.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eHow anyone can be more effective with less effort by learning how to identify and leverage the 80/20 principle\u0026ndash;the well-known, unpublicized secret that 80 percent of all our results in business and in life stem from a mere 20 percent of our efforts.\u003c/p\u003e\n\u003cp\u003eThe 80/20 principle is one of the great secrets of highly effective people and organizations.\u003c/p\u003e\n\u003cp\u003eDid you know, for example, that 20 percent of customers account for 80 percent of revenues? That 20 percent of our time accounts for 80 percent of the work we accomplish? \u003cstrong\u003eThe 80/20 Principle\u003c/strong\u003e shows how\nwe can achieve much more with much less effort, time, and resources, simply by identifying and focusing our efforts on the 20 percent t at really counts. Although the 80/20 principle has long influenced today\u0026rsquo;s business world, author Richard Koch reveals how the principl works and shows how we can use it in a systematic and practical way to vastly increase our effectiveness, and improve our careers and o r companies.\u003c/p\u003e","title":"The 80/20 Principle"},{"content":"\nIn this article, we‚Äôll walk through the complete process of building an AI chatbot web app powered by Google Gemini and deploying it to the web using Vercel. We‚Äôll use AssistantUI, a modern framework to create conversational experiences using powerful LLMs.\nStep 1: Install the Prerequisites Before we begin, make sure the following tools are installed on your machine:\nInstall Visual Studio Code (VS Code). Install Node.js (Node.js). Install Git (Git). Step 2: Set Up the Project Directory Create a folder named chatbot:\nmkdir chatbot \u0026amp;\u0026amp; cd chatbot Open the folder in VS\ncode . Step 3: Scaffold the Assistant UI App npx assistant-ui@latest create This command will prompt you to select a template. Choose the chat template. This will create a new folder named assistant-ui with the necessary files and dependencies.\nStep 4: Set Up Dependencies Move into the generated project folder (likely chatbot):\ncd chatbot Install the required SDKs:\nnpm install ai @assistant-ui/react-ai-sdk @ai-sdk/google Step 5: Integrate Google Gemini API Open the file:\n/app/api/chat/route.ts Clear all content in the file and paste the following code:\nimport { google } from \u0026#34;@ai-sdk/google\u0026#34;; import { streamText } from \u0026#34;ai\u0026#34;; export const maxDuration = 30; export async function POST(req: Request) { const { messages } = await req.json(); const result = streamText({ model: google(\u0026#34;gemini-2.0-flash\u0026#34;), messages, }); return result.toDataStreamResponse(); } Get your Google Gemini API Key from the Google AI Studio.\nStep 6: Store Your API Key Create a new environment file in the root directory:\n.env.local Add the following line:\nGOOGLE_GENERATIVE_AI_API_KEY=\u0026#34;Your_API_KEY\u0026#34; Make sure to replace Your_API_KEY with your actual API key.\nStep 7: Run the Development Server Start your app locally:\nnpm run dev Your application will be live at:\nhttp://localhost:3000 Step 8: Build for Production Build your app for production:\nnpm run build This command will create a .vercel folder in your project directory.\nClean up: Delete the node_modules folder and .env.local file before uploading to GitHub for security reasons.\nStep 9: Upload your code to GitHub Create a new repository on GitHub. Initialize a new Git repository in your project folder: git init Add your files to the repository: git add . Commit your changes: git commit -m \u0026#34;Initial commit\u0026#34; Add the remote repository: git remote add origin https://github.com/\u0026lt;username\u0026gt;/chatbot.git Push your changes: git push -u origin main Step 10: Deploy to vercel Go to Vercel and sign in with your GitHub account. Click on the \u0026ldquo;New Project\u0026rdquo; button. Select your GitHub repository. Vercel will automatically detect the framework and set up the build settings. When prompted, add your API key as an environment variable:\nGOOGLE_GENERATIVE_AI_API_KEY = your_key_here Step 11: Your AI Chatbot is Live! Once the deployment is complete, you will receive a live URL for your chatbot. You can share this URL with anyone to access your AI chatbot.\nFinal Notes Make sure to keep your API key secure and do not expose it in your public repositories. This setup gives you a solid starting point to create intelligent AI interfaces. You can now customize the UI, add more features, or even connect this to a backend for storing user interactions. ","permalink":"http://localhost:1313/posts/chatbot/","summary":"\u003cp\u003e\u003cimg alt=\"Thumbnail Image\" loading=\"lazy\" src=\"/posts/assets/tech/chatbot.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eIn this article, we‚Äôll walk through the complete process of building an AI chatbot web app powered by Google Gemini and deploying it to the web using Vercel. We‚Äôll use AssistantUI, a modern framework to create conversational experiences using powerful LLMs.\u003c/p\u003e\n\u003ch2 id=\"step-1-install-the-prerequisites\"\u003eStep 1: Install the Prerequisites\u003c/h2\u003e\n\u003cp\u003eBefore we begin, make sure the following tools are installed on your machine:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInstall Visual Studio Code (\u003ca href=\"https://code.visualstudio.com\"\u003eVS Code\u003c/a\u003e).\u003c/li\u003e\n\u003cli\u003eInstall Node.js (\u003ca href=\"https://nodejs.org/en/download/\"\u003eNode.js\u003c/a\u003e).\u003c/li\u003e\n\u003cli\u003eInstall Git (\u003ca href=\"https://git-scm.com/downloads\"\u003eGit\u003c/a\u003e).\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-set-up-the-project-directory\"\u003eStep 2: Set Up the Project Directory\u003c/h2\u003e\n\u003cp\u003eCreate a folder named chatbot:\u003c/p\u003e","title":"Build an AI Chatbot Web App with Google Gemini and Deploy on Vercel"},{"content":"Installing MS SQL Server along with Azure Data Studio on Arch Linux requires a combination of Microsoft packages and some extra tweaks since SQL Server isn\u0026rsquo;t natively available for Arch and Azure Data Studio is mainly targeted for Debian/Red Hat based distros.\nStep 1: Install Azure Data Studio Azure Data Studio is available via AUR.\nyay -S azuredatastudio-bin This installs the latest prebuilt version from Microsoft.\nOption 2: Manual (optional) If you want to manually install:\nDownload .tar.gz from Azure Data Studio official packages Extract it: tar -xvzf azuredatastudio-linux-x64.tar.gz cd azuredatastudio-linux-x64 ./azuredatastudio Step 2: Install Microsoft SQL Server (Docker Method ‚Äì Recommended) Microsoft SQL Server is not supported natively on Arch, but the Docker container is fully functional and easiest to manage.\nInstall Docker if you haven‚Äôt: sudo pacman -S docker sudo systemctl enable --now docker sudo usermod -aG docker $USER newgrp docker Pull SQL Server Image: docker pull mcr.microsoft.com/mssql/server:2022-latest Run the Container: docker run -e \u0026#34;ACCEPT_EULA=Y\u0026#34; -e \u0026#34;SA_PASSWORD=YourStrong!Passw0rd\u0026#34; \\ -p 1433:1433 --name sql_server \\ -d mcr.microsoft.com/mssql/server:2022-latest Note: Make sure to use a strong password (uppercase, lowercase, number, symbol, and \u0026gt;8 characters).\nStep 3: Connect SQL Server to Azure Data Studio Launch Azure Data Studio. Click on New Connection. Fill out the fields: Server: localhost Authentication: SQL Login User: sa Password: YourStrong!Passw0rd Hit Connect Step 4: (Optional) Autostart Docker with Hyprland If you want SQL Server to start with your system:\nsudo systemctl enable docker Or add a Hyprland hook to start the container at login:\ndocker start sql_server Conclusion You now have a fully functional SQL Server instance running on Arch Linux via Docker, and you can manage it using Azure Data Studio. This setup allows you to leverage the power of SQL Server without needing to run a full Windows environment.\n","permalink":"http://localhost:1313/posts/sqlserver/","summary":"\u003cp\u003eInstalling MS SQL Server along with Azure Data Studio on Arch Linux requires a combination of Microsoft packages and some extra tweaks since SQL Server isn\u0026rsquo;t natively available for Arch and Azure Data Studio is mainly targeted for Debian/Red Hat based distros.\u003c/p\u003e\n\u003ch2 id=\"step-1-install-azure-data-studio\"\u003eStep 1: Install Azure Data Studio\u003c/h2\u003e\n\u003cp\u003eAzure Data Studio is available via AUR.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eyay -S azuredatastudio-bin\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis installs the latest prebuilt version from Microsoft.\u003c/p\u003e\n\u003ch3 id=\"option-2-manual-optional\"\u003eOption 2: Manual (optional)\u003c/h3\u003e\n\u003cp\u003eIf you want to manually install:\u003c/p\u003e","title":"MS SQL Server and Azure Data Studio on Arch Linux"},{"content":"Database Database is a collection of interrelated data.\nA database is an organized collection of data that can be easily accessed, managed, and updated. It stores data in tables, rows, and columns, allowing efficient retrieval and manipulation. Examples include MySQL, PostgreSQL, and MongoDB. DBMS DBMS(Database Management System) is software used to create, manage, and organize databases.\nA DBMS is software that manages and controls database operations like storing, retrieving, and updating data. It ensures data consistency, security, and integrity while providing an interface for users to interact with the database. Examples include MySQL, Oracle, and Microsoft SQL Server. üöÄ What is RDBMS RDBMS (Relational Database Management System) - is a DBMS based on the concept of tables (also called relations). Data is organized into tables(also known as relations) with rows(records) and columns(attributes). E.g., MySQL, PostgreSQL, SQL Server etc. SQL SQL is Structured Query Language - used to store, manipulate and retrieve data from RDBMS.\nWe use SQL for CRUD Operations:\nCREATE - To Create databases, tables, insert tuples etc. READ - To read data present int the database. UPDATE - Modify already insert data. DELETE - Delete database, table or specific data point/tuple/row or multiple rows. NOTE : SQL keywords are NOT case sensitive. E.g., select is the same as SELECT in SQL.\nCreate Database We can use the the following command to create the database.\nCREATE DATABASE database_name; Delete Database We Can use the DROP command to delete the database.\nDROP DATABASE database_name; Select/Use the Database We can use the USE command to select db and perform operation.\nUSE db_name; SQL vs MySQL SQL is a language used to perform CRUD operations in Relational DB, while MySQL is a RDBMS that uses SQL.\nCreating Table We can create the table in db using the CREATE TABLE command whole syntax is given below.\nCREATE TABLE table_name( column_name1 datatype constraint; column_name2 datatype constraint; column_name3 datatype constraint; ); SQL Data Types In SQL, data types define the kind of data that can be stored in a column or variable.\nDatatype Description Usage CHAR String (0-255), can store characters of fixed length CHAR(50) VARCHAR String (0-255), can store characters up to given length VARCHAR(50) BLOB String (0-65535), can store binary large object BLOB(1000) INT Integer (-2,147,483,648 to 2,147,483,647) INT TINYINT Integer (-128 to 127) TINYINT BIGINT Integer (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807) BIGINT BIT Can store x-bit values. x can range from 1 to 64 BIT(2) FLOAT Decimal number - with precision to 23 digits FLOAT DOUBLE Decimal number - with 24 to 53 digits DOUBLE BOOLEAN Boolean values 0 or 1 BOOLEAN DATE Date in format of YYYY-MM-DD ranging from 1000-01-01 to 9999-12-31 DATE TIME HH:MM:SS TIME YEAR Year in 4-digit format ranging from 1901 to 2155 YEAR Note - CHAR is for fixed length \u0026amp; VARCHAR is for variable length strings. Generally, VARCHAR is better as it only occupies necessary memory \u0026amp; works more efficiently.\nSigned \u0026amp; Unsigned : We can also use UNSIGNED with datatypes when we only have positive values to add. Eg - UNSIGNED INT\nTINYINT UNSIGNED (0 to 255)\nTINYINT (-128 to 127)\nTypes of SQL Commands DDL(Database Definition Language): Used to create, alter, delete database objects like tables, indexes, etc. (CREATE, DROP, ALTER, RENAME, TRUNCATE). DQL(Database Query Language): Used to retrieve data from databases. (SELECT). DML(Database Manipulation Language): Used to modify the database. (INSERT, UPDATE, DELETE). DCL(Database Control Language): Used to grant \u0026amp; revoke permissions. (GRANT, REVOKE). TCL(Transaction Control Language): Used to manage transactions, (COMMIT, ROLLBACK, START TRANSACTIONS, SAVEPOINT). DATABASE related Queries CREATE DATABASE db_name; -- used to create database CREATE DATABASE IF NOT EXISTS db_name; -- create database if database not exist of this name. DROP DATABASE db_name; -- delete database DROP DATABASE IF EXISTS db_name; -- delete database if exists SHOW DATABASES; -- show all databases SHOW TABLES; -- used to show all tables in particular database Table related Queries Create Tables We can use the following syntax to create the table or design the scheme of table.\nCREATE TABLE table_name( column_name1 datatype constraint; column_name2 datatype constraint; ); Example\nCREATE TABLE student( id INT PRIMARY KEY, name VARCHAR(50), age INT NOT NULL ); Select \u0026amp; View ALL columns SELECT * FROM table_name; -- display whole table Insert INSERT INTO table_name (colname1, colname2); VALUES (col1_v1, col2_v1), (col1_v2, col2_v2); Keys Primary Key It is a column (or set of columns) in a table that uniquely identifies each row. (a unique id). There is only 1 Primary Key and it should not be NOT null\nForeign Key A foreign key is a column (or set of columns) in a table that refers to the primary key in another table. There can be multiple FKs. FKs can be have duplicate \u0026amp; null values.\nSecondary Key Secondary key may or may not be unique field. Some times records are required to access by a field other than the primary key. In these situations another key that is used is called secondary key.\nComposite Key Composite key consists of two or more than two fields. Composite key is also designed as a primary key. It is created in a situation when no single field fulfills the property of uniqueness. To make unique more than one field are combined and used as primary key.\nConstraints SQL constraints are used to specify rules for data in a table.\nNOT NULL : columns cannot have null value. col1 INT NOT NULL UNIQUE : all values in column are different. col2 UNIQUE PRIMARY KEY : makes a column unique \u0026amp; not null but used only for one. id INT PRIMARY KEY. also declare as PRIMARY KEY (id). Foreign Key Prevent actions that would destroy links between tables.\nCREATE TABLE temp( cust_id INT, FOREIGN KEY (cust_id) references customer(id) ); DEFAULT sets the default value of a column\nsalary INT DEFAULT default_value; CHECK It can limit the values allowed in a column.\nCREATE TABLE city( id INT PRIMARY KEY, city VARCHAR(50), age INT, CONSTRAINT age_check CHECK (age\u0026gt;= 16 AND city=\u0026#34;Delhi\u0026#34;) ); CREATE TABLE newTab ( age INT CHECK (age\u0026gt;=18) ); Select in Detail SELECT The SELECT statement is used to select data from a database.\nSELECT col1,col2 FROM table_name; To Select All SELECT * FROM table_name; Tip: DISTINCT Keyword Removes duplicate rows from query results.\nSyntax:\nSELECT DISTINCT column1, column2 FROM table_name; Where Clause To define some conditions\nSELECT col1,col2 from table WHERE condition(s). SELECT * FROM student WHERE marks \u0026gt; 80; SELECT * FROM student WHERE city=\u0026#34;Multan\u0026#34;; Operator in WHERE Arithmetic Operators : + , - , * , / , % Comparison Operators : = , != , \u0026gt; , \u0026gt;= , \u0026lt; , \u0026lt;= Logical Operators : AND, OR, NOT, IN, BETWEEN, ALL, LIKE, ANY Bitwise Operators : \u0026amp; , | Operators AND (to check for both conditions to be true) SELECT * FROM student WHERE marks \u0026gt; 80 AND city=\u0026#34;Multan\u0026#34;; OR (to check for one of the conditions to be true) SELECT * FROM student WHERE marks \u0026gt; 90 OR city=\u0026#34;Lahore\u0026#34;; BETWEEN : select for a given range SELECT * FROM student WHERE marks BETWEEN 80 AND 90; IN : (matches any value in the list) SELECT * FROM student WHERE city IN (\u0026#34;Multan\u0026#34;,\u0026#34;Karachi\u0026#34;) NOT : (to negate the given condition) SELECT * FROM student WHERE city NOT IN (\u0026#34;Multan\u0026#34;, \u0026#34;Karachi\u0026#34;) Limit Clause The limit clause is used to sets an upper limit on number of(tuples)rows to be returned.\nSELECT * FROM student LIMIT 3; SELECT col1,col2 FROM table_name LIMIT number; Order by Clause To sort in ascending (ASC) or descending (DESC) order.\nSELECT * FROM student ORDER BY city ASC; SELECT col1,col2 FROM table_name ORDER BY col_name(s) ASC; Aggregate Functions Aggregate functions perform a calculation on a set of values, and return a single value.\nCOUNT() MAX() MIN() SUM() AVG() Get Maximum Marks\nSELECT MAX(marks) FROM student; Get Average marks\nSELECT AVG(marks) FROM student; Group By Clause Group rows that have the same values into summary rows. It collect data from multiple records(rows) and groups the result by one ore more column.\nGenerally we use the group by with some aggregation function.\nCount number of students in each city\nSELECT city, count(name) FROM student GROUP BY city; HAVING Clause Similar to WHERE i.e., applies some condition on rows. Used when we want to apply any condition after grouping.\nCount number of students in each city where max marks cross 90.\nSELECT city, count(rollno) FROM student GROUP BY city HAVING MAX(marks) \u0026gt; 90; General Order SELECT column(s) FROM table_name WHERE condition GROUP BY column(s) HAVING condition ORDER BY column(s) ASC;\nExample:\nSELECT city FROM student WHERE grade = \u0026#34;A\u0026#34; GROUP BY city HAVING MAX(marks) \u0026gt; 90 ORDER BY city DESC; Table related Queries UPDATE is used to update existing rows in a table.\nUPDATE table_name SET col1=val1, col2=val2 WHERE condition; UPDATE student SET grade = \u0026#34;O\u0026#34; WHERE grade = \u0026#34;A\u0026#34;; DELETE is used to delete the existing rows in a table\nDELETE FROM table_name WHERE condition; DELETE FROM student WHERE marks \u0026lt; 33; Foreign Key A foreign key (FK) is a column or a set of columns in a table that establishes a link between data in two tables. It refers to the primary key (PK) in another table, ensuring data integrity and enforcing referential constraints.\nCREATE TABLE Orders ( order_id INT PRIMARY KEY, customer_id INT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); Cascading for FK On Delete Cascade When we create a foreign key using this option, it deletes the referencing rows in the child table when the referenced row is deleted in the parent table which has a primary key.\nOn Update Cascade When we create a foreign key using UPDATE CASCADE the referencing rows are updated in the child table when the referenced row is updated in the parent table which has a primary key.\nCREATE TABLE teacher( id INT PRIMARY KEY, name VARCHAR(50), dept_id INT, FOREIGN KEY (dept_id) references dept(id) ON UPDATE CASCADE ON DELETE CASCADE ); Alter The ALTER is used to change the schema of table in a database.\nADD Column ALTER TABLE table_name ADD COLUMN column_name datatype constraint; DROP Column ALTER TABLE table_name DROP COLUMN column_name; RENAME Column ALTER TABLE table_name RENAME TO new_table_name; CHANGE Column(rename) ALTER TABLE table_name CHANGE COLUMN old_name new_name new_datatype new_constraint; MODIFY Column(modify datatype/ constraint) ALTER TABLE table_name MODIFY col_name new_datatype new_constraint; Truncate The TRUNCATE is used to delete the data of table in database.\nTRUNCATE TABLE table_name ; Joins in SQL JOIN is used to combine rows from two or more tables, based on a related column between them.\n1. Inner Join Returns records that have matching values in both tables Syntax\nSELECT column(s) FROM tableA INNER JOIN tableB ON tableA.col_name = tableB.col_name; Example\nSELECT * FROM student INNER JOIN course ON student.student_id = course.student_id; Tip: SQL aliases are used to give a table, or a column in a table, a temporary name. Aliases are often used to make column names more readable. An alias only exists for the duration of that query. An alias is created with the¬†AS¬†keyword.\nSELECT CustomerID AS ID FROM Customers; 2. Left Join Returns all records from the left table, and the matched records from the right table. Syntax\nSELECT columns(s) FROM talbeA LEFT JOIN tableB ON tableA.col_name = tableB.col_name; Example\nSELECT * FROM student as s LEFT JOIN course as c ON s.student_id = c.student_id; 3. Right Join Returns all records from the right table, and the matched records from the left table\nSyntax\nSELECT column(s) FROM tableA RIGHT JOIN tableB ON tableA.col_name = tableB.col_name; Example\nSELECT * FROM student as s RIGHT JOIN course as c ON s.student_id = c.student_id; 4. Full Join Returns all records when there is a match in either left or right table\nSELECT * FROM student AS s LEFT JOIN course AS c ON s.student_id = c.student_id UNION SELECT * FROM student AS s LEFT JOIN course AS c ON s.student_id = c.student_id; Left Exclusive Join Exclusive joins in SQL are used to retrieve records that exist in one table but not in the other when performing a LEFT JOIN or RIGHT JOIN.\nA Left Exclusive Join retrieves records from the left table that do not have matching records in the right table.\nSELECT * FROM student AS a LEFT JOIN course AS b ON a.id = b.id WHERE b.id IS NULL; Right Exclusive Join A Right Exclusive Join retrieves records from the right table that do not have matching records in the left table.\nSELECT * FROM student AS a RIGHT JOIN course AS b ON a.id = b.id WHERE a.id IS NULL; Self Join It is a regular join but the table is joined with itself.\nSELECT column(s) FROM table as a JOIN table as b ON a.col_name = b.col_name Union It is used to combine the result-set of two or more SELECT statements. Gives UNIQUE records.\nevery SELECT should have same no. of columns columns must have similar data types columns in every SELECT should be in same order SELECT column(s) FROM tableA UNION SELECT column(s) FROM tableB and we can also use the UNION ALL to give all the values including the duplicates records.\nSQL Sub Queries A Subquery or Inner query or a Nested query is a query within another SQL query. It is used to return data that will be used in the main query as a condition.\nIt involves 2 select statements.\nSyntax SELECT column(s) FROM table_name WHERE col_name operator ( subquery ); Example with FROM SELECT MAX(marks) FROM (SELECT marks FROM student WHERE city = \u0026#39;Delhi\u0026#39;) AS temp; MySQL Views A view is a virtual table based on the result-set of an SQL statement.\nA view always shows up-to-date data. The database engine recreates the view, every time a user queries it.\nCREATE VIEW v1 AS SELECT rollno, name, marks FROM student; Stored Procedures in MySQL A Stored Procedure is a precompiled set of SQL statements stored in the database that can be executed repeatedly. It helps encapsulate logic in a modular way, improving reusability, maintainability, and performance.\nBenefits of Stored Procedures Modularity ‚Äì Write once, use many times. Performance ‚Äì Precompiled for faster execution. Security ‚Äì Users can be granted access to run procedures without giving access to underlying tables. Reduced network traffic ‚Äì Fewer queries sent between application and server. Syntax: Creating a Stored Procedure DELIMITER // CREATE PROCEDURE procedure_name ( IN param1 datatype, OUT param2 datatype, INOUT param3 datatype ) BEGIN -- SQL statements go here END // DELIMITER ; Example:\nDELIMITER // CREATE PROCEDURE GetEmployeeByID(IN emp_id INT) BEGIN SELECT * FROM employees WHERE id = emp_id; END // DELIMITER ; Calling a Stored Procedure CALL GetEmployeeByID(1); If there are OUT or INOUT parameters:\nCALL ProcedureName(@out_param); SELECT @out_param; Types of Parameters Type Description IN Input only (passed by value). OUT Output only (value returned). INOUT Both input and output (passed by reference). Modifying or Dropping Stored Procedures DROP PROCEDURE IF EXISTS procedure_name; Alter is not supported: You must drop and recreate the procedure. Control Structures in Stored Procedures IF-ELSE Used to execute different blocks of code based on a condition.\nIF condition THEN -- statements ELSE -- statements END IF; Example:\nDELIMITER // CREATE PROCEDURE CheckAge(IN age INT) BEGIN IF age \u0026gt;= 18 THEN SELECT \u0026#39;You are an adult\u0026#39; AS result; ELSE SELECT \u0026#39;You are a minor\u0026#39; AS result; END IF; END // DELIMITER ; -- Call the procedure CALL CheckAge(20); -- Output: You are an adult CALL CheckAge(15); -- Output: You are a minor CASE Statement Used as an alternative to multiple IF statements when checking several conditions.\nSyntax:\nCASE variable WHEN value1 THEN statement1; WHEN value2 THEN statement2; ELSE statement_default; END CASE; Example:\nDELIMITER // CREATE PROCEDURE GradeResult(IN grade CHAR(1)) BEGIN CASE grade WHEN \u0026#39;A\u0026#39; THEN SELECT \u0026#39;Excellent\u0026#39; AS Result; WHEN \u0026#39;B\u0026#39; THEN SELECT \u0026#39;Good\u0026#39; AS Result; WHEN \u0026#39;C\u0026#39; THEN SELECT \u0026#39;Average\u0026#39; AS Result; ELSE SELECT \u0026#39;Fail or Invalid Grade\u0026#39; AS Result; END CASE; END // DELIMITER ; -- Call the procedure CALL GradeResult(\u0026#39;A\u0026#39;); -- Output: Excellent CALL GradeResult(\u0026#39;D\u0026#39;); -- Output: Fail or Invalid Grade WHILE Loop Repeats a block of statements while the condition is true.\nSyntax\nWHILE condition DO -- statements END WHILE; Example:\nDELIMITER // CREATE PROCEDURE CountToFive() BEGIN DECLARE i INT DEFAULT 1; WHILE i \u0026lt;= 5 DO SELECT CONCAT(\u0026#39;Count: \u0026#39;, i) AS Output; SET i = i + 1; END WHILE; END // DELIMITER ; -- Call the procedure CALL CountToFive(); ## REPEAT Loop Similar to WHILE, but checks the condition after executing the block.\nSyntax:\nREPEAT -- statements UNTIL condition END REPEAT; Example:\nDELIMITER // CREATE PROCEDURE RepeatExample() BEGIN DECLARE i INT DEFAULT 1; REPEAT SELECT CONCAT(\u0026#39;Repeat Count: \u0026#39;, i) AS Output; SET i = i + 1; UNTIL i \u0026gt; 5 END REPEAT; END // DELIMITER ; -- Call the procedure CALL RepeatExample(); Error Handling Use DECLARE ... HANDLER to define how to handle errors.\nSyntax\nDECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN -- Error handling code END; Create the procedure with error handler\nDELIMITER // CREATE PROCEDURE InsertStudent ( IN student_id INT, IN student_name VARCHAR(50) ) BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SELECT \u0026#39;Error occurred while inserting student!\u0026#39; AS ErrorMessage; END; -- Attempt to insert student INSERT INTO students (id, name) VALUES (student_id, student_name); -- Continue execution even if error occurred SELECT \u0026#39;Insert attempt completed.\u0026#39; AS Status; END // DELIMITER ; Show Existing Stored Procedures SHOW PROCEDURE STATUS WHERE Db = \u0026#39;your_database\u0026#39;; Or to view the code:\nSHOW CREATE PROCEDURE procedure_name; ","permalink":"http://localhost:1313/posts/mysql/","summary":"\u003ch2 id=\"database\"\u003eDatabase\u003c/h2\u003e\n\u003cp\u003eDatabase is a collection of interrelated data.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA \u003cstrong\u003edatabase\u003c/strong\u003e is an organized collection of data that can be easily accessed, managed, and updated.\u003c/li\u003e\n\u003cli\u003eIt stores data in tables, rows, and columns, allowing efficient retrieval and manipulation.\u003c/li\u003e\n\u003cli\u003eExamples include MySQL, PostgreSQL, and MongoDB.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"dbms\"\u003eDBMS\u003c/h2\u003e\n\u003cp\u003eDBMS(Database Management System) is software used to create, manage, and organize databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA \u003cstrong\u003eDBMS\u003c/strong\u003e is software that manages and controls database operations like storing, retrieving, and updating data.\u003c/li\u003e\n\u003cli\u003eIt ensures data consistency, security, and integrity while providing an interface for users to interact with the database.\u003c/li\u003e\n\u003cli\u003eExamples include MySQL, Oracle, and Microsoft SQL Server. üöÄ\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"what-is-rdbms\"\u003eWhat is RDBMS\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eRDBMS (Relational Database Management System) - is a DBMS based on the concept of tables (also called relations).\u003c/li\u003e\n\u003cli\u003eData is organized into tables(also known as relations) with rows(records) and columns(attributes).\u003c/li\u003e\n\u003cli\u003eE.g., MySQL, PostgreSQL, SQL Server etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"sql\"\u003eSQL\u003c/h2\u003e\n\u003cp\u003eSQL is \u003cstrong\u003eStructured Query Language\u003c/strong\u003e - used to store, manipulate and retrieve data from RDBMS.\u003c/p\u003e","title":"Introduction to Databases - MySQL"},{"content":"Introduction to GSAP GSAP(Greensock Animation Platform) is a powerful JavaScript animation library that allows you to create high-performance animations for web applications. It is widely used for animating elements with precision and smoothness.\n2. Installing GSAP You can use GSAP in multiple ways:\nCDN\n\u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 3. Basic GSAP Syntax GSAP uses the .to(), .from(), and .fromTo() methods to animate elements.\ngsap.to() ‚Üí Animates from the current state to a new state. gsap.to(\u0026#34;.box\u0026#34;, { x: 200, duration: 1 }); gsap.from() ‚Üí Animates from a given state to the current state. gsap.from(\u0026#34;.box\u0026#34;, { opacity: 0, y: -50, duration: 1 }); gsap.fromTo() ‚Üí Specifies both the start and end states explicitly. gsap.fromTo(\u0026#34;.box\u0026#34;, { x: 0 }, { x: 300, duration: 1 }); 4. Key Properties x, y ‚Üí Move horizontally/vertically scale, scaleX, scaleY ‚Üí Scale size rotation, rotate ‚Üí Rotate element opacity ‚Üí Change transparency skewX, skewY ‚Üí Skew transformation stagger ‚Üí Create a delay between multiple elements Example\ngsap.to(\u0026#34;.box\u0026#34;, { x: 100, scale: 1.5, rotation: 360, duration: 2 }); 5. Timeline for Sequencing Animations GSAP‚Äôs gsap.timeline() helps chain animations in sequence.\nlet tl = gsap.timeline(); tl.to(\u0026#34;.box\u0026#34;, { x: 100, duration: 1 }) .to(\u0026#34;.box\u0026#34;, { y: 100, duration: 1 }) .to(\u0026#34;.box\u0026#34;, { rotation: 360, duration: 1 }); 6. Easing Functions Easing makes animations feel natural.\ngsap.to(\u0026#34;.box\u0026#34;, { x: 300, duration: 2, ease: \u0026#34;bounce.out\u0026#34; }); gsap.to(\u0026#34;.circle\u0026#34;, { y: -100, duration: 1, ease: \u0026#34;elastic.out(1, 0.3)\u0026#34; }); 7. Staggering Animations Use stagger to animate multiple elements with delay.\ngsap.to(\u0026#34;.boxes\u0026#34;, { y: 100, duration: 1, stagger: 0.2 }); 8. ScrollTrigger (GSAP Plugin) To trigger animations on scroll:\nCDN\n\u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Example:\ngsap.to(\u0026#34;.box\u0026#34;, { // Animates the element with class \u0026#34;box\u0026#34; x: 300, // Moves the element 300 pixels to the right duration: 2, // Animation lasts for 2 seconds scrollTrigger: { // Uses the ScrollTrigger plugin to trigger animation on scroll trigger: \u0026#34;.box\u0026#34;, // The animation starts when the \u0026#34;.box\u0026#34; element enters the viewport scroller: \u0026#34;body\u0026#34;, // Specifies the scrolling container (default is \u0026#34;body\u0026#34;) markers: true, // Displays visual markers (start and end points) for debugging start: \u0026#34;top 80%\u0026#34;, // Animation starts when the top of \u0026#34;.box\u0026#34; reaches 80% of the viewport height end: \u0026#34;top 30%\u0026#34;, // Animation ends when the top of \u0026#34;.box\u0026#34; reaches 30% of the viewport height scrub: true, // Makes the animation progress smoothly with scrolling } }); Explanation of ScrollTrigger Properties Property Description trigger Defines which element should trigger the animation when it enters/exits the viewport. scroller Specifies the scrollable container (default is body). Useful when working with scrollable divs. markers Adds visual markers to indicate where the animation starts and ends (for debugging). start Defines when the animation starts. \u0026quot;top 80%\u0026quot; means when the top of .box reaches 80% of the viewport height. end Defines when the animation ends. \u0026quot;top 30%\u0026quot; means when the top of .box reaches 30% of the viewport height. scrub Syncs the animation with the scroll position. If true, the animation plays forward and backward as the user scrolls. Delays the animation by 1 second, creating a smoother transition. if scrub is scrub: 2 it has range 1-5. pin The pin: true property locks (pins) an element in place while the user scrolls past it. Locomotive Locomotive Scroll is a powerful JavaScript library that provides smooth scrolling, parallax effects, and scroll-based animations. It enhances user experience by making scrolling feel more natural.\n1. Installation CDN (Easiest Way) Add this in your HTML file:\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/locomotive-scroll/dist/locomotive-scroll.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/locomotive-scroll/dist/locomotive-scroll.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; NPM/Yarn (Recommended for Projects) npm install locomotive-scroll 2. Basic Setup HTML Structure \u0026lt;body data-scroll-container\u0026gt; \u0026lt;div data-scroll-section\u0026gt; \u0026lt;h1 data-scroll data-scroll-speed=\u0026#34;2\u0026#34;\u0026gt;Smooth Scrolling\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; data-scroll-container ‚Üí Defines the scrollable container. data-scroll ‚Üí Enables scroll animations for elements. data-scroll-speed=\u0026quot;2\u0026quot; ‚Üí Adds a parallax effect. JavaScript Setup const scroll = new LocomotiveScroll({ el: document.querySelector(\u0026#34;[data-scroll-container]\u0026#34;), // Selects the scrollable container smooth: true, // Enables smooth scrolling lerp: 0.1, // Controls scroll smoothness (0 = instant, 1 = no smoothness) }); Key Features \u0026amp; Properties (1) Smooth Scrolling const scroll = new LocomotiveScroll({ el: document.querySelector(\u0026#34;[data-scroll-container]\u0026#34;), smooth: true, // Enables smooth scrolling smoothMobile: false, // Disable smooth scroll on mobile }); (2) Parallax Effects \u0026lt;h1 data-scroll data-scroll-speed=\u0026#34;3\u0026#34;\u0026gt;Parallax Effect\u0026lt;/h1\u0026gt; data-scroll-speed=\u0026quot;3\u0026quot; ‚Üí Moves the text at a different speed than the scroll. (3) Sticky Elements \u0026lt;div data-scroll data-scroll-sticky\u0026gt; \u0026lt;p\u0026gt;I\u0026#39;m sticky!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; data-scroll-sticky ‚Üí Keeps the element fixed while scrolling. (4) Scroll-based Animations scroll.on(\u0026#34;call\u0026#34;, (value, way) =\u0026gt; { if (value === \u0026#34;animate\u0026#34; \u0026amp;\u0026amp; way === \u0026#34;enter\u0026#34;) { document.querySelector(\u0026#34;.box\u0026#34;).classList.add(\u0026#34;active\u0026#34;); } }); Runs animations when an element enters/exits the viewport. (5) Scroll Events scroll.on(\u0026#34;scroll\u0026#34;, (instance) =\u0026gt; { console.log(instance.scroll.y); // Get current scroll position }); Triggers custom functions on scroll events. (6) Destroy \u0026amp; Rebuild Scroll scroll.destroy(); // Stops LocomotiveJS scroll.init(); // Re-initializes scrolling Useful when dynamically updating content. (7). LocomotiveJS with GSAP GSAP works great with LocomotiveJS for advanced animations.\nscroll.on(\u0026#34;scroll\u0026#34;, (args) =\u0026gt; { let progress = args.scroll.y / args.limit; gsap.to(\u0026#34;.progress-bar\u0026#34;, { scaleX: progress }); }); This creates a scroll progress bar animation. Summary Feature Usage Smooth Scrolling smooth: true in the JS setup Parallax Effect data-scroll-speed=\u0026quot;X\u0026quot; Sticky Sections data-scroll-sticky Scroll-based Animations scroll.on(\u0026quot;scroll\u0026quot;, callback) Integration with GSAP ScrollTrigger.scrollerProxy() ","permalink":"http://localhost:1313/posts/gsap-locomotive/","summary":"\u003ch2 id=\"introduction-to-gsap\"\u003eIntroduction to GSAP\u003c/h2\u003e\n\u003cp\u003eGSAP(Greensock Animation Platform) is a powerful JavaScript animation library that allows you to create high-performance animations for web applications. It is widely used for animating elements with precision and smoothness.\u003c/p\u003e\n\u003ch2 id=\"2-installing-gsap\"\u003e2. Installing GSAP\u003c/h2\u003e\n\u003cp\u003eYou can use GSAP in multiple ways:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCDN\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003escript\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003esrc\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003escript\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"3-basic-gsap-syntax\"\u003e3. Basic GSAP Syntax\u003c/h2\u003e\n\u003cp\u003eGSAP uses the \u003ccode\u003e.to()\u003c/code\u003e, \u003ccode\u003e.from()\u003c/code\u003e, and \u003ccode\u003e.fromTo()\u003c/code\u003e methods to animate elements.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003egsap.to()\u003c/code\u003e\u003c/strong\u003e ‚Üí Animates from the current state to a new state.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egsap.to(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;.box\u0026#34;\u003c/span\u003e, { x\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e200\u003c/span\u003e, duration\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003egsap.from()\u003c/code\u003e\u003c/strong\u003e ‚Üí Animates from a given state to the current state.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egsap.from(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;.box\u0026#34;\u003c/span\u003e, { opacity\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e, y\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#bd93f9\"\u003e50\u003c/span\u003e, duration\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003egsap.fromTo()\u003c/code\u003e\u003c/strong\u003e ‚Üí Specifies both the start and end states explicitly.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egsap.fromTo(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;.box\u0026#34;\u003c/span\u003e, { x\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e }, { x\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e300\u003c/span\u003e, duration\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"4-key-properties\"\u003e4. Key Properties\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ex, y\u003c/code\u003e ‚Üí Move horizontally/vertically\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003escale, scaleX, scaleY\u003c/code\u003e ‚Üí Scale size\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erotation, rotate\u003c/code\u003e ‚Üí Rotate element\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eopacity\u003c/code\u003e ‚Üí Change transparency\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eskewX, skewY\u003c/code\u003e ‚Üí Skew transformation\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estagger\u003c/code\u003e ‚Üí Create a delay between multiple elements\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eExample\u003c/em\u003e\u003c/p\u003e","title":"GSAP \u0026 Locomotive Scroll"},{"content":"DOM Manipulation in JavaScript DOM (Document Object Model) Manipulation in JavaScript refers to modifying HTML elements dynamically using JavaScript. This includes selecting, modifying, adding, or removing elements from the webpage.\nSelecting Elements in the DOM Before modifying elements, we need to select them. Here are the different ways:\nMethod Description Example document.getElementById(id) Selects an element by its ID document.getElementById(\u0026quot;myDiv\u0026quot;) document.getElementsByClassName(className) Selects elements by class name (returns an HTMLCollection) document.getElementsByClassName(\u0026quot;myClass\u0026quot;) document.getElementsByTagName(tagName) Selects elements by tag name (returns an HTMLCollection) document.getElementsByTagName(\u0026quot;p\u0026quot;) document.querySelector(selector) Selects the first element that matches the CSS selector document.querySelector(\u0026quot;.myClass\u0026quot;) document.querySelectorAll(selector) Selects all elements that match the CSS selector (returns a NodeList) document.querySelectorAll(\u0026quot;div\u0026quot;) Examples of Selection Methods 1. Selecting an Element by ID let title = document.getElementById(\u0026#34;main-title\u0026#34;); console.log(title.innerText); // Logs the text inside the element 2. Selecting Elements by Class Name let items = document.getElementsByClassName(\u0026#34;item\u0026#34;); console.log(items[0].innerText); // Logs the first element\u0026#39;s text 3. Selecting Elements by Tag Name let paragraphs = document.getElementsByTagName(\u0026#34;p\u0026#34;); console.log(paragraphs.length); // Logs the number of \u0026lt;p\u0026gt; elements 4. Selecting an Element Using querySelector() Returns only the first matching element.\nlet firstItem = document.querySelector(\u0026#34;.item\u0026#34;); // Selects the first `.item` console.log(firstItem.innerText); 5. Selecting Multiple Elements Using querySelectorAll() Returns a NodeList, supports .forEach().\nlet allItems = document.querySelectorAll(\u0026#34;.item\u0026#34;); // Selects all `.item` allItems.forEach((item) =\u0026gt; console.log(item.innerText)); innerHTML vs innerText vs textContent in JavaScript 1. innerHTML ‚úÖ Gets or sets the HTML content (including tags) inside an element.\n‚úÖ Parses and renders HTML if assigned.\n‚ùå Can expose security risks (XSS attacks) if inserting user input.\nlet h1 = document.querySelector(\u0026#34;h1\u0026#34;); h1.innerHTML += \u0026#34; \u0026lt;i\u0026gt;hello\u0026lt;/i\u0026gt;\u0026#34;; 2. innerText ‚úÖ Gets or sets only the visible text inside an element.\n‚úÖ Ignores hidden elements (like display: none;).\n‚ùå Does not retain HTML tags.\nlet h1 = document.querySelector(\u0026#34;h1\u0026#34;); h1.innerText += \u0026#34;Hack the Planat\u0026#34;; 3. textContent ‚úÖ Gets or sets all text (including hidden text) inside an element.\n‚úÖ Preserves whitespace and hidden elements (e.g., display: none;).\n‚ùå Does not interpret HTML tags.\nlet h1 = document.querySelector(\u0026#34;h1\u0026#34;); h1.textContent += \u0026#34; Hack the Planat\u0026#34;; Key Differences Between innerHTML, innerText, and textContent Property HTML Support Includes Hidden Text? Performance Security Risks? innerHTML ‚úÖ Supports HTML ‚úÖ Yes ‚ùå Slower (parses HTML) ‚ùå Vulnerable to XSS innerText ‚ùå No HTML ‚ùå No ‚úÖ Faster ‚úÖ Safe textContent ‚ùå No HTML ‚úÖ Yes ‚úÖ Fastest ‚úÖ Safe Manipulating Styles \u0026amp; Classes in JavaScript JavaScript allows us to dynamically change the styles and classes of HTML elements using:\nelement.style ‚Äì for inline styles element.classList ‚Äì for adding, removing, toggling, and checking classes 1. element.style (Manipulating Inline Styles) ‚úÖ Modifies individual CSS properties directly\n‚úÖ Only applies inline styles, does NOT affect CSS classes\n‚ùå Does not allow setting multiple styles at once using a string\n\u0026lt;div id=\u0026#34;box\u0026#34; style=\u0026#34;width: 100px; height: 100px; background: red;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;button onclick=\u0026#34;changeStyle()\u0026#34;\u0026gt;Change Style\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; function changeStyle() { let box = document.getElementById(\u0026#34;box\u0026#34;); box.style.backgroundColor = \u0026#34;blue\u0026#34;; // Change background color box.style.width = \u0026#34;200px\u0026#34;; // Change width box.style.height = \u0026#34;200px\u0026#34;; // Change height } \u0026lt;/script\u0026gt; ‚úÖ Before Clicking: Red box (100x100)\n‚úÖ After Clicking: Blue box (200x200)\n2. element.classList (Manipulating Classes) ‚úÖ Adds, removes, toggles, and checks classes efficiently\n‚úÖ Does NOT override existing styles like style does\nMethods of classList Method Description Example add(className) Adds a class element.classList.add(\u0026quot;new-class\u0026quot;) remove(className) Removes a class element.classList.remove(\u0026quot;old-class\u0026quot;) toggle(className) Toggles a class (adds if not present, removes if present) element.classList.toggle(\u0026quot;active\u0026quot;) contains(className) Checks if a class exists element.classList.contains(\u0026quot;hidden\u0026quot;) replace(oldClass, newClass) Replaces an old class with a new one element.classList.replace(\u0026quot;old\u0026quot;, \u0026quot;new\u0026quot;) \u0026lt;style\u0026gt; .box { width: 100px; height: 100px; background: red; } .big { width: 200px; height: 200px; } .blue { background: blue; } \u0026lt;/style\u0026gt; \u0026lt;div id=\u0026#34;box\u0026#34; class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSize()\u0026#34;\u0026gt;Toggle Size\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;toggleColor()\u0026#34;\u0026gt;Toggle Color\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; let box = document.getElementById(\u0026#34;box\u0026#34;); function toggleSize() { box.classList.toggle(\u0026#34;big\u0026#34;); // Toggles between small and big size } function toggleColor() { box.classList.toggle(\u0026#34;blue\u0026#34;); // Toggles background color } \u0026lt;/script\u0026gt; Creating and Deleting Elements in JavaScript DOM Manipulation Once you\u0026rsquo;ve selected elements in the DOM, the next step in DOM manipulation is creating new elements and removing existing ones dynamically.\ndocument.createElement(tagName) ‚Üí Creates a new element parent.appendChild(childElement) ‚Üí Adds an element inside another element parent.removeChild(childElement) ‚Üí Removes a child element from its parent Creating Elements ‚Äì document.createElement() ‚úÖ Creates a new element in memory (not yet visible in the DOM).\n‚úÖ You can set attributes, styles, and inner content before adding it to the DOM.\n‚ùå Must be appended manually to be visible in the DOM.\nconst newDiv = document.createElement(\u0026#39;div\u0026#39;); // Creates a \u0026lt;div\u0026gt; element newDiv.textContent = \u0026#34;Hello, this is a new div!\u0026#34;; // Adds text inside the div newDiv.classList.add(\u0026#39;new-class\u0026#39;); // Adds a class to the div console.log(newDiv); // Logs the newly created \u0026lt;div\u0026gt; Appending Elements ‚Äì appendChild() ‚úÖ Inserts a new child element inside a parent. ‚úÖ Moves elements if they already exist (won\u0026rsquo;t duplicate them).\nconst parent = document.getElementById(\u0026#39;container\u0026#39;); // Select an existing parent element parent.appendChild(newDiv); // Adds the new div inside the parent element insertBefore() ‚Äì Insert Before a Specific Element Inserts a new element before an existing child element.\nconst firstChild = parent.firstElementChild; // Get the first child of the parent parent.insertBefore(newDiv, firstChild); // Insert newDiv before the first child Removing Elements ‚Äì removeChild() ‚úÖ Deletes a child element from its parent.\n‚ùå If the element does not exist inside the parent, it throws an error.\nparent.removeChild(firstChild); // Removes the first child from the parent Removing an Element Directly (remove()) Instead of removeChild(), you can use element.remove() (modern method).\nnewDiv.remove(); // Removes the newly created \u0026lt;div\u0026gt; Summary Action Method Create an element document.createElement('tag') Add an element inside another appendChild(element), append(element) Insert before another element insertBefore(newElement, existingChild) Remove an element from the DOM removeChild(element), remove() What is addEventListener() An event listener is a method that allows you to wait for a specific event (like a click, keypress, hover, etc.) and run a function when the event occurs.\nelement.addEventListener(event, function, useCapture); Parameter Description event The type of event (e.g., \u0026quot;click\u0026quot;, \u0026quot;mouseover\u0026quot;, \u0026quot;keydown\u0026quot;) function The function to run when the event occurs useCapture (optional) true for event capturing, false for bubbling (default: false) Basic Example: Click Event\n\u0026lt;button id=\u0026#34;myBtn\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#34;myBtn\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function() { alert(\u0026#34;Button Clicked!\u0026#34;); }); \u0026lt;/script\u0026gt; Removing an Event Listener with removeEventListener() To remove an event, you must use a named function.\n\u0026lt;button id=\u0026#34;myBtn\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;remove\u0026#34;\u0026gt;Remove Event\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; function showAlert() { alert(\u0026#34;Button Clicked!\u0026#34;); } let btn = document.getElementById(\u0026#34;myBtn\u0026#34;); btn.addEventListener(\u0026#34;click\u0026#34;, showAlert); document.getElementById(\u0026#34;remove\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function() { btn.removeEventListener(\u0026#34;click\u0026#34;, showAlert); // Removes event }); \u0026lt;/script\u0026gt; Event Object (event) Every event passes an event object (e) that gives details about the event.\n\u0026lt;button id=\u0026#34;btn\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#34;btn\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function(event) { console.log(\u0026#34;Event Type:\u0026#34;, event.type); console.log(\u0026#34;Clicked Element:\u0026#34;, event.target); console.log(\u0026#34;Mouse Coordinates:\u0026#34;, event.clientX, event.clientY); }); \u0026lt;/script\u0026gt; JavaScript Events ‚Äì Cheat Sheet Category Event Description üñ±Ô∏è Mouse Events click Fires when an element is clicked dblclick Fires when an element is double-clicked mousedown Fires when a mouse button is pressed down mouseup Fires when a mouse button is released mousemove Fires when the mouse moves over an element mouseenter Fires when the mouse enters an element (does not bubble) mouseleave Fires when the mouse leaves an element (does not bubble) mouseover Fires when the mouse enters an element or its children (bubbles) mouseout Fires when the mouse leaves an element or its children (bubbles) contextmenu Fires when the right mouse button is clicked (opens the context menu) ‚å®Ô∏è Keyboard Events keydown Fires when any key is pressed down (includes special keys like Shift, Enter) keyup Fires when a key is released keypress (deprecated) Fires when a key is pressed (only for character keys) üìù Form Events submit Fires when a form is submitted change Fires when an input/select field value changes input Fires when the user types in an input field focus Fires when an element gains focus blur Fires when an element loses focus reset Fires when a form is reset üåç Window/Document Events load Fires when the entire page has loaded (including images) DOMContentLoaded Fires when the HTML document is fully loaded (before images \u0026amp; stylesheets) resize Fires when the window is resized scroll Fires when the user scrolls the page unload Fires when the user leaves the page beforeunload Fires when the user is about to leave the page (can show a confirmation) visibilitychange Fires when the page visibility changes (e.g., switching tabs) üìã Clipboard Events copy Fires when content is copied cut Fires when content is cut paste Fires when content is pasted üèóÔ∏è Drag \u0026amp; Drop Events drag Fires when an element is being dragged dragstart Fires when dragging starts dragend Fires when dragging ends dragover Fires when a dragged element is over a valid drop target dragenter Fires when a dragged element enters a drop target dragleave Fires when a dragged element leaves a drop target drop Fires when a dragged element is dropped üéµüìΩÔ∏è Media Events play Fires when media (audio/video) starts playing pause Fires when media is paused ended Fires when media reaches the end volumechange Fires when the volume is changed timeupdate Fires when the current playback position changes üëÄ Focus \u0026amp; Blur Events focus Fires when an element gains focus blur Fires when an element loses focus üì± Touch Events (Mobile) touchstart Fires when a touch point is placed on the screen touchmove Fires when a touch point moves across the screen touchend Fires when a touch point is removed from the screen ‚ö° Other Useful Events error Fires when an error occurs while loading an image, script, or resource online Fires when the browser goes online offline Fires when the browser goes offline hashchange Fires when the URL hash changes (window.location.hash) ","permalink":"http://localhost:1313/posts/dom-js/","summary":"\u003ch1 id=\"dom-manipulation-in-javascript\"\u003eDOM Manipulation in JavaScript\u003c/h1\u003e\n\u003cp\u003eDOM (Document Object Model) Manipulation in JavaScript refers to \u003cstrong\u003emodifying HTML elements dynamically\u003c/strong\u003e using JavaScript. This includes \u003cstrong\u003eselecting, modifying, adding, or removing elements\u003c/strong\u003e from the webpage.\u003c/p\u003e\n\u003ch2 id=\"selecting-elements-in-the-dom\"\u003eSelecting Elements in the DOM\u003c/h2\u003e\n\u003cp\u003eBefore modifying elements, we need to \u003cstrong\u003eselect\u003c/strong\u003e them. Here are the different ways:\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003cstrong\u003eMethod\u003c/strong\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementById(id)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects an element by its \u003cstrong\u003eID\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementById(\u0026quot;myDiv\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByClassName(className)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects elements by \u003cstrong\u003eclass name\u003c/strong\u003e (returns an HTMLCollection)\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByClassName(\u0026quot;myClass\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByTagName(tagName)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects elements by \u003cstrong\u003etag name\u003c/strong\u003e (returns an HTMLCollection)\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByTagName(\u0026quot;p\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelector(selector)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects \u003cstrong\u003ethe first\u003c/strong\u003e element that matches the CSS selector\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelector(\u0026quot;.myClass\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelectorAll(selector)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects \u003cstrong\u003eall\u003c/strong\u003e elements that match the CSS selector (returns a NodeList)\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelectorAll(\u0026quot;div\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"examples-of-selection-methods\"\u003eExamples of Selection Methods\u003c/h2\u003e\n\u003ch3 id=\"1-selecting-an-element-by-id\"\u003e1. Selecting an Element by ID\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e title \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edocument\u003c/span\u003e.getElementById(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;main-title\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole.log(title.innerText); \u003cspan style=\"color:#6272a4\"\u003e// Logs the text inside the element\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-selecting-elements-by-class-name\"\u003e2. Selecting Elements by Class Name\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e items \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edocument\u003c/span\u003e.getElementsByClassName(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;item\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole.log(items[\u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e].innerText); \u003cspan style=\"color:#6272a4\"\u003e// Logs the first element\u0026#39;s text\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-selecting-elements-by-tag-name\"\u003e3. Selecting Elements by Tag Name\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e paragraphs \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edocument\u003c/span\u003e.getElementsByTagName(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;p\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole.log(paragraphs.length); \u003cspan style=\"color:#6272a4\"\u003e// Logs the number of \u0026lt;p\u0026gt; elements\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"4-selecting-an-element-using-queryselector\"\u003e4. Selecting an Element Using querySelector()\u003c/h3\u003e\n\u003cp\u003eReturns \u003cstrong\u003eonly the first matching\u003c/strong\u003e element.\u003c/p\u003e","title":"DOM Manipulation in JavaScript"},{"content":"Arrays Objects allow you to store keyed collections of values. That‚Äôs fine.\nBut quite often we find that we need an¬†ordered collection, where we have a 1st, a 2nd, a 3rd element and so on. For example, we need that to store a list of something: users, goods, HTML elements etc.\nIt is not convenient to use an object here, because it provides no methods to manage the order of elements. We can‚Äôt insert a new property ‚Äúbetween‚Äù the existing ones. Objects are just not meant for such use.\nThere exists a special data structure named¬†Array, to store ordered collections.\nDeclaration There are two syntaxes for creating an empty array:\nlet arr = new Array(); let arr = []; Almost all the time, the second syntax is used. We can supply initial elements in the brackets:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; Array elements are numbered, starting with zero.\nWe can get an element by its number in square brackets:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits[0] ); // Apple alert( fruits[1] ); // Orange alert( fruits[2] ); // Plum We can replace an element:\nfruits[2] = \u0026#39;Pear\u0026#39;; // now [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;] ‚Ä¶Or add a new one to the array:\nfruits[3] = \u0026#39;Lemon\u0026#39;; // now [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;, \u0026#34;Lemon\u0026#34;] The total count of the elements in the array is its¬†length:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits.length ); // 3 We can also use alert to show the whole array.\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits ); // Apple,Orange,Plum An array can store elements of any type.\nFor instance:\n// mix of values let arr = [ \u0026#39;Apple\u0026#39;, { name: \u0026#39;John\u0026#39; }, true, function() { alert(\u0026#39;hello\u0026#39;); } ]; // get the object at index 1 and then show its name alert( arr[1].name ); // John // get the function at index 3 and run it arr[3](); // hello Get last elements with ‚Äúat‚Äù Let‚Äôs say we want the last element of the array.\nSome programming languages allow the use of negative indexes for the same purpose, like¬†fruits[-1].\nAlthough, in JavaScript it won‚Äôt work. The result will be¬†undefined, because the index in square brackets is treated literally.\nWe can explicitly calculate the last element index and then access it:¬†fruits[fruits.length - 1].\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits[fruits.length-1] ); // Plum A bit cumbersome, isn‚Äôt it? We need to write the variable name twice.\nLuckily, there‚Äôs a shorter syntax:¬†fruits.at(-1):\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; // same as fruits[fruits.length-1] alert( fruits.at(-1) ); // Plum In other words,¬†arr.at(i):\nis exactly the same as¬†arr[i], if¬†i \u0026gt;= 0. for negative values of¬†i, it steps back from the end of the array. Methods pop/push, shift/unshift A¬†queue¬†is one of the most common uses of an array. In computer science, this means an ordered collection of elements which supports two operations:\npush¬†appends an element to the end. shift¬†get an element from the beginning, advancing the queue, so that the 2nd element becomes the 1st. Arrays support both operations.\nIn practice we need it very often. For example, a queue of messages that need to be shown on-screen.\nThere‚Äôs another use case for arrays ‚Äì the data structure named¬†stack.\nIt supports two operations:\npush¬†adds an element to the end. pop¬†takes an element from the end. So new elements are added or taken always from the ‚Äúend‚Äù.\nA stack is usually illustrated as a pack of cards: new cards are added to the top or taken from the top:\nFor stacks, the latest pushed item is received first, that‚Äôs also called LIFO (Last-In-First-Out) principle. For queues, we have FIFO (First-In-First-Out).\nArrays in JavaScript can work both as a queue and as a stack. They allow you to add/remove elements, both to/from the beginning or the end.\nIn computer science, the data structure that allows this, is called¬†deque.\nMethods that work with the end of the array:\npop\nExtracts the last element of the array and returns it:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; alert( fruits.pop() ); // remove \u0026#34;Pear\u0026#34; and alert it alert( fruits ); // Apple, Orange Both¬†fruits.pop()¬†and¬†fruits.at(-1)¬†return the last element of the array, but¬†fruits.pop()¬†also modifies the array by removing it.\npush\nAppend the element to the end of the array:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;]; fruits.push(\u0026#34;Pear\u0026#34;); alert( fruits ); // Apple, Orange, Pear The call¬†fruits.push(...)¬†is equal to¬†fruits[fruits.length] = ....\nMethods that work with the beginning of the array:\nshift\nExtracts the first element of the array and returns it:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; alert( fruits.shift() ); // remove Apple and alert it alert( fruits ); // Orange, Pear unshift\nAdd the element to the beginning of the array:\nlet fruits = [\u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; fruits.unshift(\u0026#39;Apple\u0026#39;); alert( fruits ); // Apple, Orange, Pear Methods¬†push¬†and¬†unshift¬†can add multiple elements at once:\nlet fruits = [\u0026#34;Apple\u0026#34;]; fruits.push(\u0026#34;Orange\u0026#34;, \u0026#34;Peach\u0026#34;); fruits.unshift(\u0026#34;Pineapple\u0026#34;, \u0026#34;Lemon\u0026#34;); // [\u0026#34;Pineapple\u0026#34;, \u0026#34;Lemon\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Peach\u0026#34;] alert( fruits ); Objects As we know from the chapter¬†Data types, there are eight data types in JavaScript. Seven of them are called ‚Äúprimitive‚Äù, because their values contain only a single thing (be it a string or a number or whatever).\nIn contrast, objects are used to store keyed collections of various data and more complex entities. In JavaScript, objects penetrate almost every aspect of the language. So we must understand them first before going in-depth anywhere else.\nAn object can be created with figure brackets¬†{‚Ä¶}¬†with an optional list of¬†properties. A property is a ‚Äúkey: value‚Äù pair, where¬†key¬†is a string (also called a ‚Äúproperty name‚Äù), and¬†value¬†can be anything.\nWe can imagine an object as a cabinet with signed files. Every piece of data is stored in its file by the key. It‚Äôs easy to find a file by its name or add/remove a file.\nAn empty object (‚Äúempty cabinet‚Äù) can be created using one of two syntaxes:\nlet user = new Object(); // \u0026#34;object constructor\u0026#34; syntax let user = {}; // \u0026#34;object literal\u0026#34; syntax Usually, the figure brackets¬†{...}¬†are used. That declaration is called an¬†object literal.\nLiterals and properties We can immediately put some properties into¬†{...}¬†as ‚Äúkey: value‚Äù pairs:\nlet user = { // an object name: \u0026#34;John\u0026#34;, // by key \u0026#34;name\u0026#34; store value \u0026#34;John\u0026#34; age: 30 // by key \u0026#34;age\u0026#34; store value 30 }; A property has a key (also known as ‚Äúname‚Äù or ‚Äúidentifier‚Äù) before the colon¬†\u0026quot;:\u0026quot;¬†and a value to the right of it.\nIn the¬†user¬†object, there are two properties:\nThe first property has the name¬†\u0026quot;name\u0026quot;¬†and the value¬†\u0026quot;John\u0026quot;. The second one has the name¬†\u0026quot;age\u0026quot;¬†and the value¬†30. The resulting¬†user¬†object can be imagined as a cabinet with two signed files labeled ‚Äúname‚Äù and ‚Äúage‚Äù.\nWe can add, remove and read files from it at any time.\nProperty values are accessible using the dot notation:\n// get property values of the object: alert( user.name ); // John alert( user.age ); // 30 The value can be of any type. Let‚Äôs add a boolean one:\nuser.isAdmin = true To remove a property, we can use the¬†delete¬†operator:\ndelete user.age; We can also use multiword property names, but then they must be quoted:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, \u0026#34;likes birds\u0026#34;: true // multiword property name must be quoted }; The last property in the list may end with a comma:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, } That is called a ‚Äútrailing‚Äù or ‚Äúhanging‚Äù comma. Makes it easier to add/remove/move around properties, because all lines become alike.\nSquare brackets For multiword properties, the dot access doesn‚Äôt work:\n// this would give a syntax error user.likes birds = true JavaScript doesn‚Äôt understand that. It thinks that we address¬†user.likes, and then gives a syntax error when comes across unexpected¬†birds.\nThe dot requires the key to be a valid variable identifier. That implies: contains no spaces, doesn‚Äôt start with a digit and doesn‚Äôt include special characters ($¬†and¬†_¬†are allowed).\nThere‚Äôs an alternative ‚Äúsquare bracket notation‚Äù that works with any string:\nlet user = {}; // set user[\u0026#34;likes birds\u0026#34;] = true; // get alert(user[\u0026#34;likes birds\u0026#34;]); // true // delete delete user[\u0026#34;likes birds\u0026#34;]; Now everything is fine. Please note that the string inside the brackets is properly quoted (any type of quotes will do).\nSquare brackets also provide a way to obtain the property name as the result of any expression ‚Äì as opposed to a literal string ‚Äì like from a variable as follows:\nlet key = \u0026#34;likes birds\u0026#34;; // same as user[\u0026#34;likes birds\u0026#34;] = true; user[key] = true; Here, the variable¬†key¬†may be calculated at run-time or depend on the user input. And then we use it to access the property. That gives us a great deal of flexibility.\nFor instance:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; let key = prompt(\u0026#34;What do you want to know about the user?\u0026#34;, \u0026#34;name\u0026#34;); // access by variable alert( user[key] ); // John (if enter \u0026#34;name\u0026#34;) The dot notation cannot be used in a similar way:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; let key = \u0026#34;name\u0026#34;; alert( user.key ) // undefined Computed properties We can use square brackets in an object literal, when creating an object. That‚Äôs called¬†computed properties.\nFor instance:\nlet fruit = prompt(\u0026#34;Which fruit to buy?\u0026#34;, \u0026#34;apple\u0026#34;); let bag = { [fruit]: 5, // the name of the property is taken from the variable fruit }; alert( bag.apple ); // 5 if fruit=\u0026#34;apple\u0026#34; The meaning of a computed property is simple:¬†[fruit]¬†means that the property name should be taken from¬†fruit.\nSo, if a visitor enters¬†\u0026quot;apple\u0026quot;,¬†bag¬†will become¬†{apple: 5}.\nEssentially, that works the same as:\nlet fruit = prompt(\u0026#34;Which fruit to buy?\u0026#34;, \u0026#34;apple\u0026#34;); let bag = {}; // take property name from the fruit variable bag[fruit] = 5; ‚Ä¶But looks nicer.\nWe can use more complex expressions inside square brackets:\nlet fruit = \u0026#39;apple\u0026#39;; let bag = { [fruit + \u0026#39;Computers\u0026#39;]: 5 // bag.appleComputers = 5 }; Square brackets are much more powerful than dot notation. They allow any property names and variables. But they are also more cumbersome to write.\nSo most of the time, when property names are known and simple, the dot is used. And if we need something more complex, then we switch to square brackets.\nProperty value shorthand In real code, we often use existing variables as values for property names.\nFor instance:\nfunction makeUser(name, age) { return { name: name, age: age, // ...other properties }; } let user = makeUser(\u0026#34;John\u0026#34;, 30); alert(user.name); // John variable is so common, that there‚Äôs a special¬†property value shorthand¬†to make it shorter.\nInstead of¬†name:name¬†we can just write¬†name, like this:\nfunction makeUser(name, age) { return { name, // same as name: name age, // same as age: age // ... }; } We can use both normal properties and shorthands in the same object:\nlet user = { name, // same as name:name age: 30 }; Property names limitations As we already know, a variable cannot have a name equal to one of the language-reserved words like ‚Äúfor‚Äù, ‚Äúlet‚Äù, ‚Äúreturn‚Äù etc.\nBut for an object property, there‚Äôs no such restriction:\n// these properties are all right let obj = { for: 1, let: 2, return: 3 }; alert( obj.for + obj.let + obj.return ); // 6 In short, there are no limitations on property names. They can be any strings or symbols (a special type for identifiers, to be covered later).\nOther types are automatically converted to strings.\nFor instance, a number¬†0¬†becomes a string¬†\u0026quot;0\u0026quot;¬†when used as a property key:\nlet obj = { 0: \u0026#34;test\u0026#34; // same as \u0026#34;0\u0026#34;: \u0026#34;test\u0026#34; }; // both alerts access the same property (the number 0 is converted to string \u0026#34;0\u0026#34;) alert( obj[\u0026#34;0\u0026#34;] ); // test alert( obj[0] ); // test (same property) Property existence test, ‚Äúin‚Äù operator A notable feature of objects in JavaScript, compared to many other languages, is that it‚Äôs possible to access any property. There will be no error if the property doesn‚Äôt exist!\nReading a non-existing property just returns undefined. So we can easily test whether the property exists:\nlet user = {}; alert( user.noSuchProperty === undefined ); // true means \u0026#34;no such property\u0026#34; There‚Äôs also a special operator¬†\u0026quot;in\u0026quot;¬†for that.\nThe syntax is:\n\u0026#34;key\u0026#34; in object For instance:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; alert( \u0026#34;age\u0026#34; in user ); // true, user.age exists alert( \u0026#34;blabla\u0026#34; in user ); // false, user.blabla doesn\u0026#39;t exist Please note that on the left side of¬†in¬†there must be a¬†property name. That‚Äôs usually a quoted string.\nIf we omit quotes, that means a variable should contain the actual name to be tested. For instance:\nlet user = { age: 30 }; let key = \u0026#34;age\u0026#34;; alert( key in user ); // true, property \u0026#34;age\u0026#34; exists Why does the¬†in¬†operator exist? Isn‚Äôt it enough to compare against¬†undefined?\nWell, most of the time the comparison with¬†undefined¬†works fine. But there‚Äôs a special case when it fails, but¬†\u0026quot;in\u0026quot;¬†works correctly.\nIt‚Äôs when an object property exists, but stores¬†undefined:\nlet obj = { test: undefined }; alert( obj.test ); // it\u0026#39;s undefined, so - no such property? alert( \u0026#34;test\u0026#34; in obj ); // true, the property does exist! In the code above, the property¬†obj.test¬†technically exists. So the¬†in¬†operator works right.\nSituations like this happen very rarely, because¬†undefined¬†should not be explicitly assigned. We mostly use¬†null¬†for ‚Äúunknown‚Äù or ‚Äúempty‚Äù values. So the¬†in¬†operator is an exotic guest in the code.\nThe \u0026ldquo;for..in\u0026rdquo; loop To walk over all keys of an object, there exists a special form of the loop:¬†for..in. This is a completely different thing from the¬†for(;;)¬†construct that we studied before.\nThe syntax:\nfor (key in object) { // executes the body for each key among object properties } For instance, let‚Äôs output all properties of¬†user:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, isAdmin: true }; for (let key in user) { // keys alert( key ); // name, age, isAdmin // values for the keys alert( user[key] ); // John, 30, true } Note that all ‚Äúfor‚Äù constructs allow us to declare the looping variable inside the loop, like¬†let key¬†here.\nAlso, we could use another variable name here instead of¬†key. For instance,¬†\u0026quot;for (let prop in obj)\u0026quot;¬†is also widely used.\nObject methods, \u0026ldquo;this\u0026rdquo; ‚Äúthis‚Äù in methods It‚Äôs common that an object method needs to access the information stored in the object to do its job.\nFor instance, the code inside¬†user.sayHi()¬†may need the name of the¬†user.\nTo access the object, a method can use the¬†this¬†keyword.\nThe value of¬†this¬†is the object ‚Äúbefore dot‚Äù, the one used to call the method.\nFor instance:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, sayHi() { // \u0026#34;this\u0026#34; is the \u0026#34;current object\u0026#34; alert(this.name); } }; user.sayHi(); // John Here during the execution of¬†user.sayHi(), the value of¬†this¬†will be¬†user.\nTechnically, it‚Äôs also possible to access the object without¬†this, by referencing it via the outer variable:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, sayHi() { alert(user.name); // \u0026#34;user\u0026#34; instead of \u0026#34;this\u0026#34; } }; ‚Äúthis‚Äù is not bound In JavaScript, keyword¬†this¬†behaves unlike most other programming languages. It can be used in any function, even if it‚Äôs not a method of an object.\nThere‚Äôs no syntax error in the following example:\nfunction sayHi() { alert( this.name ); } The value of¬†this¬†is evaluated during the run-time, depending on the context.\nFor instance, here the same function is assigned to two different objects and has different ‚Äúthis‚Äù in the calls:\nlet user = { name: \u0026#34;John\u0026#34; }; let admin = { name: \u0026#34;Admin\u0026#34; }; function sayHi() { alert( this.name ); } // use the same function in two objects user.f = sayHi; admin.f = sayHi; // these calls have different this // \u0026#34;this\u0026#34; inside the function is the object \u0026#34;before the dot\u0026#34; user.f(); // John (this == user) admin.f(); // Admin (this == admin) admin[\u0026#39;f\u0026#39;](); // Admin (dot or square brackets access the method ‚Äì doesn\u0026#39;t matter) Arrow functions have no ‚Äúthis‚Äù Arrow functions are special: they don‚Äôt have their ‚Äúown‚Äù this. If we reference this from such a function, it‚Äôs taken from the outer ‚Äúnormal‚Äù function.\nFor instance, here arrow() uses this from the outer user.sayHi() method:\nlet user = { firstName: \u0026#34;Ilya\u0026#34;, sayHi() { let arrow = () =\u0026gt; alert(this.firstName); arrow(); } }; user.sayHi(); // Ilya That‚Äôs a special feature of arrow functions, it‚Äôs useful when we actually do not want to have a separate¬†this, but rather to take it from the outer context. Later in the chapter¬†Arrow functions revisited¬†we‚Äôll go more deeply into arrow functions.\nSummary Functions that are stored in object properties are called ‚Äúmethods‚Äù. Methods allow objects to ‚Äúact‚Äù like¬†object.doSomething(). Methods can reference the object as¬†this. The value of¬†this¬†is defined at run-time.\nWhen a function is declared, it may use¬†this, but that¬†this¬†has no value until the function is called. A function can be copied between objects. When a function is called in the ‚Äúmethod‚Äù syntax:¬†object.method(), the value of¬†this¬†during the call is¬†object. Please note that arrow functions are special: they have no¬†this. When¬†this¬†is accessed inside an arrow function, it is taken from outside.\nKey Points In Global Scope the value of this is window. In function the value of this is window In Method the value of this is object function inside the method es5(deceleration function) the value of this is window. function inside the method es6(expression function) the value of this is object. the value of this in constructor function is blank object. In event listener value of this will be according to the element. call/apply/bind call There‚Äôs a special built-in function method¬†func.call(context, ‚Ä¶args)¬†that allows to call a function explicitly setting¬†this.\nThe syntax is:\nfunc.call(context, arg1, arg2, ...) It runs¬†func¬†providing the first argument as¬†this, and the next as the arguments.\nTo put it simply, these two calls do almost the same:\nfunc(1, 2, 3); func.call(obj, 1, 2, 3) They both call¬†func¬†with arguments¬†1,¬†2¬†and¬†3. The only difference is that¬†func.call¬†also sets¬†this¬†to¬†obj.\nAs an example, in the code below we call¬†sayHi¬†in the context of different objects:¬†sayHi.call(user)¬†runs¬†sayHi¬†providing¬†this=user, and the next line sets¬†this=admin:\nfunction sayHi() { alert(this.name); } let user = { name: \u0026#34;John\u0026#34; }; let admin = { name: \u0026#34;Admin\u0026#34; }; // use call to pass different objects as \u0026#34;this\u0026#34; sayHi.call( user ); // John sayHi.call( admin ); // Admin apply Instead of¬†func.call(this, ...arguments)¬†we could use¬†func.apply(this, arguments).\nThe syntax of built-in method¬†func.apply¬†is:\nfunc.apply(context, args) It runs the¬†func¬†setting¬†this=context¬†and using an array-like object¬†args¬†as the list of arguments.\nThe only syntax difference between¬†call¬†and¬†apply¬†is that¬†call¬†expects a list of arguments, while¬†apply¬†takes an array-like object with them.\nSo these two calls are almost equivalent:\nfunc.call(context, ...args); func.apply(context, args); Example:\nfunction func(a, b, c) { console.log(this, a, b, c); } func.call(obj, [1, 2, 3]); bind() The¬†bind()¬†method of¬†Function¬†instances creates a new function that, when called, calls this function with its¬†this¬†keyword set to the provided value, and a given sequence of arguments preceding any provided when the new function is called.\nIt does not call function. It just return another function that we can store in variable to call it\nfunction func() { console.log(this); } let n = func.bind(\u0026#34;ahmad\u0026#34;); n(); Prototypal inheritance In JavaScript, objects have a special hidden property¬†[[Prototype]]¬†(as named in the specification), that is either¬†null¬†or references another object. That object is called ‚Äúa prototype‚Äù:\nWhen we read a property from¬†object, and it‚Äôs missing, JavaScript automatically takes it from the prototype. In programming, this is called ‚Äúprototypal inheritance‚Äù. And soon we‚Äôll study many examples of such inheritance, as well as cooler language features built upon it.\nThe property¬†[[Prototype]]¬†is internal and hidden, but there are many ways to set it.\nPrototypal inheritance in JavaScript is a mechanism that allows objects to inherit properties and methods from other objects. Instead of using classes like in classical inheritance (as in Java or C++), JavaScript uses prototypes.\nfunction makeHuman(name,age){ this.name = name; this.age = age; } makeHuman.prototype.greet = 12; makeHuman.prototype.func = function(){ console.log(this.name); } let human1 = new makeHuman(\u0026#34;ahmad\u0026#34;,20); let human2 = new makeHuman(\u0026#34;ali\u0026#34;,30); How It Works: Every JavaScript object has an internal property called [[Prototype]], which points to another object.\nWhen you try to access a property or method on an object, JavaScript first looks for it on the object itself.\nIf the property/method is not found, JavaScript looks up the prototype chain until it either finds the property or reaches null.\nThe value of ‚Äúthis‚Äù An interesting question may arise in the example above: what‚Äôs the value of¬†this¬†inside¬†set fullName(value)? Where are the properties¬†this.name¬†and¬†this.surname¬†written: into¬†user¬†or¬†admin?\nThe answer is simple:¬†this¬†is not affected by prototypes at all.\nNo matter where the method is found: in an object or its prototype. In a method call,¬†this¬†is always the object before the dot.\nSo, the setter call¬†admin.fullName=¬†uses¬†admin¬†as¬†this, not¬†user.\nThat is actually a super-important thing, because we may have a big object with many methods, and have objects that inherit from it. And when the inheriting objects run the inherited methods, they will modify only their own states, not the state of the big object.\nClosures in JS A closure in JavaScript is a function that remembers the variables from its lexical scope, even when the function is executed outside that scope.\nHow It Works: When a function is created inside another function, it captures the outer function‚Äôs variables, even after the outer function has finished executing.\nfunction counter() { let count = 0; return function() { count++; console.log(count); }; } const increment = counter(); increment(); // 1 increment(); // 2 What is an Event Listener in JavaScript? An event listener is a method that allows you to wait for a specific event (like a click, keypress, hover, etc.) and run a function when the event occurs.\n‚úÖ Example of addEventListener() document.getElementById(\u0026#34;btn\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function() { console.log(\u0026#34;Button Clicked!\u0026#34;); }); Here, addEventListener(\u0026quot;click\u0026quot;, function) listens for a click event on the button with id=\u0026quot;btn\u0026quot;. When clicked, it logs \u0026quot;Button Clicked!\u0026quot;. Common Events Event Description click When an element is clicked mouseover When the mouse hovers over an element keydown When a key is pressed submit When a form is submitted What is querySelector in JavaScript? querySelector() is a method used to select an element from the DOM using CSS selectors.\nExample of querySelector() const heading = document.querySelector(\u0026#34;h1\u0026#34;); // Selects the first `\u0026lt;h1\u0026gt;` element heading.style.color = \u0026#34;red\u0026#34;; // Changes its color to red Selecting Elements document.querySelector(\u0026#34;#myId\u0026#34;); // Selects an element by ID document.querySelector(\u0026#34;.myClass\u0026#34;); // Selects the first element with this class document.querySelector(\u0026#34;p\u0026#34;); // Selects the first \u0026lt;p\u0026gt; element Event Delegation in JavaScript Event Delegation is a pattern that allows you to handle events efficiently by attaching a single event listener to a parent element instead of adding multiple listeners to child elements.\nü§î Why Use Event Delegation? ‚úÖ Better Performance ‚Üí Avoids adding multiple event listeners.\n‚úÖ Handles Dynamic Elements ‚Üí Works even for elements added later via JavaScript.\n‚úÖ Less Memory Usage ‚Üí Reduces the number of event listeners.\nExample\nlet parent = document.querySelector(\u0026#34;#parent\u0026#34;); parent.addEventListener(\u0026#34;click\u0026#34;, function (ev) { if (ev.target.id === \u0026#34;play\u0026#34;) { console.log(\u0026#34;Play Song\u0026#34;); } else if (ev.target.id === \u0026#34;pause\u0026#34;) { console.log(\u0026#34;Pause Song\u0026#34;); } }); When Should You Use Event Delegation? Handling clicks on lists, tables, menus, or dynamically added elements. Handling form inputs when adding fields dynamically. Improving performance for elements inside large containers. Higher-Order Functions in JavaScript A Higher-Order Function (HOF) is a function that takes another function as an argument or returns a function.\nfunction func1(f1) { // func1 takes a function as an argument (HOF property) f1(); // Calls the passed function return function () { // Returns a new function (HOF property) console.log(\u0026#34;returned fun\u0026#34;); }; } fun = function () { console.log(\u0026#34;Passed Function\u0026#34;); }; let returned = func1(fun); // Call func1 with \u0026#39;fun\u0026#39; function returned(); // Call the returned function Built-in Higher-Order Functions in JavaScript Method Description map() Transforms an array by applying a function to each element. filter() Filters an array based on a condition. reduce() Reduces an array to a single value. forEach() Iterates over an array but does not return a new one. Handling Errors with `try\u0026hellip;catch The try...catch block allows you to handle errors gracefully. The try...catch statement is used to handle errors, and throw is used to create custom errors.\nBasic Example of try...catch\ntry { let x = y + 5; // ‚ùå ReferenceError: y is not defined } catch (error) { console.log(\u0026#34;An error occurred:\u0026#34;, error.message); } üîπ If an error occurs inside try, execution moves to catch, preventing a crash.\nUsing throw to Create Custom Error function divide(a, b) { if (b === 0) { throw new Error(\u0026#34;Cannot divide by zero!\u0026#34;); // üöÄ Custom error } return a / b; } try { console.log(divide(10, 0)); // ‚ùå Throws an error } catch (error) { console.log(\u0026#34;Error:\u0026#34;, error.message); } üîπ throw allows custom error messages instead of generic JavaScript errors.\nfinally Block (Always Executes) try { console.log(\u0026#34;Trying something...\u0026#34;); throw new Error(\u0026#34;Something went wrong!\u0026#34;); } catch (error) { console.log(\u0026#34;Caught Error:\u0026#34;, error.message); } finally { console.log(\u0026#34;This runs no matter what!\u0026#34;); } Custom Events in JavaScript A Custom Event in JavaScript is an event that you manually create and dispatch using the CustomEvent constructor. This allows communication between different parts of your application.\nCreating and Dispatching a Custom Event The CustomEvent constructor takes two arguments: 1Ô∏è‚É£ Event Name (string)\n2Ô∏è‚É£ Event Options (optional, includes detail for extra data)\nlet ev = new Event(\u0026#34;newEv\u0026#34;); document.querySelector(\u0026#34;button\u0026#34;).addEventListener(\u0026#34;newEv\u0026#34;, function () { console.log(\u0026#34;Custom Event\u0026#34;); }); document.querySelector(\u0026#34;button\u0026#34;).dispatchEvent(ev); Full Example: Custom Event with Data\n// Create and dispatch custom event const customEvent = new CustomEvent(\u0026#34;userLoggedIn\u0026#34;, { detail: { username: \u0026#34;ahmad9059\u0026#34;, role: \u0026#34;admin\u0026#34; } }); document.addEventListener(\u0026#34;userLoggedIn\u0026#34;, function (event) { console.log(`User: ${event.detail.username}, Role: ${event.detail.role}`); }); // Dispatch the event document.dispatchEvent(customEvent); When to Use Custom Events?\nFor component communication (e.g., sending data between different UI components). When working with user interactions that don\u0026rsquo;t have built-in events. For event-driven architectures where actions trigger custom behavior. ","permalink":"http://localhost:1313/posts/javascript-advanced/","summary":"\u003ch1 id=\"arrays\"\u003eArrays\u003c/h1\u003e\n\u003cp\u003eObjects allow you to store keyed collections of values. That‚Äôs fine.\u003c/p\u003e\n\u003cp\u003eBut quite often we find that we need an¬†\u003cem\u003eordered collection\u003c/em\u003e, where we have a 1st, a 2nd, a 3rd element and so on. For example, we need that to store a list of something: users, goods, HTML elements etc.\u003c/p\u003e\n\u003cp\u003eIt is not convenient to use an object here, because it provides no methods to manage the order of elements. We can‚Äôt insert a new property ‚Äúbetween‚Äù the existing ones. Objects are just not meant for such use.\u003c/p\u003e","title":"JavaScript Advanced Concepts"},{"content":"Synchronous vs Asynchronous JavaScript JavaScript is single-threaded, meaning it executes one operation at a time in a sequential manner. However, JavaScript provides mechanisms to handle tasks asynchronously, allowing it to perform operations without blocking the main execution thread.\n1. Synchronous JavaScript In synchronous execution, tasks run one after another, meaning JavaScript waits for one operation to complete before moving to the next. This can cause delays if a task takes a long time (e.g., reading a large file or making a network request).\nExample:\nconsole.log(\u0026#34;Start\u0026#34;); function syncFunction() { console.log(\u0026#34;Processing...\u0026#34;); } syncFunction(); console.log(\u0026#34;End\u0026#34;); Here, JavaScript executes statements one by one in order, blocking execution until each task is completed.\n2. Asynchronous JavaScript Asynchronous JavaScript allows tasks to run in the background without blocking the execution of other tasks. This is useful for operations like fetching data from an API, reading files, or handling timers.\nDoes NOT wait for one task to complete before moving to the next. Allows JavaScript to handle time-consuming operations (API calls, file reads, etc.) efficiently. Uses the Event Loop to manage async tasks. How Asynchronous JavaScript Works JavaScript uses the Event Loop and the Call Stack to handle asynchronous code efficiently. It uses:\nCallbacks(setTimeout,setInterval) Fetch API Axios Promises Async/Await Callbacks A callback function is passed as an argument to be executed later.given example use the both setTimeout and setInterval and clearInterval to stop the setInterval\nconsole.log(\u0026#34;Start of program\u0026#34;); // setTimeout: Delays execution by 3 seconds setTimeout(() =\u0026gt; { console.log(\u0026#34;setTimeout: This runs after 3 seconds\u0026#34;); }, 3000); // setInterval: Runs every 2 seconds let counter = 0; let intervalID = setInterval(() =\u0026gt; { counter++; console.log(`setInterval: Counter is ${counter}`); // Stop interval after 5 executions if (counter === 5) { clearInterval(intervalID); console.log(\u0026#34;clearInterval: Stopped interval after 5 executions\u0026#34;); } }, 2000); console.log(\u0026#34;End of program (before timeouts and intervals execute)\u0026#34;); Fetch API The fetch() API is asynchronous because it makes network requests without blocking the execution of other code. It returns a Promise, which resolves when the request completes.\nfetch(\u0026#34;https://jsonplaceholder.typicode.com/todos/1\u0026#34;) // Fetch data from API .then((response) =\u0026gt; response.json()) // Convert response to JSON .then((data) =\u0026gt; console.log(data)) // Log the data .catch((error) =\u0026gt; console.error(\u0026#34;Error fetching data:\u0026#34;, error)); üîπ How it works? 1Ô∏è‚É£ fetch() makes an HTTP request (returns a Promise).\n2Ô∏è‚É£ .json() parses the response into JavaScript object (also async, returns a Promise).\n3Ô∏è‚É£ .then() handles the resolved data.\n4Ô∏è‚É£ .catch() handles errors (e.g., network failure).\nAxios Axios is asynchronous because it makes network requests without blocking execution. It is built on top of JavaScript Promises, similar to fetch(), but with more features.\nWhy use Axios?\nNo need to manually parse JSON (Axios does it automatically). Better error handling (Fetch only rejects on network errors, while Axios rejects on HTTP errors too). More readable with async/await. axios.get(\u0026#34;https://jsonplaceholder.typicode.com/todos/1\u0026#34;) .then(response =\u0026gt; console.log(response.data)) // Axios auto-parses JSON .catch(error =\u0026gt; console.error(\u0026#34;Error fetching data:\u0026#34;, error)); üî• Comparison: Axios vs. Fetch Feature Axios Fetch JSON Parsing ‚úÖ Auto ‚ùå Manual (.json()) Error Handling ‚úÖ Rejects on HTTP errors ‚ùå Only rejects on network errors Request Headers ‚úÖ Easy ‚ùå Manual setup required async/await Support ‚úÖ Yes ‚úÖ Yes Default Timeout ‚úÖ Yes (timeout option) ‚ùå No üëâ Best Practice: Use Axios when working with APIs that require headers, authentication, or advanced error handling.\nPromise in JavaScript A Promise in JavaScript is an object that represents the eventual completion (or failure) of an asynchronous operation.\nüëâ It has three states:\nPending ‚Üí Initial state, neither resolved nor rejected. Fulfilled ‚Üí Operation completed successfully. Rejected ‚Üí Operation failed. let promise = new Promise(function (resolve, reject) { fetch(`https://randomuser.me/api/`) .then((raw) =\u0026gt; raw.json()) .then((result) =\u0026gt; { if (result.results[0].gender === \u0026#34;male\u0026#34;) { resolve(); } else { reject(); } }); }); promise .then(function () { console.log(\u0026#34;Male Received\u0026#34;); }) .catch(function () { console.log(\u0026#34;Female Received\u0026#34;); }); Callbacks in JavaScript A callback is a function passed as an argument to another function and executed later.\nüëâ Why use callbacks?\nHandle asynchronous operations (like fetching data, timers, or reading files). Execute code after another function completes. function getData(url, callback) { fetch(`https://randomuser.me/api/`) .then((raw) =\u0026gt; raw.json()) .then((result) =\u0026gt; { callback(result); }); } getData(\u0026#34;https://randomuser.me/api/\u0026#34;, function (result) { console.log( result.results[0].gender, result.results[0].name.first, result.results[0].email, ); }); async/await async/await is a modern way to handle asynchronous code in JavaScript.\nIt allows you to write asynchronous code in a way that looks synchronous, making it easier to read and debug.\nüëâ Key Features:\n‚úîÔ∏è **async: **The async keyword is used before a function definition to make it return a Promise. ‚úîÔ∏è await: The await keyword is used inside an async function to pause execution until a Promise resolves. ‚úîÔ∏è Avoids callback hell and complex .then() chains.\n‚úîÔ∏è Handles errors with try/catch.\nasync function func() { let n = await fetch(`https://randomuser.me/api/`); n = await n.json(); console.log(n.results[0].gender); } func(); When to Use async/await? ‚úîÔ∏è Fetching data from an API\n‚úîÔ∏è Performing database queries\n‚úîÔ∏è Reading/Writing files (in Node.js)\n‚úîÔ∏è Processing multiple async requests together\n‚úîÔ∏è Avoiding callback hell\nEvent Loop To understand the Event Loop, you need to know how JavaScript executes code. It has three main components:\nCall Stack The Call Stack follows the LIFO (Last In, First Out) principle. It executes synchronous JavaScript code line by line. function greet() { console.log(\u0026#34;Hello!\u0026#34;); } greet(); üìå Execution:\ngreet() is pushed onto the Call Stack. console.log(\u0026quot;Hello!\u0026quot;) runs and is popped from the stack. Web APIs (Async Tasks) JavaScript delegates async tasks (e.g., setTimeout, fetch, event listeners) to Web APIs. These APIs handle the task in the background and return the result later. Example:\nconsole.log(\u0026#34;Start\u0026#34;); setTimeout(() =\u0026gt; { console.log(\u0026#34;Inside setTimeout\u0026#34;); }, 1000); console.log(\u0026#34;End\u0026#34;); üìå Execution Flow:\nconsole.log(\u0026quot;Start\u0026quot;) ‚Üí Executes immediately. setTimeout() ‚Üí Sent to Web API, NOT executed immediately. console.log(\u0026quot;End\u0026quot;) ‚Üí Executes immediately. After 1 second, the callback (console.log(\u0026quot;Inside setTimeout\u0026quot;)) moves to Callback Queue. Callback Queue \u0026amp; Microtask Queue Callback Queue: Stores callbacks from setTimeout, setInterval, event listeners. Microtask Queue: Stores callbacks from Promises (.then(), catch(), finally()) and MutationObserver. Microtasks always run before Callbacks (higher priority). Example:\nconsole.log(\u0026#34;Start\u0026#34;); setTimeout(() =\u0026gt; console.log(\u0026#34;Timeout Callback\u0026#34;), 0); Promise.resolve().then(() =\u0026gt; console.log(\u0026#34;Promise Resolved\u0026#34;)); console.log(\u0026#34;End\u0026#34;); üìå Execution Flow:\nconsole.log(\u0026quot;Start\u0026quot;) ‚Üí Runs immediately. setTimeout() ‚Üí Sent to Web API (callback moved to Callback Queue). Promise.resolve().then(...) ‚Üí Sent to Microtask Queue. console.log(\u0026quot;End\u0026quot;) ‚Üí Runs immediately. Microtask Queue executes first ‚Üí console.log(\u0026quot;Promise Resolved\u0026quot;). Callback Queue executes ‚Üí console.log(\u0026quot;Timeout Callback\u0026quot;). How the Event Loop Works 1Ô∏è‚É£ JavaScript executes synchronous code in the Call Stack. 2Ô∏è‚É£ If an async task is encountered, it moves to the Web API. 3Ô∏è‚É£ Once completed, it moves the callback to the Callback Queue or Microtask Queue. 4Ô∏è‚É£ The Event Loop checks if the Call Stack is empty. 5Ô∏è‚É£ If empty, it first executes Microtasks, then moves Callbacks from the Callback Queue. 6Ô∏è‚É£ Repeats the process infinitely.\nüöÄ Key Takeaways ‚úî JavaScript is single-threaded but handles async tasks with the Event Loop.\n‚úî Microtask Queue (Promises) runs before the Callback Queue (setTimeout).\n‚úî The Event Loop ensures JavaScript never blocks execution.\n‚úî Long-running tasks should be asynchronous to avoid UI freezing.\nDifference Between Callbacks, Promises, and Async/Await Feature Callbacks Promises Async/Await Definition A function passed as an argument to another function and executed later. An object representing the eventual completion (or failure) of an asynchronous operation. A modern way to handle asynchronous code using async and await keywords. Syntax Nested functions, leading to callback hell. Uses .then(), .catch(), and .finally(). Uses async to declare functions and await to handle promises. Readability Hard to read and maintain due to callback nesting. More readable but still involves chaining. Clean and synchronous-like syntax. Error Handling Error-prone, requires manual handling (if-else or separate error callback). Uses .catch() to handle errors. Uses try...catch for better error handling. Chaining Difficult, leads to callback hell (Pyramid of Doom). Easy with .then() chaining. Simplifies chaining with await. Execution Flow Asynchronous but difficult to manage for multiple tasks. More manageable, but chaining can still be tricky. Most intuitive, executes sequentially like synchronous code. Best For Simple async operations, event listeners. Handling multiple asynchronous operations in a cleaner way. Writing clean, readable, and maintainable async code. Generators in JavaScript Generators are special functions in JavaScript that allow us to pause and resume execution. Unlike normal functions, they do not execute all at once; instead, they produce values one at a time as requested.\nKey Features of Generators ‚úî Uses the function* syntax (notice the * after function).\n‚úî Uses the yield keyword to pause execution and return values.\n‚úî The function doesn‚Äôt run immediately; instead, it returns an iterator object.\n‚úî The next() method resumes execution from the last yield.\nfunction* myGenerator() { console.log(\u0026#34;Start\u0026#34;); yield 1; // Pause and return 1 console.log(\u0026#34;Resume\u0026#34;); yield 2; // Pause and return 2 console.log(\u0026#34;End\u0026#34;); } const gen = myGenerator(); // Creates the generator object console.log(gen.next()); // { value: 1, done: false } console.log(gen.next().value); // 2 console.log(gen.next()); // { value: undefined, done: true } üìå How it Works? Calling myGenerator() doesn\u0026rsquo;t execute it immediately. It returns a generator object (gen). gen.next() starts execution until the first yield, returning { value: 1, done: false }. Calling gen.next() again resumes execution after the first yield, printing \u0026quot;Resume\u0026quot; and yielding { value: 2, done: false }. When there are no more yield statements, done: true is returned. Generator with for...of Loop Instead of calling next() manually, we can use a for...of loop.\nfunction* fruits() { yield \u0026#34;üçé Apple\u0026#34;; yield \u0026#34;üçå Banana\u0026#34;; yield \u0026#34;üçá Grapes\u0026#34;; } for (let fruit of fruits()) { console.log(fruit); } Generators vs Async/Await Feature Generators Async/Await Execution Can be paused/resumed using yield Pauses execution until a Promise resolves Returns Iterator object Promise Use Case Custom iteration, state management Handling async operations When to Use Generators? ‚úî Custom Iterators ‚Äì Iterating over data in a custom way.\n‚úî Lazy Execution ‚Äì Generate values on demand instead of all at once.\n‚úî Infinite Sequences ‚Äì Generate values infinitely without memory issues.\n‚úî Asynchronous Programming (with co-routines) ‚Äì Generators can be combined with Promises.\nWeb Worker Web Workers allow JavaScript to run background tasks in a separate thread without blocking the main UI thread. This helps in handling heavy computations and keeping the web page responsive.\nWhy Use Web Workers? ‚úî JavaScript is single-threaded (blocking UI when executing long tasks).\n‚úî Web Workers allow running tasks in parallel on a different thread.\n‚úî Helps in CPU-intensive tasks like image processing, large calculations, etc.\n‚úî Keeps the UI smooth and prevents the page from freezing.\nüöÄ Step 1: Create the Worker (heavyWorker.js)\nonmessage = function (data) { let ans = data.data.reduce((acc, item) =\u0026gt; item + acc, 0); postMessage(ans); }; üöÄ Step 2: Use the Worker in Your Main Script (main.js)\nlet nums = Array.from({ length: 10000 }, (_, b) =\u0026gt; b + 1); let worker = new Worker(\u0026#34;worker.js\u0026#34;); worker.postMessage(nums); worker.onmessage = function (data) { console.log(data.data); }; Limitations of Web Workers ‚ùå No DOM Access ‚Äì Cannot manipulate HTML directly.\n‚ùå Cannot use window, document, or alert() ‚Äì Only limited APIs like fetch(), WebSockets, and IndexedDB.\n‚ùå Same-Origin Policy ‚Äì Workers must be loaded from the same domain.\n‚ùå Extra Resource Consumption ‚Äì Creating multiple workers consumes more memory.\n","permalink":"http://localhost:1313/posts/asynchronous-js/","summary":"\u003ch2 id=\"synchronous-vs-asynchronous-javascript\"\u003eSynchronous vs Asynchronous JavaScript\u003c/h2\u003e\n\u003cp\u003eJavaScript is \u003cstrong\u003esingle-threaded\u003c/strong\u003e, meaning it executes one operation at a time in a sequential manner. However, JavaScript provides mechanisms to handle tasks asynchronously, allowing it to perform operations without blocking the main execution thread.\u003c/p\u003e\n\u003ch2 id=\"1-synchronous-javascript\"\u003e1. Synchronous JavaScript\u003c/h2\u003e\n\u003cp\u003eIn \u003cstrong\u003esynchronous execution\u003c/strong\u003e, tasks run one after another, meaning JavaScript waits for one operation to complete before moving to the next. This can cause delays if a task takes a long time (e.g., reading a large file or making a network request).\u003c/p\u003e","title":"Asynchronous JavaScript"},{"content":"\nJavaScript was originally created to bring static web pages to life, enabling them to respond dynamically to user interactions. Its code, known as scripts, is directly embedded within HTML documents and executed by the browser as soon as the page loads. Because these scripts are delivered and interpreted as plain text, they bypass the need for a separate compilation process‚Äîthis makes development swift and flexible.\nThis interpretive nature is a key characteristic of JavaScript and distinguishes it from compiled languages like Java. Whereas Java requires a compile step to transform code into bytecode before execution, JavaScript‚Äôs immediate execution model facilitates rapid testing and iterative development. Over time, JavaScript has evolved from a simple tool for adding interactivity to a robust language capable of handling complex web applications, manipulating the Document Object Model (DOM), and even running on servers through environments like Node.js.\nIn essence, JavaScript‚Äôs design philosophy‚Äîenabling live, responsive web experiences with minimal overhead‚Äîcontinues to shape the modern, dynamic web.\nTip: Brendan Eich¬†is the original developer of JavaScript\nWhy is it called¬†JavaScript?\nWhen JavaScript was created, it initially had another name: ‚ÄúLiveScript‚Äù. But Java was very popular at that time, so it was decided that positioning a new language as a ‚Äúyounger brother‚Äù of Java would help.\nBut as it evolved, JavaScript became a fully independent language with its own specification called¬†ECMAScript, and now it has no relation to Java at all.\nToday, JavaScript can execute not only in the browser, but also on the server, or actually on any device that has a special program called¬†the JavaScript engine.\nThe browser has an embedded engine sometimes called a ‚ÄúJavaScript virtual machine‚Äù.\nDifferent engines have different ‚Äúcodenames‚Äù. For example:\nV8¬†‚Äì in Chrome, Opera and Edge. SpiderMonkey¬†‚Äì in Firefox. ‚Ä¶There are other codenames like ‚ÄúChakra‚Äù for IE, ‚ÄúJavaScriptCore‚Äù, ‚ÄúNitro‚Äù and ‚ÄúSquirrelFish‚Äù for Safari, etc. The terms above are good to remember because they are used in developer articles on the internet. We‚Äôll use them too. For instance, if ‚Äúa feature X is supported by V8‚Äù, then it probably works in Chrome, Opera and Edge.\nHow do engines work?\nEngines are complicated. But the basics are easy.\nThe engine (embedded if it‚Äôs a browser) reads (‚Äúparses‚Äù) the script. Then it converts (‚Äúcompiles‚Äù) the script to machine code. And then the machine code runs, pretty fast. The engine applies optimizations at each step of the process. It even watches the compiled script as it runs, analyzes the data that flows through it, and further optimizes the machine code based on that knowledge.\nWhat makes JavaScript unique? There are at least three great things about JavaScript:\nFull integration with HTML/CSS. Simple things are done simply. Supported by all major browsers and enabled by default. Link JavaScript to HTML We can use a¬†\u0026lt;script\u0026gt;¬†tag to add JavaScript code to a page. The¬†type¬†and¬†language¬†attributes are not required. A script in an external file can be inserted with¬†\u0026lt;script src=\u0026quot;path/to/script.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;. Please note: As a rule, only the simplest scripts are put into HTML. More complex ones reside in separate files.\nThe benefit of a separate file is that the browser will download it and store it in its cache.\nOther pages that reference the same script will take it from the cache instead of downloading it, so the file is actually downloaded only once.\nThat reduces traffic and makes pages faster.\nSemicolons A semicolon may be omitted in most cases when a line break exists. This would also work:\nconsole.log(\u0026#39;Hello\u0026#39;) console.log(\u0026#39;World\u0026#39;) Here, JavaScript interprets the line break as an ‚Äúimplicit‚Äù semicolon. This is called an automatic semicolon insertion.\nIn most cases, a newline implies a semicolon. But ‚Äúin most cases‚Äù does not mean ‚Äúalways‚Äù!\nThere are cases when a newline does not mean a semicolon. For example:\nconsole.log(3 + 1 + 2); The code outputs 6 because JavaScript does not insert semicolons here. It is intuitively obvious that if the line ends with a plus \u0026ldquo;+\u0026rdquo;, then it is an ‚Äúincomplete expression‚Äù, so a semicolon there would be incorrect. And in this case, that works as intended.\nBut there are situations where JavaScript ‚Äúfails‚Äù to assume a semicolon where it is really needed.\nErrors which occur in such cases are quite hard to find and fix.\nAn example of an error\nIf you‚Äôre curious to see a concrete example of such an error, check this code out:\nconsole.log(\u0026#34;Hello\u0026#34;); [1, 2].forEach(console.log); Now let‚Äôs remove the semicolon after the console.log:\nconsole.log(\u0026#34;Hello\u0026#34;) [1, 2].forEach(console.log); The difference compared to the code above is only one character: the semicolon at the end of the first line is gone.\nIf we run this code, only the first¬†Hello¬†shows (and there‚Äôs an error, you may need to open the console to see it). There are no numbers any more.\nThat‚Äôs because JavaScript does not assume a semicolon before square brackets¬†[...]. So, the code in the last example is treated as a single statement.\nHere‚Äôs how the engine sees it:\nconsole.log(\u0026#34;Hello\u0026#34;)[1, 2].forEach(console.log); It\u0026rsquo;s recommend putting semicolons between statements even if they are separated by newlines. This rule is widely adopted by the community. Let‚Äôs note once again ‚Äì it is possible to leave out semicolons most of the time. But it‚Äôs safer ‚Äì especially for a beginner ‚Äì to use them.\nComments As time goes on, programs become more and more complex. It becomes necessary to add comments which describe what the code does and why.\nComments can be put into any place of a script. They don‚Äôt affect its execution because the engine simply ignores them.\nOne-line comments start with two forward slash characters //. The rest of the line is a comment. It may occupy a full line of its own or follow a statement. Like here:\n// This comment occupies a line of its own console.log(\u0026#39;Hello\u0026#39;); console.log(\u0026#39;World\u0026#39;); // This comment follows the statement Multiline comments start with a forward slash and an asterisk /* and end with an asterisk and a forward slash */. /* An example with two messages. This is a multiline comment. */ console.log(\u0026#39;Hello\u0026#39;); console.log(\u0026#39;World\u0026#39;); Nested comments are not supported! There may not be /\u0026hellip;/ inside another /\u0026hellip;/.\nSuch code will die with an error:\n/* /* nested comment ?!? */ not allowed */ console.log( \u0026#39;World\u0026#39; ); The modern mode, \u0026ldquo;use strict\u0026rdquo; The directive looks like a string:¬†\u0026quot;use strict\u0026quot;¬†or¬†'use strict'. When it is located at the top of a script, the whole script works the ‚Äúmodern‚Äù way.\n\u0026#34;use strict\u0026#34;; // this code works the modern way ... Advance that¬†\u0026quot;use strict\u0026quot;¬†can be put at the beginning of a function. Doing that enables strict mode in that function only. But usually people use it for the whole script.\nEnsure that ‚Äúuse strict‚Äù is at the top\nPlease make sure that¬†\u0026quot;use strict\u0026quot;¬†is at the top of your scripts, otherwise strict mode may not be enabled. Strict mode isn‚Äôt enabled here:\nconsole.log(\u0026#34;some code\u0026#34;); // \u0026#34;use strict\u0026#34; below is ignored--it must be at the top \u0026#34;use strict\u0026#34;; // strict mode is not activated Should we ‚Äúuse strict‚Äù? The question may sound obvious, but it‚Äôs not so.\nOne could recommend to start scripts with \u0026ldquo;use strict\u0026rdquo;‚Ä¶ But you know what‚Äôs cool?\nModern JavaScript supports ‚Äúclasses‚Äù and ‚Äúmodules‚Äù ‚Äì advanced language structures (we‚Äôll surely get to them), that enable use strict automatically. So we don‚Äôt need to add the \u0026ldquo;use strict\u0026rdquo; directive, if we use them.\nSo, for now \u0026ldquo;use strict\u0026rdquo;; is a welcome guest at the top of your scripts. Later, when your code is all in classes and modules, you may omit it.\nAs of now, we‚Äôve got to know about use strict in general.\nIn the next chapters, as we learn language features, we‚Äôll see the differences between the strict and old modes. Luckily, there aren‚Äôt many and they actually make our lives better.\nThe purpose of¬†\u0026quot;use strict\u0026quot;¬†is to indicate that the code should be executed in \u0026ldquo;strict mode\u0026rdquo;.\nWith strict mode, you can not, for example, use undeclared variables.\nJavaScript¬†Window - The Browser Object Model In JavaScript, window is a global object that represents the browser window or tab. It is the top-level object in the browser\u0026rsquo;s client-side execution environment and provides access to various properties and methods for controlling the browser window.\nconsole The console object provides access to the browser\u0026rsquo;s debugging console.\nconsole.log(\u0026#34;Hello, World!\u0026#34;); console.warn(\u0026#34;Be carefull\u0026#34;); console.error(\u0026#34;You made a mistake\u0026#34;); log(): Outputs a message to the console. warn(): Outputs a warning message to the console. error(): Outputs an error message to the console. clear(): Clears the console. Interaction: alert, prompt, confirm As we‚Äôll be using the browser as our demo environment, let‚Äôs see a couple of functions to interact with the user:¬†alert,¬†prompt¬†and¬†confirm.\nalert() The¬†alert()¬†method displays an alert box with a message and an OK button.\nThe¬†alert()¬†method is used when you want information to come through to the user.\nalert(\u0026#34;Hello\\nHow are you?\u0026#34;); prompt() The¬†prompt()¬†method displays a dialog box that prompts the user for input.\nThe¬†prompt()¬†method returns the input value if the user clicks \u0026ldquo;OK\u0026rdquo;, otherwise it returns¬†null.\nA prompt box is used if you want the user to input a value.\nWhen a prompt box pops up, the user will have to click either \u0026ldquo;OK\u0026rdquo; or \u0026ldquo;Cancel\u0026rdquo; to proceed.\nDo not overuse this method. It prevents the user from accessing other parts of the page until the box is closed.\nresult = prompt(title, [default]); let age = prompt(\u0026#39;How old are you?\u0026#39;, 100); console.log(`You are ${age} years old!`); // You are 100 years old! confirm() The¬†confirm()¬†method displays a dialog box with a message, an OK button, and a Cancel button.\nThe¬†confirm()¬†method returns¬†true¬†if the user clicked \u0026ldquo;OK\u0026rdquo;, otherwise¬†false.\nA confirm box is often used if you want the user to verify or accept something.\nA confirm box takes the focus away from the current window, and forces the user to read the message.\nDo not overuse this method. It prevents the user from accessing other parts of the page until the box is closed.\nVariables A¬†variable¬†is a ‚Äúnamed storage‚Äù for data. We can use variables to store goodies, visitors, and other data.\nTo create a variable in JavaScript, use the¬†let¬†keyword.\nThe statement below creates (in other words:¬†declares) a variable with the name ‚Äúmessage‚Äù:\nlet message; Now, we can put some data into it by using the assignment operator¬†=:\nlet message; message = \u0026#39;Hello\u0026#39;; // store the string \u0026#39;Hello\u0026#39; in the variable named message The string is now saved into the memory area associated with the variable. We can access it using the variable name:\nlet message; message = \u0026#39;Hello!\u0026#39;; console.log(message); // shows the variable content To be concise, we can combine the variable declaration and assignment into a single line:\nlet message = \u0026#39;Hello!\u0026#39;; // define the variable and assign the value console.log(message); // Hello! We can also declare multiple variables in one line:\nlet user = \u0026#39;John\u0026#39;, age = 25, message = \u0026#39;Hello\u0026#39;; That might seem shorter, but we don‚Äôt recommend it. For the sake of better readability, please use a single line per variable.\nThe multiline variant is a bit longer, but easier to read:\nlet user = \u0026#39;John\u0026#39;; let age = 25; let message = \u0026#39;Hello\u0026#39;; Technically, all these variants do the same thing. So, it‚Äôs a matter of personal taste and aesthetics.\nvar¬†instead of¬†let\nIn older scripts, you may also find another keyword:¬†var¬†instead of¬†let:\n`_var_` message `=` `'Hello'``;`\nThe¬†var¬†keyword is¬†almost¬†the same as¬†let. It also declares a variable but in a slightly different, ‚Äúold-school‚Äù way.\nbut the main difference Variables, declared with¬†var, are either function-scoped or global-scoped. They are visible through blocks.\nThere are subtle differences between¬†let¬†and¬†var, but they do not matter to us yet. We‚Äôll cover them in detail in the chapter¬†The old \u0026ldquo;var\u0026rdquo;.\nFunctional languages\nIt‚Äôs interesting to note that there exist so-called¬†pure functional¬†programming languages, such as¬†Haskell, that forbid changing variable values.\nIn such languages, once the value is stored ‚Äúin the box‚Äù, it‚Äôs there forever. If we need to store something else, the language forces us to create a new box (declare a new variable). We can‚Äôt reuse the old one.\nThough it may seem a little odd at first sight, these languages are quite capable of serious development. More than that, there are areas like parallel computations where this limitation confers certain benefits.\nConstants To declare a constant (unchanging) variable, use¬†const¬†instead of¬†let:\nconst myBirthday = \u0026#39;18.04.1982\u0026#39;; Variables declared using¬†const¬†are called ‚Äúconstants‚Äù. They cannot be reassigned. An attempt to do so would cause an error:\nconst myBirthday = \u0026#39;18.04.1982\u0026#39;; myBirthday = \u0026#39;01.01.2001\u0026#39;; // error, can\u0026#39;t reassign the constant! When a programmer is sure that a variable will never change, they can declare it with¬†const¬†to guarantee and communicate that fact to everyone.\nUppercase constants There is a widespread practice to use constants as aliases for difficult-to-remember values that are known before execution.\nSuch constants are named using capital letters and underscores.\nFor instance, let‚Äôs make constants for colors in so-called ‚Äúweb‚Äù (hexadecimal) format:\nconst COLOR_RED = \u0026#34;#F00\u0026#34;; const COLOR_GREEN = \u0026#34;#0F0\u0026#34;; const COLOR_BLUE = \u0026#34;#00F\u0026#34;; const COLOR_ORANGE = \u0026#34;#FF7F00\u0026#34;; // ...when we need to pick a color let color = COLOR_ORANGE; console.log(color); // #FF7F00 COLOR_ORANGE¬†is much easier to remember than¬†\u0026quot;#FF7F00\u0026quot;. It is much easier to mistype¬†\u0026quot;#FF7F00\u0026quot;¬†than¬†COLOR_ORANGE. When reading the code,¬†COLOR_ORANGE¬†is much more meaningful than¬†#FF7F00. When should we use capitals for a constant and when should we name it normally? Let‚Äôs make that clear.\nBeing a ‚Äúconstant‚Äù just means that a variable‚Äôs value never changes. But some constants are known before execution (like a hexadecimal value for red) and some constants are¬†calculated¬†in run-time, during the execution, but do not change after their initial assignment.\nconst pageLoadTime = /* time taken by a webpage to load */; The value of¬†pageLoadTime¬†is not known before the page load, so it‚Äôs named normally. But it‚Äôs still a constant because it doesn‚Äôt change after the assignment.\nIn other words, capital-named constants are only used as aliases for ‚Äúhard-coded‚Äù values.\nData types A value in JavaScript is always of a certain type. For example, a string or a number.\nWe can put any type in a variable. For example, a variable can at one moment be a string and then store a number:\n// no error let message = \u0026#34;hello\u0026#34;; message = 123456; Programming languages that allow such things, such as JavaScript, are called ‚Äúdynamically typed‚Äù, meaning that there exist data types, but variables are not bound to any of them.\n1. Number: The¬†number¬†type represents both integer and floating point numbers.\nlet n = 123; n = 12.345; There are many operations for numbers, e.g. multiplication¬†*, division¬†/, addition¬†+, subtraction¬†-, and so on.\nBesides regular numbers, there are so-called ‚Äúspecial numeric values‚Äù which also belong to this data type:¬†Infinity,¬†-Infinity¬†and¬†NaN.\nInfinity¬†represents the mathematical¬†Infinity¬†‚àû. It is a special value that‚Äôs greater than any number. console.log( 1 / 0 ); // Infinity Or just reference it directly:\nNaN¬†represents a computational error. It is a result of an incorrect or an undefined mathematical operation, for instance: console.log( \u0026#34;not a number\u0026#34; / 2 ); // NaN, such division is erroneous NaN¬†is sticky. Any further mathematical operation on¬†NaN¬†returns¬†NaN:\nconsole.log( NaN + 1 ); // NaN console.log( 3 * NaN ); // NaN console.log( \u0026#34;not a number\u0026#34; / 2 - 1 ); // NaN So, if there‚Äôs a¬†NaN¬†somewhere in a mathematical expression, it propagates to the whole result (there‚Äôs only one exception to that:¬†NaN ** 0¬†is¬†1).\nBigInt In JavaScript, the ‚Äúnumber‚Äù type cannot safely represent integer values larger than¬†(253-1)¬†(that‚Äôs¬†9007199254740991), or less than¬†-(253-1)¬†for negatives.\nTo be really precise, the ‚Äúnumber‚Äù type can store larger integers (up to¬†1.7976931348623157 * 10308), but outside of the safe integer range¬†¬±(253-1)¬†there‚Äôll be a precision error, because not all digits fit into the fixed 64-bit storage. So an ‚Äúapproximate‚Äù value may be stored.\nconsole.log(9007199254740991 + 1); // 9007199254740992 console.log(9007199254740991 + 2); // 9007199254740992 So to say, all odd integers greater than¬†(253-1)¬†can‚Äôt be stored at all in the ‚Äúnumber‚Äù type.\nFor most purposes¬†¬±(253-1)¬†range is quite enough, but sometimes we need the entire range of really big integers, e.g. for cryptography or microsecond-precision timestamps.\nBigInt¬†type was recently added to the language to represent integers of arbitrary length.\nA¬†BigInt¬†value is created by appending¬†n¬†to the end of an integer:\n// the \u0026#34;n\u0026#34; at the end means it\u0026#39;s a BigInt const bigInt = 1234567890123456789012345678901234567890n; 2. String A string in JavaScript must be surrounded by quotes.\nlet str = \u0026#34;Hello\u0026#34;; let str2 = \u0026#39;Single quotes are ok too\u0026#39;; let phrase = `can embed another ${str}`; In JavaScript, there are 3 types of quotes.\nDouble quotes:¬†\u0026quot;Hello\u0026quot;. Single quotes:¬†'Hello'. Backticks:¬†`Hello`. Double and single quotes are ‚Äúsimple‚Äù quotes. There‚Äôs practically no difference between them in JavaScript.\nBackticks are ‚Äúextended functionality‚Äù quotes. They allow us to embed variables and expressions into a string by wrapping them in¬†${‚Ä¶}, for example:\nlet name = \u0026#34;John\u0026#34;; // embed a variable console.log( `Hello, ${name}!` ); // Hello, John! // embed an expression console.log( `the result is ${1 + 2}` ); // the result is 3 There is no¬†character¬†type.\nIn some languages, there is a special ‚Äúcharacter‚Äù type for a single character. For example, in the C language and in Java it is called ‚Äúchar‚Äù.\nIn JavaScript, there is no such type. There‚Äôs only one type:¬†string. A string may consist of zero characters (be empty), one character or many of them.\n3. Boolean (logical type) The boolean type has only two values:¬†true¬†and¬†false.\nThis type is commonly used to store yes/no values:¬†true¬†means ‚Äúyes, correct‚Äù, and¬†false¬†means ‚Äúno, incorrect‚Äù.\nFor instance:\nlet nameFieldChecked = true; // yes, name field is checked let ageFieldChecked = false; // no, age field is not checked 4. The ‚Äúnull‚Äù value The special¬†null¬†value does not belong to any of the types described above.\nIt forms a separate type of its own which contains only the¬†null¬†value:\nlet age = null; In JavaScript,¬†null¬†is not a ‚Äúreference to a non-existing object‚Äù or a ‚Äúnull pointer‚Äù like in some other languages.\nIt‚Äôs just a special value which represents ‚Äúnothing‚Äù, ‚Äúempty‚Äù or ‚Äúvalue unknown‚Äù.\nThe code above states that¬†age¬†is unknown.\nThe \u0026ldquo;undefined\u0026rdquo; value The special value¬†undefined¬†also stands apart. It makes a type of its own, just like¬†null.\nThe meaning of¬†undefined¬†is ‚Äúvalue is not assigned‚Äù.\nIf a variable is declared, but not assigned, then its value is¬†undefined:\nlet age; console.log(age); // shows \u0026#34;undefined\u0026#34; Technically, it is possible to explicitly assign¬†undefined¬†to a variable:\nlet age = 100; // change the value to undefined age = undefined; console.log(age); // \u0026#34;undefined\u0026#34; ‚Ä¶But it\u0026rsquo;s don‚Äôt recommend doing that. Normally, one uses¬†null¬†to assign an ‚Äúempty‚Äù or ‚Äúunknown‚Äù value to a variable, while¬†undefined¬†is reserved as a default initial value for unassigned things.\nObjects and Symbols The¬†object¬†type is special.\nAll other types are called ‚Äúprimitive‚Äù because their values can contain only a single thing (be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex entities.\nBeing that important, objects deserve a special treatment. Deal with them later in the chapter¬†Objects, after we learn more about primitives.\nThe¬†symbol¬†type is used to create unique identifiers for objects. We have to mention it here for the sake of completeness, but also postpone the details till we know objects.\nThe typeof operator The¬†typeof¬†operator returns the type of the operand. It‚Äôs useful when we want to process values of different types differently or just want to do a quick check.\nA call to¬†typeof x¬†returns a string with the type name:\ntypeof undefined // \u0026#34;undefined\u0026#34; typeof 0 // \u0026#34;number\u0026#34; typeof 10n // \u0026#34;bigint\u0026#34; typeof true // \u0026#34;boolean\u0026#34; typeof \u0026#34;foo\u0026#34; // \u0026#34;string\u0026#34; typeof Symbol(\u0026#34;id\u0026#34;) // \u0026#34;symbol\u0026#34; typeof Math // \u0026#34;object\u0026#34; (1) typeof null // \u0026#34;object\u0026#34; (2) typeof alert// \u0026#34;function\u0026#34; (3) The¬†typeof(x)¬†syntax\nYou may also come across another syntax:¬†typeof(x). It‚Äôs the same as¬†typeof x.\nTo put it clear:¬†typeof¬†is an operator, not a function. The parentheses here aren‚Äôt a part of¬†typeof. It‚Äôs the kind of parentheses used for mathematical grouping.\nUsually, such parentheses contain a mathematical expression, such as¬†(2 + 2), but here they contain only one argument¬†(x). Syntactically, they allow to avoid a space between the¬†typeof¬†operator and its argument, and some people like it.\nSome people prefer¬†typeof(x), although the¬†typeof x¬†syntax is much more common.\nType Conversions Most of the time, operators and functions automatically convert the values given to them to the right type.\nFor example,¬†console.log¬†automatically converts any value to a string to show it. Mathematical operations convert values to numbers.\nThere are also cases when we need to explicitly convert a value to the expected type.\nString Conversion String conversion happens when we need the string form of a value.\nFor example,¬†console.log(value)¬†does it to show the value.\nWe can also call the¬†String(value)¬†function to convert a value to a string:\nlet value = true; console.log(typeof value); // boolean value = String(value); // now value is a string \u0026#34;true\u0026#34; console.log(typeof value); // string String conversion is mostly obvious. A¬†false¬†becomes¬†\u0026quot;false\u0026quot;,¬†null¬†becomes¬†\u0026quot;null\u0026quot;, etc.\nNumeric Conversion Numeric conversion in mathematical functions and expressions happens automatically.\nFor example, when division¬†/¬†is applied to non-numbers:\nconsole.log( \u0026#34;6\u0026#34; / \u0026#34;2\u0026#34; ); // 3, strings are converted to numbers We can use the¬†Number(value)¬†function to explicitly convert a¬†value¬†to a number:\nlet str = \u0026#34;123\u0026#34;; console.log(typeof str); // string let num = Number(str); // becomes a number 123 console.log(typeof num); // number Explicit conversion is usually required when we read a value from a string-based source like a text form but expect a number to be entered.\nIf the string is not a valid number, the result of such a conversion is¬†NaN. For instance:\nlet age = Number(\u0026#34;an arbitrary string instead of a number\u0026#34;); console.log(age); // NaN, conversion failed Numeric conversion rules:\nValue Becomes‚Ä¶ undefined NaN null 0 true¬†and¬†false 1¬†and¬†0 string Whitespaces (includes spaces, tabs¬†\\t, newlines¬†\\n¬†etc.) from the start and end are removed. If the remaining string is empty, the result is¬†0. Otherwise, the number is ‚Äúread‚Äù from the string. An error gives¬†NaN. console.log( Number(\u0026#34; 123 \u0026#34;) ); // 123 console.log( Number(\u0026#34;123z\u0026#34;) ); // NaN (error reading a number at \u0026#34;z\u0026#34;) console.log( Number(true) ); // 1 console.log( Number(false) ); // 0 Boolean Conversion Boolean conversion is the simplest one.\nIt happens in logical operations (later we‚Äôll meet condition tests and other similar things) but can also be performed explicitly with a call to¬†Boolean(value).\nThe conversion rule:\nValues that are intuitively ‚Äúempty‚Äù, like¬†0, an empty string,¬†null,¬†undefined, and¬†NaN, become¬†false. Other values become¬†true. console.log( Boolean(1) ); // true console.log( Boolean(0) ); // false console.log( Boolean(\u0026#34;hello\u0026#34;) ); // true console.log( Boolean(\u0026#34;\u0026#34;) ); // false Please note: the string with zero¬†\u0026quot;0\u0026quot;¬†is¬†true\nSome languages (namely PHP) treat¬†\u0026quot;0\u0026quot;¬†as¬†false. But in JavaScript, a non-empty string is always¬†true.\nalert( Boolean(\u0026#34;0\u0026#34;) ); // true alert( Boolean(\u0026#34; \u0026#34;) ); // spaces, also true (any non-empty string is true) Basic operators, maths We know many operators from school. They are things like addition¬†+, multiplication¬†*, subtraction¬†-, and so on.\nIn this chapter, we‚Äôll start with simple operators, then concentrate on JavaScript-specific aspects, not covered by school arithmetic.\nMaths The following math operations are supported:\nAddition¬†+, Subtraction¬†-, Multiplication¬†*, Division¬†/, Remainder¬†%, Exponentiation¬†**. Remainder The remainder operator¬†%, despite its appearance, is not related to percents.\nThe result of¬†a % b¬†is the¬†remainder¬†of the integer division of¬†a¬†by¬†b.\nFor instance:\nconsole.log(5 % 2); // 1, the remainder of 5 divided by 2 console.log(8 % 3); // 2, the remainder of 8 divided by 3 console.log(8 % 4); // 0, the remainder of 8 divided by 4 Exponentiation: The exponentiation operator¬†a ** b¬†raises¬†a¬†to the power of¬†b.\nIn school maths, we write that as ab.\nFor instance:\nconsole.log(2 ** 2); // 2¬≤ = 4 console.log(2 ** 3); // 2¬≥ = 8 console.log(2 ** 4); // 2‚Å¥ = 16 Just like in maths, the exponentiation operator is defined for non-integer numbers as well.\nFor example, a square root is an exponentiation by ¬Ω:\nconsole.log(4 ** (1 / 2)); // 2 (power of 1/2 is the same as a square root) console.log(8 ** (1 / 3)); // 2 (power of 1/3 is the same as a cubic root) String concatenation with binary Let‚Äôs meet the features of JavaScript operators that are beyond school arithmetics.\nUsually, the plus operator¬†+¬†sums numbers.\nBut, if the binary¬†+¬†is applied to strings, it merges (concatenates) them:\nlet s = \u0026#34;my\u0026#34; + \u0026#34;string\u0026#34;; console.log(s); // mystring Note that if any of the operands is a string, then the other one is converted to a string too.\nconsole.log( \u0026#39;1\u0026#39; + 2 ); // \u0026#34;12\u0026#34; console.log( 2 + \u0026#39;1\u0026#39; ); // \u0026#34;21\u0026#34; See, it doesn‚Äôt matter whether the first operand is a string or the second one.\nHere‚Äôs a more complex example:\nconsole.log(2 + 2 + \u0026#39;1\u0026#39; ); // \u0026#34;41\u0026#34; and not \u0026#34;221\u0026#34; Here, operators work one after another. The first¬†+¬†sums two numbers, so it returns¬†4, then the next¬†+¬†adds the string¬†1¬†to it, so it‚Äôs like¬†4 + '1' = '41'.\nconsole.log(\u0026#39;1\u0026#39; + 2 + 2); // \u0026#34;122\u0026#34; and not \u0026#34;14\u0026#34; The binary¬†+¬†is the only operator that supports strings in such a way. Other arithmetic operators work only with numbers and always convert their operands to numbers.\nHere‚Äôs the demo for subtraction and division:\nconsole.log( 6 - \u0026#39;2\u0026#39; ); // 4, converts \u0026#39;2\u0026#39; to a number console.log( \u0026#39;6\u0026#39; / \u0026#39;2\u0026#39; ); // 3, converts both operands to numbers Numeric conversion, unary The plus¬†+¬†exists in two forms: the binary form that we used above and the unary form.\nThe unary plus or, in other words, the plus operator¬†+¬†applied to a single value, doesn‚Äôt do anything to numbers. But if the operand is not a number, the unary plus converts it into a number.\nFor example:\n// No effect on numbers let x = 1; console.log( +x ); // 1 let y = -2; console.log( +y ); // -2 // Converts non-numbers console.log( +true ); // 1 console.log( +\u0026#34;\u0026#34; ); // 0 It actually does the same thing as¬†Number(...), but is shorter.\nThe binary plus would add them as strings:\nlet apples = \u0026#34;2\u0026#34;; let oranges = \u0026#34;3\u0026#34;; console.log( apples + oranges ); // \u0026#34;23\u0026#34;, the binary plus concatenates strings If we want to treat them as numbers, we need to convert and then sum them:\nlet apples = \u0026#34;2\u0026#34;; let oranges = \u0026#34;3\u0026#34;; // both values converted to numbers before the binary plus console.log( +apples + +oranges ); // 5 // the longer variant // console.log( Number(apples) + Number(oranges) ); // 5 From a mathematician‚Äôs standpoint, the abundance of pluses may seem strange. But from a programmer‚Äôs standpoint, there‚Äôs nothing special: unary pluses are applied first, they convert strings to numbers, and then the binary plus sums them up.\nOperator Precedence: If an expression has more than one operator, the execution order is defined by their¬†precedence, or, in other words, the default priority order of operators.\nPrecedence Name Sign ‚Ä¶ ‚Ä¶ ‚Ä¶ 14 unary plus + 14 unary negation - 13 exponentiation ** 12 multiplication * 12 division / 11 addition + 11 subtraction - ‚Ä¶ ‚Ä¶ ‚Ä¶ 2 assignment = ‚Ä¶ ‚Ä¶ ‚Ä¶ Assignment Let‚Äôs note that an assignment¬†=¬†is also an operator. It is listed in the precedence table with the very low priority of¬†2.\nThat‚Äôs why, when we assign a variable, like¬†x = 2 * 2 + 1, the calculations are done first and then the¬†=¬†is evaluated, storing the result in¬†x.\nlet x = 2 * 2 + 1; console.log( x ); // 5 Assignment = returns a value The fact of¬†=¬†being an operator, not a ‚Äúmagical‚Äù language construct has an interesting implication.\nAll operators in JavaScript return a value. That‚Äôs obvious for¬†+¬†and¬†-, but also true for¬†=.\nThe call¬†x = value¬†writes the¬†value¬†into¬†x¬†and then returns it.\nHere‚Äôs a demo that uses an assignment as part of a more complex expression:\nlet a = 1; let b = 2; let c = 3 - (a = b + 1); console.log( a ); // 3 console.log c ); // 0 In the example above, the result of expression¬†(a = b + 1)¬†is the value which was assigned to¬†a¬†(that is¬†3). It is then used for further evaluations.\nFunny code, isn‚Äôt it? We should understand how it works, because sometimes we see it in JavaScript libraries.\nAlthough, please don‚Äôt write the code like that. Such tricks definitely don‚Äôt make code clearer or readable.\nModify-in-place We often need to apply an operator to a variable and store the new result in that same variable.\nFor example:\nlet n = 2; n = n + 5; n = n * 2; This notation can be shortened using the operators¬†+=¬†and¬†*=:\nlet n = 2; n += 5; // now n = 7 (same as n = n + 5) n *= 2; // now n = 14 (same as n = n * 2) alert( n ); // 14 Increment/decrement Increasing or decreasing a number by one is among the most common numerical operations.\nSo, there are special operators for it:\nIncrement¬†++¬†increases a variable by 1: let counter = 2; counter++; // works the same as counter = counter + 1, but is shorter alert( counter ); // 3 Decrement¬†--¬†decreases a variable by 1: let counter = 2; counter--; // works the same as counter = counter - 1, but is shorter alert( counter ); // 1 Important: Increment/decrement can only be applied to variables. Trying to use it on a value like¬†5++¬†will give an error.\nThe operators¬†++¬†and¬†--¬†can be placed either before or after a variable.\nWhen the operator goes after the variable, it is in ‚Äúpostfix form‚Äù:¬†counter++. The ‚Äúprefix form‚Äù is when the operator goes before the variable:¬†++counter. Both of these statements do the same thing: increase¬†counter¬†by¬†1.\nIs there any difference? Yes, but we can only see it if we use the returned value of¬†++/--.\nLet‚Äôs clarify. As we know, all operators return a value. Increment/decrement is no exception. The prefix form returns the new value while the postfix form returns the old value (prior to increment/decrement).\nTo see the difference, here‚Äôs an example:\nlet counter = 1; let a = ++counter; // (*) alert(a); // 2 In the line¬†(*), the¬†prefix¬†form¬†++counter¬†increments¬†counter¬†and returns the new value,¬†2. So, the¬†alert¬†shows¬†2.\nNow, let‚Äôs use the postfix form:\nlet counter = 1; let a = counter++; // (*) changed ++counter to counter++ alert(a); // 1 In the line¬†(*), the¬†postfix¬†form¬†counter++¬†also increments¬†counter¬†but returns the¬†old¬†value (prior to increment). So, the¬†alert¬†shows¬†1.\nIncrement/decrement among other operators\nThe operators¬†++/--¬†can be used inside expressions as well. Their precedence is higher than most other arithmetical operations.\nFor instance:\nlet counter = 1; alert( 2 * ++counter ); // 4 Compare With:\nlet counter = 1; alert( 2 * counter++ ); // 2, because counter++ returns the \u0026#34;old\u0026#34; value Though technically okay, such notation usually makes code less readable. One line does multiple things ‚Äì not good.\nWhile reading code, a fast ‚Äúvertical‚Äù eye-scan can easily miss something like¬†counter++¬†and it won‚Äôt be obvious that the variable increased.\nWe advise a style of ‚Äúone line ‚Äì one action‚Äù:\nlet counter = 1; alert( 2 * counter ); counter++; Bitwise operators Bitwise operators treat arguments as 32-bit integer numbers and work on the level of their binary representation.\nThese operators are not JavaScript-specific. They are supported in most programming languages.\nThe list of operators:\nAND (¬†\u0026amp;¬†) OR (¬†|¬†) XOR (¬†^¬†) NOT (¬†~¬†) LEFT SHIFT (¬†\u0026lt;\u0026lt;¬†) RIGHT SHIFT (¬†\u0026gt;\u0026gt;¬†) ZERO-FILL RIGHT SHIFT (¬†\u0026gt;\u0026gt;\u0026gt;¬†) These operators are used very rarely, when we need to fiddle with numbers on the very lowest (bitwise) level. We won‚Äôt need these operators any time soon, as web development has little use of them, but in some special areas, such as cryptography, they are useful. You can read the¬†Bitwise Operators¬†chapter on MDN when a need arises.\nComma The comma operator¬†,¬†is one of the rarest and most unusual operators. Sometimes, it‚Äôs used to write shorter code, so we need to know it in order to understand what‚Äôs going on.\nThe comma operator allows us to evaluate several expressions, dividing them with a comma¬†,. Each of them is evaluated but only the result of the last one is returned.\nlet a = (1 + 2, 3 + 4); alert( a ); // 7 (the result of 3 + 4) Here, the first expression¬†1 + 2¬†is evaluated and its result is thrown away. Then,¬†3 + 4¬†is evaluated and returned as the result.\nComma has a very low precedence\nPlease note that the comma operator has very low precedence, lower than¬†=, so parentheses are important in the example above.\nWithout them:¬†a = 1 + 2, 3 + 4¬†evaluates¬†+¬†first, summing the numbers into¬†a = 3, 7, then the assignment operator¬†=¬†assigns¬†a = 3, and the rest is ignored. It‚Äôs like¬†(a = 1 + 2), 3 + 4.\nWhy do we need an operator that throws away everything except the last expression?\nSometimes, people use it in more complex constructs to put several actions in one line.\nFor example:\n// three operations in one line for (a = 1, b = 3, c = a * b; a \u0026lt; 10; a++) { ... } Comparisons We know many comparison operators from maths.\nIn JavaScript they are written like this:\nGreater/less than:¬†a \u0026gt; b,¬†a \u0026lt; b. Greater/less than or equals:¬†a \u0026gt;= b,¬†a \u0026lt;= b. Equals:¬†a == b, please note the double equality sign¬†==¬†means the equality test, while a single one¬†a = b¬†means an assignment. Not equals: In maths the notation is¬†‚â†, but in JavaScript it‚Äôs written as¬†a != b. In this article we‚Äôll learn more about different types of comparisons, how JavaScript makes them, including important peculiarities.\nAt the end you‚Äôll find a good recipe to avoid ‚ÄúJavaScript quirks‚Äù-related issues.\nBoolean is the result All comparison operators return a boolean value:\ntrue¬†‚Äì means ‚Äúyes‚Äù, ‚Äúcorrect‚Äù or ‚Äúthe truth‚Äù. false¬†‚Äì means ‚Äúno‚Äù, ‚Äúwrong‚Äù or ‚Äúnot the truth‚Äù. For example:\nconsole.log( 2 \u0026gt; 1 ); // true (correct) console.log( 2 == 1 ); // false (wrong) console.log( 2 != 1 ); // true (correct) A comparison result can be assigned to a variable, just like any value:\nlet result = 5 \u0026gt; 4; // assign the result of the comparison console.log( result ); // true String comparison To see whether a string is greater than another, JavaScript uses the so-called ‚Äúdictionary‚Äù or ‚Äúlexicographical‚Äù order.\nIn other words, strings are compared letter-by-letter.\nFor example:\nconsole.log( \u0026#39;Z\u0026#39; \u0026gt; \u0026#39;A\u0026#39; ); // true console.log( \u0026#39;Glow\u0026#39; \u0026gt; \u0026#39;Glee\u0026#39; ); // true console.log( \u0026#39;Bee\u0026#39; \u0026gt; \u0026#39;Be\u0026#39; ); // true The algorithm to compare two strings is simple:\nCompare the first character of both strings. If the first character from the first string is greater (or less) than the other string‚Äôs, then the first string is greater (or less) than the second. We‚Äôre done. Otherwise, if both strings‚Äô first characters are the same, compare the second characters the same way. Repeat until the end of either string. If both strings end at the same length, then they are equal. Otherwise, the longer string is greater. In the first example above, the comparison¬†'Z' \u0026gt; 'A'¬†gets to a result at the first step.\nThe second comparison¬†'Glow'¬†and¬†'Glee'¬†needs more steps as strings are compared character-by-character:\nG¬†is the same as¬†G. l¬†is the same as¬†l. o¬†is greater than¬†e. Stop here. The first string is greater. Not a real dictionary, but Unicode order\nThe comparison algorithm given above is roughly equivalent to the one used in dictionaries or phone books, but it‚Äôs not exactly the same.\nFor instance, case matters. A capital letter¬†\u0026quot;A\u0026quot;¬†is not equal to the lowercase¬†\u0026quot;a\u0026quot;. Which one is greater? The lowercase¬†\u0026quot;a\u0026quot;. Why? Because the lowercase character has a greater index in the internal encoding table JavaScript uses (Unicode). We‚Äôll get back to specific details and consequences of this in the chapter¬†Strings.\nComparison of different types When comparing values of different types, JavaScript converts the values to numbers.\nFor example:\nconsole.log( \u0026#39;2\u0026#39; \u0026gt; 1 ); // true, string \u0026#39;2\u0026#39; becomes a number 2 console.log( \u0026#39;01\u0026#39; == 1 ); // true, string \u0026#39;01\u0026#39; becomes a number 1 For boolean values,¬†true¬†becomes¬†1¬†and¬†false¬†becomes¬†0.\nFor example:\nalert( true == 1 ); // true alert( false == 0 ); // true A funny consequence\nIt is possible that at the same time:\nTwo values are equal. One of them is¬†true¬†as a boolean and the other one is¬†false¬†as a boolean. For example:\nlet a = 0; alert( Boolean(a) ); // false let b = \u0026#34;0\u0026#34;; alert( Boolean(b) ); // true alert(a == b); // true! From JavaScript‚Äôs standpoint, this result is quite normal. An equality check converts values using the numeric conversion (hence¬†\u0026quot;0\u0026quot;¬†becomes¬†0), while the explicit¬†Boolean¬†conversion uses another set of rules.\nStrict equality A regular equality check¬†==¬†has a problem. It cannot differentiate¬†0¬†from¬†false:\nalert( 0 == false ); // true The same thing happens with an empty string:\nalert( \u0026#39;\u0026#39; == false ); // true This happens because operands of different types are converted to numbers by the equality operator¬†==. An empty string, just like¬†false, becomes a zero.\nWhat to do if we‚Äôd like to differentiate¬†0¬†from¬†false?\nA strict equality operator¬†===¬†checks the equality without type conversion.\nIn other words, if¬†a¬†and¬†b¬†are of different types, then¬†a === b¬†immediately returns¬†false¬†without an attempt to convert them.\nLet‚Äôs try it:\nalert( 0 === false ); // false, because the types are different There is also a ‚Äústrict non-equality‚Äù operator¬†!==¬†analogous to¬†!=.\nThe strict equality operator is a bit longer to write, but makes it obvious what‚Äôs going on and leaves less room for errors.\nComparison with null and undefined There‚Äôs a non-intuitive behavior when¬†null¬†or¬†undefined¬†are compared to other values.\nFor a strict equality check¬†===\nThese values are different, because each of them is a different type.\nalert( null === undefined ); // false For a non-strict check¬†==\nThere‚Äôs a special rule. These two are a ‚Äúsweet couple‚Äù: they equal each other (in the sense of¬†==), but not any other value.\nFor maths and other comparisons¬†\u0026lt; \u0026gt; \u0026lt;= \u0026gt;=\nnull/undefined¬†are converted to numbers:¬†null¬†becomes¬†0, while¬†undefined¬†becomes¬†NaN.\nNow let‚Äôs see some funny things that happen when we apply these rules. And, what‚Äôs more important, how to not fall into a trap with them.\nStrange result: null vs 0 Let‚Äôs compare¬†null¬†with a zero:\nalert( null \u0026gt; 0 ); // (1) false alert( null == 0 ); // (2) false alert( null \u0026gt;= 0 ); // (3) true Mathematically, that‚Äôs strange. The last result states that ‚Äúnull¬†is greater than or equal to zero‚Äù, so in one of the comparisons above it must be¬†true, but they are both false.\nThe reason is that an equality check¬†==¬†and comparisons¬†\u0026gt; \u0026lt; \u0026gt;= \u0026lt;=¬†work differently. Comparisons convert¬†null¬†to a number, treating it as¬†0. That‚Äôs why (3)¬†null \u0026gt;= 0¬†is true and (1)¬†null \u0026gt; 0¬†is false.\nOn the other hand, the equality check¬†==¬†for¬†undefined¬†and¬†null¬†is defined such that, without any conversions, they equal each other and don‚Äôt equal anything else. That‚Äôs why (2)¬†null == 0¬†is false.\nAn incomparable undefined The value¬†undefined¬†shouldn‚Äôt be compared to other values:\nalert( undefined \u0026gt; 0 ); // false (1) alert( undefined \u0026lt; 0 ); // false (2) alert( undefined == 0 ); // false (3) Why does it dislike zero so much? Always false!\nWe get these results because:\nComparisons¬†(1)¬†and¬†(2)¬†return¬†false¬†because¬†undefined¬†gets converted to¬†NaN¬†and¬†NaN¬†is a special numeric value which returns¬†false¬†for all comparisons. The equality check¬†(3)¬†returns¬†false¬†because¬†undefined¬†only equals¬†null,¬†undefined, and no other value. Avoid Problems Why did we go over these examples? Should we remember these peculiarities all the time? Well, not really. Actually, these tricky things will gradually become familiar over time, but there‚Äôs a solid way to avoid problems with them:\nTreat any comparison with¬†undefined/null¬†except the strict equality¬†===¬†with exceptional care. Don‚Äôt use comparisons¬†\u0026gt;= \u0026gt; \u0026lt; \u0026lt;=¬†with a variable which may be¬†null/undefined, unless you‚Äôre really sure of what you‚Äôre doing. If a variable can have these values, check for them separately. Conditional branching: if, \u0026lsquo;?\u0026rsquo; Sometimes, we need to perform different actions based on different conditions.\nTo do that, we can use the¬†if¬†statement and the conditional operator¬†?, that‚Äôs also called a ‚Äúquestion mark‚Äù operator.\nThe ‚Äúif‚Äù statement The¬†if(...)¬†statement evaluates a condition in parentheses and, if the result is¬†true, executes a block of code.\nFor example:\nlet year = prompt(\u0026#34;In which year was ECMAScript-2015 specification published?\u0026#34;,\u0026#34;\u0026#34;); if (year == 2015) alert(\u0026#34;You are right!\u0026#34;); In the example above, the condition is a simple equality check (year == 2015), but it can be much more complex.\nIf we want to execute more than one statement, we have to wrap our code block inside curly braces:\nif (year == 2015) { alert( \u0026#34;That\u0026#39;s correct!\u0026#34; ); alert( \u0026#34;You\u0026#39;re so smart!\u0026#34; ); } We recommend wrapping your code block with curly braces¬†{}¬†every time you use an¬†if¬†statement, even if there is only one statement to execute. Doing so improves readability\nBoolean conversion The¬†if (‚Ä¶)¬†statement evaluates the expression in its parentheses and converts the result to a boolean.\nLet‚Äôs recall the conversion rules from the chapter¬†Type Conversions:\nA number¬†0, an empty string¬†\u0026quot;\u0026quot;,¬†null,¬†undefined, and¬†NaN¬†all become¬†false. Because of that they are called ‚Äúfalsy‚Äù values. Other values become¬†true, so they are called ‚Äútruthy‚Äù. So, the code under this condition would never execute:\nif (0) { // 0 is falsy ... } ‚Ä¶and inside this condition ‚Äì it always will:\nif (1) { // 1 is truthy ... } We can also pass a pre-evaluated boolean value to¬†if, like this:\nlet cond = (year == 2015); // equality evaluates to true or false if (cond) { ... } The ‚Äúelse‚Äù clause The if statement may contain an optional else block. It executes when the condition is falsy.\nFor example:\nlet year = prompt(\u0026#39;In which year was the ECMAScript-2015 specification published?\u0026#39;, \u0026#39;\u0026#39;); if (year == 2015) { alert( \u0026#39;You guessed it right!\u0026#39; ); } else { alert( \u0026#39;How can you be so wrong?\u0026#39; ); // any value except 2015 } Several conditions: ‚Äúelse if‚Äù Sometimes, we‚Äôd like to test several variants of a condition. The else if clause lets us do that.\nFor example:\nlet year = prompt(\u0026#39;In which year was the ECMAScript-2015 specification published?\u0026#39;, \u0026#39;\u0026#39;); if (year \u0026lt; 2015) { alert( \u0026#39;Too early...\u0026#39; ); } else if (year \u0026gt; 2015) { alert( \u0026#39;Too late\u0026#39; ); } else { alert( \u0026#39;Exactly!\u0026#39; ); } In the code above, JavaScript first checks¬†year \u0026lt; 2015. If that is falsy, it goes to the next condition¬†year \u0026gt; 2015. If that is also falsy, it shows the last¬†alert.\nThere can be more¬†else if¬†blocks. The final¬†else¬†is optional.\nConditional operator ‚Äò?‚Äô Sometimes, we need to assign a variable depending on a condition.\nFor instance:\nlet accessAllowed; let age = prompt(\u0026#39;How old are you?\u0026#39;, \u0026#39;\u0026#39;); if (age \u0026gt; 18) { accessAllowed = true; } else { accessAllowed = false; } alert(accessAllowed); The so-called ‚Äúconditional‚Äù or ‚Äúquestion mark‚Äù operator lets us do that in a shorter and simpler way.\nThe operator is represented by a question mark ?. Sometimes it‚Äôs called ‚Äúternary‚Äù, because the operator has three operands. It is actually the one and only operator in JavaScript which has that many.\nThe syntax is:\nlet result = condition ? value1 : value2; The¬†condition¬†is evaluated: if it‚Äôs truthy then¬†value1¬†is returned, otherwise ‚Äì¬†value2.\nFor example:\nlet accessAllowed = (age \u0026gt; 18) ? true : false; Technically, we can omit the parentheses around¬†age \u0026gt; 18. The question mark operator has a low precedence, so it executes after the comparison¬†\u0026gt;.\nThis example will do the same thing as the previous one:\n// the comparison operator \u0026#34;age \u0026gt; 18\u0026#34; executes first anyway // (no need to wrap it into parentheses) let accessAllowed = age \u0026gt; 18 ? true : false; But parentheses make the code more readable, so we recommend using them.\nPlease note: In the example above, you can avoid using the question mark operator because the comparison itself returns¬†true/false:\n// the same let accessAllowed = age \u0026gt; 18; Multiple ‚Äò?‚Äô A sequence of question mark operators¬†?¬†can return a value that depends on more than one condition.\nFor instance:\nlet age = prompt(\u0026#34;age?\u0026#34;, 18); let message = age \u0026lt; 3 ? \u0026#34;Hi, baby!\u0026#34; : age \u0026lt; 18 ? \u0026#34;Hello!\u0026#34; : age \u0026lt; 100 ? \u0026#34;Greetings!\u0026#34; : \u0026#34;What an unusual age!\u0026#34;; alert(message); It may be difficult at first to grasp what‚Äôs going on. But after a closer look, we can see that it‚Äôs just an ordinary sequence of tests:\nThe first question mark checks whether¬†age \u0026lt; 3. If true ‚Äì it returns¬†'Hi, baby!'. Otherwise, it continues to the expression after the colon ‚Äú:‚Äù, checking¬†age \u0026lt; 18. If that‚Äôs true ‚Äì it returns¬†'Hello!'. Otherwise, it continues to the expression after the next colon ‚Äú:‚Äù, checking¬†age \u0026lt; 100. If that‚Äôs true ‚Äì it returns¬†'Greetings!'. Otherwise, it continues to the expression after the last colon ‚Äú:‚Äù, returning¬†'What an unusual age!'. Here‚Äôs how this looks using¬†if..else:\nif (age \u0026lt; 3) { message = \u0026#39;Hi, baby!\u0026#39;; } else if (age \u0026lt; 18) { message = \u0026#39;Hello!\u0026#39;; } else if (age \u0026lt; 100) { message = \u0026#39;Greetings!\u0026#39;; } else { message = \u0026#39;What an unusual age!\u0026#39;; } Logical operators There are four logical operators in JavaScript:¬†||¬†(OR),¬†\u0026amp;\u0026amp;¬†(AND),¬†!¬†(NOT),¬†??¬†(Nullish Coalescing). Here we cover the first three, the¬†??¬†operator is in the next article.\nAlthough they are called ‚Äúlogical‚Äù, they can be applied to values of any type, not only boolean. Their result can also be of any type.\nLet‚Äôs see the details.\n|| (OR) The ‚ÄúOR‚Äù operator is represented with two vertical line symbols:\nresult = a || b; In classical programming, the logical OR is meant to manipulate boolean values only. If any of its arguments are¬†true, it returns¬†true, otherwise it returns¬†false.\nIn JavaScript, the operator is a little bit trickier and more powerful. But first, let‚Äôs see what happens with boolean values.\nThere are four possible logical combinations:\nconsole.log( true || true ); // true console.log( false || true ); // true console.log( true || false ); // true console.log( false || false ); // false As we can see, the result is always¬†true¬†except for the case when both operands are¬†false.\nIf an operand is not a boolean, it‚Äôs converted to a boolean for the evaluation.\nFor instance, the number¬†1¬†is treated as¬†true, the number¬†0¬†as¬†false:\nif (1 || 0) { // works just like if( true || false ) alert( \u0026#39;truthy!\u0026#39; ); } Most of the time, OR¬†||¬†is used in an¬†if¬†statement to test if¬†any¬†of the given conditions is¬†true.\nFor example:\nlet hour = 9; if (hour \u0026lt; 10 || hour \u0026gt; 18) { alert( \u0026#39;The office is closed.\u0026#39; ); } We can pass more conditions:\nlet hour = 12; let isWeekend = true; if (hour \u0026lt; 10 || hour \u0026gt; 18 || isWeekend) { alert( \u0026#39;The office is closed.\u0026#39; ); // it is the weekend } OR \u0026ldquo;||\u0026rdquo; finds the first truthy value The logic described above is somewhat classical. Now, let‚Äôs bring in the ‚Äúextra‚Äù features of JavaScript.\nThe extended algorithm works as follows.\nGiven multiple OR‚Äôed values:\nresult = value1 || value2 || value3; The OR || operator does the following:\nEvaluates operands from left to right. For each operand, converts it to boolean. If the result is true, stops and returns the original value of that operand. If all operands have been evaluated (i.e. all were false), returns the last operand. A value is returned in its original form, without the conversion.\nIn other words, a chain of OR || returns the first truthy value or the last one if no truthy value is found.\nFor instance:\nconsole.log(1 || 0); // 1 (1 is truthy) console.log(null || 1); // 1 (1 is the first truthy value) console.log(null || 0 || 1); // 1 (the first truthy value) console.log(undefined || null || 0); // 0 (all falsy, returns the last value) This leads to some interesting usage compared to a ‚Äúpure, classical, boolean-only OR‚Äù.\nGetting the first truthy value from a list of variables or expressions.\nFor instance, we have firstName, lastName and nickName variables, all optional (i.e. can be undefined or have falsy values).\nLet‚Äôs use OR || to choose the one that has the data and show it (or \u0026ldquo;Anonymous\u0026rdquo; if nothing set):\nlet firstName = \u0026#34;\u0026#34;; let lastName = \u0026#34;\u0026#34;; let nickName = \u0026#34;SuperCoder\u0026#34;; console.log( firstName || lastName || nickName || \u0026#34;Anonymous\u0026#34;); // SuperCoder If all variables were falsy,¬†\u0026quot;Anonymous\u0026quot;¬†would show up.\nShort-circuit evaluation.\nAnother feature of OR¬†||¬†operator is the so-called ‚Äúshort-circuit‚Äù evaluation.\nIt means that¬†||¬†processes its arguments until the first truthy value is reached, and then the value is returned immediately, without even touching the other argument.\nThe importance of this feature becomes obvious if an operand isn‚Äôt just a value, but an expression with a side effect, such as a variable assignment or a function call.\nIn the example below, only the second message is printed:\ntrue || alert(\u0026#34;not printed\u0026#34;); false || alert(\u0026#34;printed\u0026#34;); In the first line, the OR¬†||¬†operator stops the evaluation immediately upon seeing¬†true, so the¬†alert¬†isn‚Äôt run.\nSometimes, people use this feature to execute commands only if the condition on the left part is falsy.\n\u0026amp;\u0026amp; (AND) The AND operator is represented with two ampersands¬†\u0026amp;\u0026amp;:\nresult = a \u0026amp;\u0026amp; b; In classical programming, AND returns¬†true¬†if both operands are truthy and¬†false¬†otherwise:\nconsole.log( true \u0026amp;\u0026amp; true ); // true console.log( false \u0026amp;\u0026amp; true ); // false console.log( true \u0026amp;\u0026amp; false ); // false console.log( false \u0026amp;\u0026amp; false ); // false An example with¬†if:\nlet hour = 12; let minute = 30; if (hour == 12 \u0026amp;\u0026amp; minute == 30) { alert( \u0026#39;The time is 12:30\u0026#39; ); } Just as with OR, any value is allowed as an operand of AND:\nif (1 \u0026amp;\u0026amp; 0) { // evaluated as true \u0026amp;\u0026amp; false alert( \u0026#34;won\u0026#39;t work, because the result is falsy\u0026#34; ); } AND ‚Äú\u0026amp;\u0026amp;‚Äù finds the first falsy value Given multiple AND‚Äôed values:\nresult = value1 \u0026amp;\u0026amp; value2 \u0026amp;\u0026amp; value3; The AND¬†\u0026amp;\u0026amp;¬†operator does the following:\nEvaluates operands from left to right. For each operand, converts it to a boolean. If the result is¬†false, stops and returns the original value of that operand. If all operands have been evaluated (i.e. all were truthy), returns the last operand. In other words, AND returns the first falsy value or the last value if none were found.\nThe rules above are similar to OR. The difference is that AND returns the first¬†falsy¬†value while OR returns the first¬†truthy¬†one.\nExamples:\n// if the first operand is truthy, // AND returns the second operand: alert( 1 \u0026amp;\u0026amp; 0 ); // 0 alert( 1 \u0026amp;\u0026amp; 5 ); // 5 // if the first operand is falsy, // AND returns it. The second operand is ignored alert( null \u0026amp;\u0026amp; 5 ); // null alert( 0 \u0026amp;\u0026amp; \u0026#34;no matter what\u0026#34; ); // 0 We can also pass several values in a row. See how the first falsy one is returned:\nalert( 1 \u0026amp;\u0026amp; 2 \u0026amp;\u0026amp; null \u0026amp;\u0026amp; 3 ); // null When all values are truthy, the last value is returned:\nalert( 1 \u0026amp;\u0026amp; 2 \u0026amp;\u0026amp; 3 ); // 3, the last one Precedence of AND \u0026amp;\u0026amp; is higher than OR || The precedence of AND \u0026amp;\u0026amp; operator is higher than OR ||.\nSo the code a \u0026amp;\u0026amp; b || c \u0026amp;\u0026amp; d is essentially the same as if the \u0026amp;\u0026amp; expressions were in parentheses: (a \u0026amp;\u0026amp; b) || (c \u0026amp;\u0026amp; d).\nDon‚Äôt replace¬†if¬†with¬†||¬†or¬†\u0026amp;\u0026amp;\nSometimes, people use the AND¬†\u0026amp;\u0026amp;¬†operator as a ‚Äúshorter way to write¬†if‚Äù.\nFor instance:\nlet x = 1; (x \u0026gt; 0) \u0026amp;\u0026amp; alert( \u0026#39;Greater than zero!\u0026#39; ); The action in the right part of¬†\u0026amp;\u0026amp;¬†would execute only if the evaluation reaches it. That is, only if¬†(x \u0026gt; 0)¬†is true.\nSo we basically have an analogue for:\nlet x = 1; if (x \u0026gt; 0) alert( \u0026#39;Greater than zero!\u0026#39; ); Although, the variant with¬†\u0026amp;\u0026amp;¬†appears shorter,¬†if¬†is more obvious and tends to be a little bit more readable. So we recommend using every construct for its purpose: use¬†if¬†if we want¬†if¬†and use¬†\u0026amp;\u0026amp;¬†if we want AND.\n! (NOT) The boolean NOT operator is represented with an exclamation sign !.\nThe syntax is pretty simple:\nresult = !value; The operator accepts a single argument and does the following:\nConverts the operand to boolean type: true/false. Returns the inverse value.\nFor instance:\nalert( !true ); // false alert( !0 ); // true A double NOT¬†!!¬†is sometimes used for converting a value to boolean type:\nalert( !!\u0026#34;non-empty string\u0026#34; ); // true alert( !!null ); // false That is, the first NOT converts the value to boolean and returns the inverse, and the second NOT inverses it again. In the end, we have a plain value-to-boolean conversion.\nThere‚Äôs a little more verbose way to do the same thing ‚Äì a built-in¬†Boolean¬†function:\nalert( Boolean(\u0026#34;non-empty string\u0026#34;) ); // true alert( Boolean(null) ); // false The precedence of NOT¬†!¬†is the highest of all logical operators, so it always executes first, before¬†\u0026amp;\u0026amp;¬†or¬†||.\nNullish coalescing operator \u0026lsquo;??\u0026rsquo; The nullish coalescing operator is written as two question marks¬†??.\nAs it treats¬†null¬†and¬†undefined¬†similarly, we‚Äôll use a special term here, in this article. For brevity, we‚Äôll say that a value is ‚Äúdefined‚Äù when it‚Äôs neither¬†null¬†nor¬†undefined.\nThe result of¬†a ?? b¬†is:\nif¬†a¬†is defined, then¬†a, if¬†a¬†isn‚Äôt defined, then¬†b. In other words,¬†??¬†returns the first argument if it‚Äôs not¬†null/undefined. Otherwise, the second one.\nThe nullish coalescing operator isn‚Äôt anything completely new. It‚Äôs just a nice syntax to get the first ‚Äúdefined‚Äù value of the two.\nWe can rewrite¬†result = a ?? b¬†using the operators that we already know, like this:\nresult = (a !== null \u0026amp;\u0026amp; a !== undefined) ? a : b; Now it should be absolutely clear what ?? does. Let‚Äôs see where it helps.\nThe common use case for ?? is to provide a default value.\nFor example, here we show user if its value isn‚Äôt null/undefined, otherwise Anonymous:\nlet user; alert(user ?? \u0026#34;Anonymous\u0026#34;); // Anonymous (user is undefined) Here‚Äôs the example with¬†user¬†assigned to a name:\nlet user = \u0026#34;John\u0026#34;; alert(user ?? \u0026#34;Anonymous\u0026#34;); // John (user is not null/undefined) We can also use a sequence of¬†??¬†to select the first value from a list that isn‚Äôt¬†null/undefined.\nLet‚Äôs say we have a user‚Äôs data in variables¬†firstName,¬†lastName¬†or¬†nickName. All of them may be not defined, if the user decided not to fill in the corresponding values.\nWe‚Äôd like to display the user name using one of these variables, or show ‚ÄúAnonymous‚Äù if all of them are¬†null/undefined.\nLet‚Äôs use the¬†??¬†operator for that:\nlet firstName = null; let lastName = null; let nickName = \u0026#34;Supercoder\u0026#34;; // shows the first defined value: alert(firstName ?? lastName ?? nickName ?? \u0026#34;Anonymous\u0026#34;); // Supercoder Loops: while and for The ‚Äúwhile‚Äù loop The¬†while¬†loop has the following syntax:\nwhile (condition) { // code // so-called \u0026#34;loop body\u0026#34; } While the condition is truthy, the code from the loop body is executed.\nFor instance, the loop below outputs i while i \u0026lt; 3:\nlet i = 0; while (i \u0026lt; 3) { // shows 0, then 1, then 2 alert( i ); i++; } A single execution of the loop body is called¬†an iteration. The loop in the example above makes three iterations.\nIf¬†i++¬†was missing from the example above, the loop would repeat (in theory) forever. In practice, the browser provides ways to stop such loops, and in server-side JavaScript, we can kill the process.\nAny expression or variable can be a loop condition, not just comparisons: the condition is evaluated and converted to a boolean by¬†while.\nFor instance, a shorter way to write¬†while (i != 0)¬†is¬†while (i):\nlet i = 3; while (i) { // when i becomes 0, the condition becomes falsy, and the loop stops alert( i ); i--; } Curly braces are not required for a single-line body\nIf the loop body has a single statement, we can omit the curly braces¬†{‚Ä¶}:\nlet i = 3; while (i) alert(i--); The ‚Äúdo‚Ä¶while‚Äù loop The condition check can be moved below the loop body using the do..while syntax:\ndo { // loop body } while (condition); The loop will first execute the body, then check the condition, and, while it‚Äôs truthy, execute it again and again.\nlet i = 0; do { alert( i ); i++; } while (i \u0026lt; 3); This form of syntax should only be used when you want the body of the loop to execute¬†at least once¬†regardless of the condition being truthy. Usually, the other form is preferred:¬†while(‚Ä¶) {‚Ä¶}.\nThe ‚Äúfor‚Äù loop The for loop is more complex, but it‚Äôs also the most commonly used loop.\nIt looks like this:\nfor (begin; condition; step) { // ... loop body ... } Let‚Äôs learn the meaning of these parts by example. The loop below runs alert(i) for i from 0 up to (but not including) 3:\nfor (let i = 0; i \u0026lt; 3; i++) { // shows 0, then 1, then 2 alert(i); } Let‚Äôs examine the¬†for¬†statement part-by-part:\npart begin let i = 0 executes once upon entering the loop condition i\u0026lt; 3 Checked before every loop iteration. If false, the loop stops body alert(i) Run again and again while the condition is truthy step i++ Executes after the body on each iteration. The general loop algorithm works like this: Run begin ‚Üí (if condition ‚Üí run body and run step) ‚Üí (if condition ‚Üí run body and run step) ‚Üí (if condition ‚Üí run body and run step) ‚Üí ... That is,¬†begin¬†executes once, and then it iterates: after each¬†condition¬†test,¬†body¬†and¬†step¬†are executed.\nIf you are new to loops, it could help to go back to the example and reproduce how it runs step-by-step on a piece of paper.\nHere‚Äôs exactly what happens in our case:\n// for (let i = 0; i \u0026lt; 3; i++) alert(i) // run begin let i = 0 // if condition ‚Üí run body and run step if (i \u0026lt; 3) { alert(i); i++ } // if condition ‚Üí run body and run step if (i \u0026lt; 3) { alert(i); i++ } // if condition ‚Üí run body and run step if (i \u0026lt; 3) { alert(i); i++ } // ...finish, because now i == 3 Breaking the loop Normally, a loop exits when its condition becomes falsy.\nBut we can force the exit at any time using the special¬†break¬†directive.\nFor example, the loop below asks the user for a series of numbers, ‚Äúbreaking‚Äù when no number is entered:\nlet sum = 0; while (true) { let value = +prompt(\u0026#34;Enter a number\u0026#34;, \u0026#39;\u0026#39;); if (!value) break; // (*) sum += value; } alert( \u0026#39;Sum: \u0026#39; + sum ); The¬†break¬†directive is activated at the line¬†(*)¬†if the user enters an empty line or cancels the input. It stops the loop immediately, passing control to the first line after the loop. Namely,¬†alert.\nThe combination ‚Äúinfinite loop +¬†break¬†as needed‚Äù is great for situations when a loop‚Äôs condition must be checked not in the beginning or end of the loop, but in the middle or even in several places of its body.\nContinue to the next iteration The¬†continue¬†directive is a ‚Äúlighter version‚Äù of¬†break. It doesn‚Äôt stop the whole loop. Instead, it stops the current iteration and forces the loop to start a new one (if the condition allows).\nWe can use it if we‚Äôre done with the current iteration and would like to move on to the next one.\nThe loop below uses¬†continue¬†to output only odd values:\nfor (let i = 0; i \u0026lt; 10; i++) { // if true, skip the remaining part of the body if (i % 2 == 0) continue; alert(i); // 1, then 3, 5, 7, 9 } For even values of¬†i, the¬†continue¬†directive stops executing the body and passes control to the next iteration of¬†for¬†(with the next number). So the¬†alert¬†is only called for odd values.\nNo¬†break/continue¬†to the right side of ‚Äò?‚Äô\nPlease note that syntax constructs that are not expressions cannot be used with the ternary operator¬†?. In particular, directives such as¬†break/continue¬†aren‚Äôt allowed there.\nFor example, if we take this code:\nif (i \u0026gt; 5) { alert(i); } else { continue; } ‚Ä¶and rewrite it using a question mark:\n(i \u0026gt; 5) ? alert(i) : continue; // continue isn\u0026#39;t allowed here ‚Ä¶it stops working: there‚Äôs a syntax error.\nThis is just another reason not to use the question mark operator¬†?¬†instead of¬†if.\nLabels for break/continue Sometimes we need to break out from multiple nested loops at once.\nFor example, in the code below we loop over¬†i¬†and¬†j, prompting for the coordinates¬†(i, j)¬†from¬†(0,0)¬†to¬†(2,2):\nfor (let i = 0; i \u0026lt; 3; i++) { for (let j = 0; j \u0026lt; 3; j++) { let input = prompt(`Value at coords (${i},${j})`, \u0026#39;\u0026#39;); // what if we want to exit from here to Done (below)? } } alert(\u0026#39;Done!\u0026#39;); We need a way to stop the process if the user cancels the input.\nThe ordinary¬†break¬†after¬†input¬†would only break the inner loop. That‚Äôs not sufficient ‚Äì labels, come to the rescue!\nA¬†label¬†is an identifier with a colon before a loop:\nlabelName: for (...) { ... } The¬†break \u0026lt;labelName\u0026gt;¬†statement in the loop below breaks out to the label:\nouter: for (let i = 0; i \u0026lt; 3; i++) { for (let j = 0; j \u0026lt; 3; j++) { let input = prompt(`Value at coords (${i},${j})`, \u0026#39;\u0026#39;); // if an empty string or canceled, then break out of both loops if (!input) break outer; // (*) // do something with the value... } } alert(\u0026#39;Done!\u0026#39;); In the code above,¬†break outer¬†looks upwards for the label named¬†outer¬†and breaks out of that loop.\nSo the control goes straight from¬†(*)¬†to¬†alert('Done!').\nWe can also move the label onto a separate line:\nouter: for (let i = 0; i \u0026lt; 3; i++) { ... } The¬†continue¬†directive can also be used with a label. In this case, code execution jumps to the next iteration of the labeled loop.\nLabels do not allow to ‚Äújump‚Äù anywhere\nLabels do not allow us to jump into an arbitrary place in the code.\nFor example, it is impossible to do this:\nbreak label; // jump to the label below (doesn\u0026#39;t work) label: for (...) A¬†break¬†directive must be inside a code block. Technically, any labelled code block will do, e.g.:\nlabel: { // ... break label; // works // ... } ‚Ä¶Although, 99.9% of the time¬†break¬†is used inside loops, as we‚Äôve seen in the examples above.\nA¬†continue¬†is only possible from inside a loop.\nThe \u0026ldquo;switch\u0026rdquo; statement A¬†switch¬†statement can replace multiple¬†if¬†checks.\nIt gives a more descriptive way to compare a value with multiple variants.\nThe syntax The¬†switch¬†has one or more¬†case¬†blocks and an optional default.\nIt looks like this:\nswitch(x) { case \u0026#39;value1\u0026#39;: // if (x === \u0026#39;value1\u0026#39;) ... [break] case \u0026#39;value2\u0026#39;: // if (x === \u0026#39;value2\u0026#39;) ... [break] default: ... [break] } The value of¬†x¬†is checked for a strict equality to the value from the first¬†case¬†(that is,¬†value1) then to the second (value2) and so on. If the equality is found,¬†switch¬†starts to execute the code starting from the corresponding¬†case, until the nearest¬†break¬†(or until the end of¬†switch). If no case is matched then the¬†default¬†code is executed (if it exists). Type matters Let‚Äôs emphasize that the equality check is always strict. The values must be of the same type to match.\nFor example, let‚Äôs consider the code:\nlet arg = prompt(\u0026#34;Enter a value?\u0026#34;); switch (arg) { case \u0026#39;0\u0026#39;: case \u0026#39;1\u0026#39;: alert( \u0026#39;One or zero\u0026#39; ); break; case \u0026#39;2\u0026#39;: alert( \u0026#39;Two\u0026#39; ); break; case 3: alert( \u0026#39;Never executes!\u0026#39; ); break; default: alert( \u0026#39;An unknown value\u0026#39; ); } For¬†0,¬†1, the first¬†alert¬†runs. For¬†2¬†the second¬†alert¬†runs. But for¬†3, the result of the¬†prompt¬†is a string¬†\u0026quot;3\u0026quot;, which is not strictly equal¬†===¬†to the number¬†3. So we‚Äôve got a dead code in¬†case 3! The¬†default¬†variant will execute. Functions Quite often we need to perform a similar action in many places of the script.\nFor example, we need to show a nice-looking message when a visitor logs in, logs out and maybe somewhere else.\nFunctions are the main ‚Äúbuilding blocks‚Äù of the program. They allow the code to be called many times without repetition.\nWe‚Äôve already seen examples of built-in functions, like alert(message), prompt(message, default) and confirm(question). But we can create functions of our own as well.\nFunction Declaration To create a function we can use a function declaration.\nIt looks like this:\nfunction showMessage() { alert( \u0026#39;Hello everyone!\u0026#39; ); } The¬†function¬†keyword goes first, then goes the¬†name of the function, then a list of¬†parameters¬†between the parentheses (comma-separated, empty in the example above, we‚Äôll see examples later) and finally the code of the function, also named ‚Äúthe function body‚Äù, between curly braces.\nfunction name(parameter1, parameter2, ... parameterN) { // body } Our new function can be called by its name:¬†showMessage().\nThe call showMessage() executes the code of the function. Here we will see the message two times.\nThis example clearly demonstrates one of the main purposes of functions: to avoid code duplication.\nIf we ever need to change the message or the way it is shown, it‚Äôs enough to modify the code in one place: the function which outputs it.\nLocal variables A variable declared inside a function is only visible inside that function.\nFor example:\nfunction showMessage() { let message = \u0026#34;Hello, I\u0026#39;m JavaScript!\u0026#34;; // local variable alert( message ); } showMessage(); // Hello, I\u0026#39;m JavaScript! alert( message ); // \u0026lt;-- Error! The variable is local to the function Outer Variables A function can access an outer variable as well, for example:\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { let message = \u0026#39;Hello, \u0026#39; + userName; alert(message); } showMessage(); // Hello, John The function has full access to the outer variable. It can modify it as well.\nFor instance:\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { userName = \u0026#34;Bob\u0026#34;; // (1) changed the outer variable let message = \u0026#39;Hello, \u0026#39; + userName; alert(message); } alert( userName ); // John before the function call showMessage(); alert( userName ); // Bob, the value was modified by the function The outer variable is only used if there‚Äôs no local one.\nIf a same-named variable is declared inside the function then it¬†shadows¬†the outer one. For instance, in the code below the function uses the local¬†userName. The outer one is ignored:\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { let userName = \u0026#34;Bob\u0026#34;; // declare a local variable let message = \u0026#39;Hello, \u0026#39; + userName; // Bob alert(message); } // the function will create and use its own userName showMessage(); alert( userName ); // John, unchanged, the function did not access the outer variable Parameters We can pass arbitrary data to functions using parameters.\nIn the example below, the function has two parameters:¬†from¬†and¬†text.\nfunction showMessage(from, text) { // parameters: from, text alert(from + \u0026#39;: \u0026#39; + text); } showMessage(\u0026#39;Ann\u0026#39;, \u0026#39;Hello!\u0026#39;); // Ann: Hello! (1) showMessage(\u0026#39;Ann\u0026#39;, \u0026#34;What\u0026#39;s up?\u0026#34;); // Ann: What\u0026#39;s up? (2) When the function is called in lines (1) and (2), the given values are copied to local variables from and text. Then the function uses them.\nHere‚Äôs one more example: we have a variable from and pass it to the function. Please note: the function changes from, but the change is not seen outside, because a function always gets a copy of the value:\nfunction showMessage(from, text) { from = \u0026#39;*\u0026#39; + from + \u0026#39;*\u0026#39;; // make \u0026#34;from\u0026#34; look nicer alert( from + \u0026#39;: \u0026#39; + text ); } let from = \u0026#34;Ann\u0026#34;; showMessage(from, \u0026#34;Hello\u0026#34;); // *Ann*: Hello // the value of \u0026#34;from\u0026#34; is the same, the function modified a local copy alert( from ); // Ann When a value is passed as a function parameter, it‚Äôs also called an argument.\nIn other words, to put these terms straight:\nA parameter is the variable listed inside the parentheses in the function declaration (it‚Äôs a declaration time term). An argument is the value that is passed to the function when it is called (it‚Äôs a call time term). We declare functions listing their parameters, then call them passing arguments.\nIn the example above, one might say: ‚Äúthe function showMessage is declared with two parameters, then called with two arguments: from and \u0026ldquo;Hello\u0026rdquo;‚Äù.\nDefault values If a function is called, but an argument is not provided, then the corresponding value becomes undefined.\nFor instance, the aforementioned function showMessage(from, text) can be called with a single argument:\nfunction showMessage(from, text = \u0026#34;no text given\u0026#34;) { alert( from + \u0026#34;: \u0026#34; + text ); } showMessage(\u0026#34;Ann\u0026#34;); // Ann: no text given Default parameters in old JavaScript code Several years ago, JavaScript didn‚Äôt support the syntax for default parameters. So people used other ways to specify them.\nNowadays, we can come across them in old scripts.\nFor example, an explicit check for undefined:\nfunction showMessage(from, text) { if (text === undefined) { text = \u0026#39;no text given\u0026#39;; } alert( from + \u0026#34;: \u0026#34; + text ); } ‚Ä¶Or using the¬†||¬†operator:\nfunction showMessage(from, text) { // If the value of text is falsy, assign the default value // this assumes that text == \u0026#34;\u0026#34; is the same as no text at all text = text || \u0026#39;no text given\u0026#39;; ... } Alternative default parameters Sometimes it makes sense to assign default values for parameters at a later stage after the function declaration.\nWe can check if the parameter is passed during the function execution, by comparing it with¬†undefined:\nfunction showMessage(text) { // ... if (text === undefined) { // if the parameter is missing text = \u0026#39;empty message\u0026#39;; } alert(text); } showMessage(); // empty message Returning a value A function can return a value back into the calling code as the result.\nThe simplest example would be a function that sums two values:\nfunction sum(a, b) { return a + b; } let result = sum(1, 2); console.log( result ); // 3 A function with an empty¬†return¬†or without it returns¬†undefined\nIf a function does not return a value, it is the same as if it returns¬†undefined\nfunction doNothing() { /* empty */ } alert( doNothing() === undefined ); // true An empty¬†return¬†is also the same as¬†return undefined:\nfunction doNothing() { return; } alert( doNothing() === undefined ); // true One function ‚Äì one action\nA function should do exactly what is suggested by its name, no more.\nTwo independent actions usually deserve two functions, even if they are usually called together (in that case we can make a 3rd function that calls those two).\nA few examples of breaking this rule:\ngetAge¬†‚Äì would be bad if it shows an¬†alert¬†with the age (should only get). createForm¬†‚Äì would be bad if it modifies the document, adding a form to it (should only create it and return). checkPermission¬†‚Äì would be bad if it displays the¬†access granted/denied¬†message (should only perform the check and return the result). These examples assume common meanings of prefixes. You and your team are free to agree on other meanings, but usually they‚Äôre not much different. In any case, you should have a firm understanding of what a prefix means, what a prefixed function can and cannot do. All same-prefixed functions should obey the rules. And the team should share the knowledge.\nFunction expressions In JavaScript, a function is not a ‚Äúmagical language structure‚Äù, but a special kind of value.\nThe syntax that we used before is called a¬†Function Declaration:\nfunction sayHi() { alert( \u0026#34;Hello\u0026#34; ); } There is another syntax for creating a function that is called a Function Expression.\nIt allows us to create a new function in the middle of any expression.\nFor example:\nlet sayHi = function() { alert( \u0026#34;Hello\u0026#34; ); }; Here we can see a variable¬†sayHi¬†getting a value, the new function, created as¬†function() { alert(\u0026quot;Hello\u0026quot;); }.\nAs the function creation happens in the context of the assignment expression (to the right side of¬†=), this is a¬†Function Expression.\nPlease note, there‚Äôs no name after the¬†function¬†keyword. Omitting a name is allowed for Function Expressions.\nHere we immediately assign it to the variable, so the meaning of these code samples is the same: ‚Äúcreate a function and put it into the variable¬†sayHi‚Äù.\nIn more advanced situations, that we‚Äôll come across later, a function may be created and immediately called or scheduled for a later execution, not stored anywhere, thus remaining anonymous.\nFunction is a value Let‚Äôs reiterate: no matter how the function is created, a function is a value. Both examples above store a function in the¬†sayHi¬†variable.\nWe can even print out that value using¬†alert:\nfunction sayHi() { alert( \u0026#34;Hello\u0026#34; ); } alert( sayHi ); // shows the function code Please note that the last line does not run the function, because there are no parentheses after¬†sayHi. There are programming languages where any mention of a function name causes its execution, but JavaScript is not like that.\nIn JavaScript, a function is a value, so we can deal with it as a value. The code above shows its string representation, which is the source code.\nSurely, a function is a special value, in the sense that we can call it like¬†sayHi().\nBut it‚Äôs still a value. So we can work with it like with other kinds of values.\nWe can copy a function to another variable:\nfunction sayHi() { // (1) create alert( \u0026#34;Hello\u0026#34; ); } let func = sayHi; // (2) copy func(); // Hello // (3) run the copy (it works)! sayHi(); // Hello // this still works too (why wouldn\u0026#39;t it) Here‚Äôs what happens above in detail:\nThe Function Declaration¬†(1)¬†creates the function and puts it into the variable named¬†sayHi. Line¬†(2)¬†copies it into the variable¬†func. Please note again: there are no parentheses after¬†sayHi. If there were, then¬†func = sayHi()¬†would write¬†the result of the call¬†sayHi()¬†into¬†func, not¬†the function¬†sayHi¬†itself. Now the function can be called as both¬†sayHi()¬†and¬†func(). We could also have used a Function Expression to declare¬†sayHi, in the first line:\nlet sayHi = function() { // (1) create alert( \u0026#34;Hello\u0026#34; ); }; let func = sayHi; // ... Everything would work the same.\nWhy is there a semicolon at the end?\nYou might wonder, why do Function Expressions have a semicolon¬†;¬†at the end, but Function Declarations do not:\nfunction sayHi() { // ... } let sayHi = function() { // ... }; The answer is simple: a Function Expression is created here as function(‚Ä¶) {‚Ä¶} inside the assignment statement: let sayHi = ‚Ä¶;. The semicolon ; is recommended at the end of the statement, it‚Äôs not a part of the function syntax.\nThe semicolon would be there for a simpler assignment, such as let sayHi = 5;, and it‚Äôs also there for a function assignment.\nfunction callbacks Let‚Äôs look at more examples of passing functions as values and using function expressions.\nWe‚Äôll write a function¬†ask(question, yes, no)¬†with three parameters:\nquestion\nText of the question\nyes\nFunction to run if the answer is ‚ÄúYes‚Äù\nno\nFunction to run if the answer is ‚ÄúNo‚Äù\nThe function should ask the¬†question¬†and, depending on the user‚Äôs answer, call¬†yes()¬†or¬†no():\nfunction ask(question, yes, no) { if (confirm(question)) yes() else no(); } function showOk() { alert( \u0026#34;You agreed.\u0026#34; ); } function showCancel() { alert( \u0026#34;You canceled the execution.\u0026#34; ); } // usage: functions showOk, showCancel are passed as arguments to ask ask(\u0026#34;Do you agree?\u0026#34;, showOk, showCancel); In practice, such functions are quite useful. The major difference between a real-life¬†ask¬†and the example above is that real-life functions use more complex ways to interact with the user than a simple¬†confirm. In the browser, such functions usually draw a nice-looking question window. But that‚Äôs another story.\nThe arguments¬†showOk¬†and¬†showCancel¬†of¬†ask¬†are called¬†callback functions¬†or just¬†callbacks.\nThe idea is that we pass a function and expect it to be ‚Äúcalled back‚Äù later if necessary. In our case,¬†showOk¬†becomes the callback for ‚Äúyes‚Äù answer, and¬†showCancel¬†for ‚Äúno‚Äù answer.\nWe can use Function Expressions to write an equivalent, shorter function:\nfunction ask(question, yes, no) { if (confirm(question)) yes() else no(); } ask( \u0026#34;Do you agree?\u0026#34;, function() { alert(\u0026#34;You agreed.\u0026#34;); }, function() { alert(\u0026#34;You canceled the execution.\u0026#34;); } ); Here, functions are declared right inside the¬†ask(...)¬†call. They have no name, and so are called¬†anonymous. Such functions are not accessible outside of¬†ask¬†(because they are not assigned to variables), but that‚Äôs just what we want here.\nSuch code appears in our scripts very naturally, it‚Äôs in the spirit of JavaScript.\nA function is a value representing an ‚Äúaction‚Äù Regular values like strings or numbers represent the data.\nA function can be perceived as an action.\nWe can pass it between variables and run when we want.\nFunction Expression vs Function Declaration Let‚Äôs formulate the key differences between Function Declarations and Expressions.\nFirst, the syntax: how to differentiate between them in the code.\nFunction Declaration:¬†a function, declared as a separate statement, in the main code flow: // Function Declaration function sum(a, b) { return a + b; } Function Expression:¬†a function, created inside an expression or inside another syntax construct. Here, the function is created on the right side of the ‚Äúassignment expression‚Äù¬†=: // Function Expression let sum = function(a, b) { return a + b; }; The more subtle difference is¬†when¬†a function is created by the JavaScript engine.\nA Function Expression is created when the execution reaches it and is usable only from that moment. Once the execution flow passes to the right side of the assignment¬†let sum = function‚Ä¶¬†‚Äì here we go, the function is created and can be used (assigned, called, etc. ) from now on.\nFunction Declarations are different.\nA Function Declaration can be called earlier than it is defined. For example, a global Function Declaration is visible in the whole script, no matter where it is.\nThat‚Äôs due to internal algorithms. When JavaScript prepares to run the script, it first looks for global Function Declarations in it and creates the functions. We can think of it as an ‚Äúinitialization stage‚Äù.\nAnd after all Function Declarations are processed, the code is executed. So it has access to these functions.\nFor example, this works:\nsayHi(\u0026#34;John\u0026#34;); // Hello, John function sayHi(name) { alert( `Hello, ${name}` ); } The Function Declaration sayHi is created when JavaScript is preparing to start the script and is visible everywhere in it.\n‚Ä¶If it were a Function Expression, then it wouldn‚Äôt work\nsayHi(\u0026#34;John\u0026#34;); // error! let sayHi = function(name) { // (*) no magic any more alert( `Hello, ${name}` ); }; In strict mode, when a Function Declaration is within a code block, it‚Äôs visible everywhere inside that block. But not outside of it. When to choose Function Declaration versus Function Expression? As a rule of thumb, when we need to declare a function, the first thing to consider is Function Declaration syntax. It gives more freedom in how to organize our code, because we can call such functions before they are declared.\nThat‚Äôs also better for readability, as it‚Äôs easier to look up function f(‚Ä¶) {‚Ä¶} in the code than let f = function(‚Ä¶) {‚Ä¶};. Function Declarations are more ‚Äúeye-catching‚Äù.\n‚Ä¶But if a Function Declaration does not suit us for some reason, or we need a conditional declaration (we‚Äôve just seen an example), then Function Expression should be used.\nSummary Functions are values. They can be assigned, copied or declared in any place of the code. If the function is declared as a separate statement in the main code flow, that‚Äôs called a ‚ÄúFunction Declaration‚Äù. If the function is created as a part of an expression, it‚Äôs called a ‚ÄúFunction Expression‚Äù. Function Declarations are processed before the code block is executed. They are visible everywhere in the block. Function Expressions are created when the execution flow reaches them. In most cases when we need to declare a function, a Function Declaration is preferable, because it is visible prior to the declaration itself. That gives us more flexibility in code organization, and is usually more readable.\nSo we should use a Function Expression only when a Function Declaration is not fit for the task. We‚Äôve seen a couple of examples of that in this chapter, and will see more in the future.\nArrow functions, the basics There‚Äôs another very simple and concise syntax for creating functions, that‚Äôs often better than Function Expressions.\nIt‚Äôs called ‚Äúarrow functions‚Äù, because it looks like this:\nlet func = (arg1, arg2, ..., argN) =\u0026gt; expression; This creates a function¬†func¬†that accepts arguments¬†arg1..argN, then evaluates the¬†expression¬†on the right side with their use and returns its result.\nIn other words, it‚Äôs the shorter version of:\nlet func = function(arg1, arg2, ..., argN) { return expression; }; Let‚Äôs see a concrete example:\nlet sum = (a, b) =\u0026gt; a + b; /* This arrow function is a shorter form of: let sum = function(a, b) { return a + b; }; */ alert( sum(1, 2) ); // 3 As you can see,¬†(a, b) =\u0026gt; a + b¬†means a function that accepts two arguments named¬†a¬†and¬†b. Upon the execution, it evaluates the expression¬†a + b¬†and returns the result.\nIf we have only one argument, then parentheses around parameters can be omitted, making that even shorter. For example:\nlet double = n =\u0026gt; n * 2; // roughly the same as: let double = function(n) { return n * 2 } alert( double(3) ); // 6 If there are no arguments, parentheses are empty, but they must be present: let sayHi = () =\u0026gt; alert(\u0026#34;Hello!\u0026#34;); sayHi(); Arrow functions can be used in the same way as Function Expressions.\nFor instance, to dynamically create a function:\nlet age = prompt(\u0026#34;What is your age?\u0026#34;, 18); let welcome = (age \u0026lt; 18) ? () =\u0026gt; alert(\u0026#39;Hello!\u0026#39;) : () =\u0026gt; alert(\u0026#34;Greetings!\u0026#34;); welcome(); Arrow functions may appear unfamiliar and not very readable at first, but that quickly changes as the eyes get used to the structure.\nThey are very convenient for simple one-line actions, when we‚Äôre just too lazy to write many words.\nMultiline arrow functions The arrow functions that we‚Äôve seen so far were very simple. They took arguments from the left of =\u0026gt;, evaluated and returned the right-side expression with them.\nSometimes we need a more complex function, with multiple expressions and statements. In that case, we can enclose them in curly braces. The major difference is that curly braces require a return within them to return a value (just like a regular function does).\nLike this:\nlet sum = (a, b) =\u0026gt; { // the curly brace opens a multiline function let result = a + b; return result; // if we use curly braces, then we need an explicit \u0026#34;return\u0026#34; }; alert( sum(1, 2) ); // 3 More to come Here we praised arrow functions for brevity. But that‚Äôs not all!\nArrow functions have other interesting features.\nTo study them in-depth, we first need to get to know some other aspects of JavaScript, so we‚Äôll return to arrow functions later in the chapter Arrow functions revisited.\nFor now, we can already use arrow functions for one-line actions and callbacks.\nSummary Arrow functions are handy for simple actions, especially for one-liners. They come in two flavors:\nWithout curly braces:¬†(...args) =\u0026gt; expression¬†‚Äì the right side is an expression: the function evaluates it and returns the result. Parentheses can be omitted, if there‚Äôs only a single argument, e.g.¬†n =\u0026gt; n*2. With curly braces:¬†(...args) =\u0026gt; { body }¬†‚Äì brackets allow us to write multiple statements inside the function, but we need an explicit¬†return¬†to return something. ","permalink":"http://localhost:1313/posts/fundamentals-of-javascript/","summary":"\u003cp\u003e\u003cimg alt=\"JS Image\" loading=\"lazy\" src=\"/posts/assets/web/JS/js.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eJavaScript was originally created to bring static web pages to life, enabling them to respond dynamically to user interactions. Its code, known as scripts, is directly embedded within HTML documents and executed by the browser as soon as the page loads. Because these scripts are delivered and interpreted as plain text, they bypass the need for a separate compilation process‚Äîthis makes development swift and flexible.\u003c/p\u003e\n\u003cp\u003eThis interpretive nature is a key characteristic of JavaScript and distinguishes it from compiled languages like Java. Whereas Java requires a compile step to transform code into bytecode before execution, JavaScript‚Äôs immediate execution model facilitates rapid testing and iterative development. Over time, JavaScript has evolved from a simple tool for adding interactivity to a robust language capable of handling complex web applications, manipulating the Document Object Model (DOM), and even running on servers through environments like Node.js.\u003c/p\u003e","title":"Fundamentals of JavaScript"},{"content":"\nI recently uploaded a video showcasing my Arch Linux (btw) setup just for fun, and to my surprise, it went viral within the Linux community! Since then, I‚Äôve received numerous messages asking about the installation process. Although I wanted to make a detailed video tutorial, my laptop\u0026rsquo;s older specs make it difficult to handle both recording and installation simultaneously. So, I‚Äôve decided to write this article to guide you through the installation process using my dotfiles and the installation script from Ja.Kool.It. Below, you‚Äôll find a step-by-step guide to get started.\n1. Install ArchLinux With Minimal Configuration Make a Bootable USB First Download ArchLinux ISO from official site : Download Link Second Download for Your Operating System Ventoy Extract the Ventoy Folder and Write it on your USB. Copy ArchLinux ISO into USB. if you Don\u0026rsquo;t Know how to use ventoy read this article Boot From USB Restart Your Computer and Press the Boot Menu key according to your Computer. In Boot Menu Select Your USB It will open ventoy and show you all ISO file available in USB Select the ArchLinux ISO and Open in Normal Mode. Connect to Internet For wired internet you don\u0026rsquo;t need to do anyting For wireless Command Given Below $ iwctl [iwd]# From the [iwd]# prompt you will need figure out your device name. Then, assuming you know the SSID (service set identifier) of your wireless network, go ahead and connect like so:\n[iwd]# device list # You should see something like this: # # Devices # ------------------------------------------------------------- # Name Address Powered Adapter Mode # ------------------------------------------------------------- # wlan0 ... on ... ... [iwd]# station YOURDEVICE connect YOURSSID For a secured wireless network, you will be prompted for the WiFi password. Once you enter the correct password, you‚Äôll be off to the races!\nMaking Partition Ready for Archinstall for that first we will use the cfdisk to make partitions and then mfks for formatting that $ lsblk if will show your all partitions and there information\n$ cfdisk it show you all of your information about your drives\nYou have to make 3 partitions\nEFI boot Partition - Type Must be EFI System Swap Partition - Type Must be Swap Partition Root Partition - Type Must be Linux File System after Make Partitions write and exit the cfdisk and Run these commands and just change paths\n$ mkfs.ext4 /path/to/root/partition $ mfks.vfat -F 32 /path/to/efi/partition $ mkswap /path/to/swap/partition we will use the pre-mounted disk configuration for that run\n$ mkdir /mnt/archinstall $ mount /path/to/root/partition /mnt/archinstall $ mkdir /mnt/archinstall/boot $ mount /path/to/efi/partition/ /mnt/archinstall/boot $ swapon /path/to/swap/partition now we are done with partitioning the partitions\nUpdate System and Run ArchInstall $ pacman -Sy archinstall archlinux-keyring $ archinstall Actual Installation Start Here After running the archinstall command it will show you something like this.\nLocales : In locales select your keyboard layout, locale language, and endcoding Mirrors : In Mirrors select best mirror region according to your location Disk Configuration : -\u0026gt;Partitioning-\u0026gt;Pre-mounted Configuration-\u0026gt; Enter /mnt/archinstall Swap : Enable it if you made the swap partition Boot Loader : Select which boot loader do you need like grub, system-d-boot Unified kernel images : Enable if you want Hostname : Select your hostname what you want Root Password : Enter Your Root Password User account : make a account for normal user Profile : Select-\u0026gt;Type-\u0026gt;Minimal Audio : Select-\u0026gt;Pipewire Kernels : Select one or many according your need. if don\u0026rsquo;t know don\u0026rsquo;t touch it Network configuration : Select-\u0026gt;Use NetworkManager Additional packages : git vim Optional repositories : Enable additional repos if you want like multilib Timezone : Select timezone according to your location Automatic time sync (NTP) : Leave Enabled after that just press the install and wait for installation to be finished\nCongratulationsüéâ!! You have successfully installed the ArchLinux and now you can say that I use Arch btw\n2. Installing JaKooLit Arch-Hyprland Script. reboot your system and login with username and password and connect with internet and clone the repo and preform these operations.\ngit clone --depth=1 https://github.com/JaKooLit/Arch-Hyprland.git ~/Arch-Hyprland cd ~/Arch-Hyprland chmod +x install.sh ./install.sh select the option according the option given in image I have explained each one of them and those without comment means go with that are in image.\nAfter selecting all the options, I will start installing Hyprland and additional components. During the installation, you may be prompted to enter the password 2-3 times, so stay attentive. Once the installation is successful, it will show a prompt to press \u0026lsquo;Y\u0026rsquo; to reboot the system.\nYou have successfully installed Archlinux+Hyprland.\n3. My Dotfiles Configuration To set up your environment using these dotfiles, follow these steps:\nClone the Repository: git clone https://github.com/ahmad9059/dotfiles.git cd dotfiles Backup Existing Dotfiles: Before copying new configurations, it\u0026rsquo;s wise to back up your current dotfiles: mkdir -p ~/dotfiles_backup cp ~/.config ~/dotfiles_backup -r cp ~/.tmux.conf ~/dotfiles_backup cp ~/.zshrc ~/dotfiles_backup Copy New Configurations: Remember you must in dotfiles folder to run following commands cp -r .config ~/ cp .zshrc ~/ cp -r .themes ~/.themes cd .icons cp .icons.zip ~/ cd ~/ unzip .icons.zip rm .icons.zip After the installation, you can start using the configured applications. Open your GTK settings and set the widget theme to Andromeda-dark, the icon theme to Dracula, and the mouse cursor to Future-black Cursors.\nPackages¬†pacman: Install of these Packages using pacman\nsudo pacman -S foot alacritty lsd bat tmux neovim tldr obs-studio vlc yazi Packages¬†yay(Optional): Install of these Packages Using yay. Remember they are according to my preference like I have install vscode, telegram etc.\nyay -S thorium-browser-bin visual-studio-code-bin 64gram-desktop-bin apple-fonts fum Congratulations! You have successfully completed the installation.\n","permalink":"http://localhost:1313/posts/archlinux-installation-guide/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/posts/assets/archlinux/archlinux.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eI recently uploaded a video showcasing my Arch Linux (btw) setup just for fun, and to my surprise, it went viral within the Linux community! Since then, I‚Äôve received numerous messages asking about the installation process. Although I wanted to make a detailed video tutorial, my laptop\u0026rsquo;s older specs make it difficult to handle both recording and installation simultaneously. So, I‚Äôve decided to write this article to guide you through the installation process using my dotfiles and the installation script from Ja.Kool.It. Below, you‚Äôll find a step-by-step guide to get started.\u003c/p\u003e","title":"ArchLinux Installation Guide Using My Dotfiles"},{"content":"Tailwind CSS is a utility-first CSS framework designed to allow developers to build custom designs quickly. Instead of writing custom styles, Tailwind provides a collection of utility classes that you can use to style elements directly in the HTML.\n1. Installation and Setup How to install Tailwind using CDN For quick prototyping, you can include Tailwind directly in your project with a CDN. Add the following to your HTML \u0026lt;head\u0026gt; tag:\nAdd the Play CDN script tag to the¬†\u0026lt;head\u0026gt;¬†of your HTML file, and start using Tailwind‚Äôs utility classes to style your content.\n\u0026lt;script src=\u0026#34;https://unpkg.com/@tailwindcss/browser@4\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 2. Key Concepts in Tailwind CSS Utility-First Approach Tailwind uses small utility classes like text-center, bg-blue-500, and mt-4 to control elements\u0026rsquo; design directly in the HTML. This eliminates the need for writing custom CSS.\nResponsive Design Tailwind provides responsive utilities that help you design mobile-first and scale up for larger screens. You can add breakpoints to utilities using sm:, md:, lg:, xl:, etc.\n3. Core Concepts Colors Tailwind provides a set of predefined colors. You can apply them using classes like bg-blue-500 or text-red-600. Example:\n\u0026lt;div class=\u0026#34;bg-blue-500 text-white p-4\u0026#34;\u0026gt; This is a blue background with white text. \u0026lt;/div\u0026gt; Spacing (Padding and Margin) Tailwind has utilities for margin (m-*) and padding (p-*), where * is a scale value. Example:\n\u0026lt;div class=\u0026#34;m-4 p-6\u0026#34;\u0026gt; This element has 1rem margin and 1.5rem padding. \u0026lt;/div\u0026gt; Typography Tailwind provides utilities for font size (text-*), font weight (font-*), text color (text-*), and line height (leading-*). Example:\n\u0026lt;p class=\u0026#34;text-lg font-semibold leading-relaxed\u0026#34;\u0026gt; This is a large, semi-bold text with relaxed line height. \u0026lt;/p\u0026gt; 4. Layout Utilities Flexbox and Grid Tailwind CSS makes it easy to use Flexbox and CSS Grid with utilities like flex, grid, flex-col, justify-center, etc. Example of Flexbox:\n\u0026lt;div class=\u0026#34;flex justify-center items-center h-screen\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bg-gray-200 p-6\u0026#34;\u0026gt;Center me!\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Example of Grid:\n\u0026lt;div class=\u0026#34;grid grid-cols-3 gap-4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bg-red-500\u0026#34;\u0026gt;Item 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-blue-500\u0026#34;\u0026gt;Item 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-green-500\u0026#34;\u0026gt;Item 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Container The .container class centers your content and applies responsive width.\n\u0026lt;div class=\u0026#34;container mx-auto p-4\u0026#34;\u0026gt; Content here will be centered. \u0026lt;/div\u0026gt; 5. Customization You can customize Tailwind‚Äôs default theme using the tailwind.config.js file. For example, you can change the color palette, font sizes, spacing, etc.\nmodule.exports = { theme: { extend: { colors: { customBlue: \u0026#39;#123456\u0026#39;, }, }, }, } 7. Tailwind Directives @tailwind base;: Applies the base styles like resets. @tailwind components;: Injects component-level styles. @tailwind utilities;: Includes utility classes like padding, margin, colors, etc. @apply: Use this directive to group utilities into a single class (useful for custom components). .btn { @apply bg-blue-500 text-white p-2 rounded; } 8. Handling States with Pseudo-Classes Tailwind provides utilities for pseudo-classes such as hover:, focus:, active:, etc. Example:\n\u0026lt;button class=\u0026#34;bg-blue-500 hover:bg-blue-700 text-white p-2\u0026#34;\u0026gt; Hover me! \u0026lt;/button\u0026gt; 9. Transitions and Animations You can add smooth transitions and animations using Tailwind‚Äôs utility classes. Example:\n\u0026lt;div class=\u0026#34;transition ease-in-out duration-500 transform hover:scale-110\u0026#34;\u0026gt; Hover to scale up! \u0026lt;/div\u0026gt; 10. Plugins Tailwind allows you to extend its functionality with plugins, such as for forms, typography, or aspect ratio utilities. Example of installing a plugin:\nnpm install @tailwindcss/forms Then, add it to your tailwind.config.js:\nmodule.exports = { plugins: [ require(\u0026#39;@tailwindcss/forms\u0026#39;), ], } 11. Tailwind CSS with JIT Mode Just-in-time (JIT) mode generates only the classes you use, reducing file size and speeding up development. To enable JIT:\nmodule.exports = { mode: \u0026#39;jit\u0026#39;, content: [\u0026#39;./**/*.html\u0026#39;], } 12. Example Project \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Tailwind Example\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;https://cdn.tailwindcss.com\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;bg-gray-100 text-gray-900\u0026#34;\u0026gt; \u0026lt;header class=\u0026#34;bg-blue-500 text-white p-4\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;text-xl font-bold\u0026#34;\u0026gt;My Tailwind Page\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;main class=\u0026#34;p-6\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bg-white p-4 rounded shadow-md\u0026#34;\u0026gt;Card 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-white p-4 rounded shadow-md\u0026#34;\u0026gt;Card 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-white p-4 rounded shadow-md\u0026#34;\u0026gt;Card 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer class=\u0026#34;bg-gray-800 text-white p-4 text-center\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026amp;copy; 2025 My Tailwind Site\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","permalink":"http://localhost:1313/posts/tailwind-css/","summary":"\u003cp\u003eTailwind CSS is a utility-first CSS framework designed to allow developers to build custom designs quickly. Instead of writing custom styles, Tailwind provides a collection of utility classes that you can use to style elements directly in the HTML.\u003c/p\u003e\n\u003ch3 id=\"1-installation-and-setup\"\u003e1. Installation and Setup\u003c/h3\u003e\n\u003chr\u003e\n\u003ch4 id=\"how-to-install-tailwind-using-cdn\"\u003eHow to install Tailwind using CDN\u003c/h4\u003e\n\u003cp\u003eFor quick prototyping, you can include Tailwind directly in your project with a CDN. Add the following to your HTML \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e tag:\u003c/p\u003e","title":"Tailwind CSS - A Utility-First CSS Framework"},{"content":"CSS (Cascadia Styling Sheet) is the style sheet language that\u0026rsquo;s use to specify how a document written in HTML or XML should be presented and styled.\nCSS Boilerplate *{ margin: 0; padding: 0; box-sizing: border-box; } html,body{ width: 100%; height: 100%; } How to Link CSS with HTML Add the line after tittle tag in your html file\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;\nTips:\nWe use . dot to target class in CSS We use # hash to target id in CSS Also if you want to target tag we can simply target like h3{} Div: box means div and also when e have more than one element and also when there is rectangle shape, very high change there is div ;). Units in CSS px : It is use to define the measurement in pixels. 1px = 1/96th of inch % : It is used to define the measurement as a percentage that is relative to another value (maybe to their parent element). vh : It is relative to the height of the viewpoint(screen). 1vh = 1% or 1/100 of the height of the viewpoint vw : It is relative to the width of the viewpoint(screen). 1vm or 1/100 of the width of the width of viewpoint em : Relative to the font-size of the element 2em means 2 times the size of the current font rem : Relative to font-size of the root element like html tag. vmin : Relative to 1% of viewport\u0026rsquo;s* smaller dimension vmax : Relative to 1% of viewport\u0026rsquo;s* larger dimension Tip: There are mainly two type of fonts sans-serif and serif. The difference is the presence of decorative strokes, or serifs at the beginning and end of letters.\nExamples\nMargin VS Padding: padding: padding is the space inside an element, between its content and its border. margin: margin is the space outside an element, between the element\u0026rsquo;s border and other elements. border: A shorthand property for border-width, border-style, border-color ex: border: 3px solid gray border-radius: A shorthand property for the for border *_radius properties. We can also add radius on only one corner. like using these properties border-bottom-left-radius, border-bottom-right-radius,border-top-left-radius,border-top-right-radius Block VS Inline VS Inline-Block: Block Element:- Start on a new line (occupy full width) and take-up 100% of the width by default. You can set height, width, margin,padding. ex: \u0026lt;div\u0026gt;, \u0026lt;p\u0026gt;, \u0026lt;h1\u0026gt;.\nInline Element:- Do not start on a new line and only take-up as much width as their content/required. Height and width cannot be set/change. ex: \u0026lt;span\u0026gt;,\u0026lt;a\u0026gt;,\u0026lt;strong\u0026gt;.\nInline-Block Element:- Behave like inline element(do not start on a new line). Allow setting height,width like block elements. Useful for layouts purposes without breaking the flow.ex: \u0026lt;img\u0026gt;,button,\u0026lt;input\u0026gt;.\ndisplay: specifies how a certain HTML should be displayed. attributes: block,inline,inline-block Position Absolute VS Position Relative: Position Absolute:-\nAn element with position: absolute is removed from the normal document flow. It is positioned relative to its nearest positioned ancestor (an ancestor with position: relative, absolute, or fixed). If no such ancestor exists, it is positioned relative to the initial containing block (viewport). It does not occupy space in the normal layout, allowing it to move freely within its containing block. Position Relative:-\nAn element with position: relative remains in the normal document flow. It is positioned relative to its original position, using top, right, bottom, and left values. Space for the element is still reserved in the layout, so it affects other elements. position: specifies the type of positioning method used for an element absolute,relative,fixed. Background Properties: background: A shorthand property for all the background properties. It set by img(),color, linear-gradiant(to bottom right, red,yellow) etc. background-size: Specifies the size of the background images like cover,contain etc. background-repeat: Sets if/how a background image will be repeated. like no-repeat, round etc. background-position: specifies the position of a background image like center,right, left,top,bottom. Flexbox: Flexbox is a CSS layout model designed to help arrange elements in a responsive flexible way. It simplifies alignment, distribution, and spacing of items within a container-even when their size is unknown or dynamic. The Flexbox model is one-dimensional, meaning it handles either row or a column layout, Unlike CSS Grid which is two-dimensional(rows and columns). Key Concepts:\nFlex Container: The parent element that holds flex items. We can define a flex container by applying display: flex; to it. Flex items: The child elements of a flex container that will be laid out according to the flexbox rules. Main Axis and Cross Axis: Main Axis(x-axis): This axis along which flex items are placed. It depends on the flex-direction property (row by default). Cross Axis(y-axis): The perpendicular axis to the main axis. for example, if the flex-direction is row, the cross axis will be vertical. display: flex; Defines the element as flex container. flex-direction: Specifies the direction of the main axis like row, column,row-reverse,column-reverse. justify-content: Aligns items along the main axis like start,center,space-between,space-evenlly. align-items: Aligns items along the cross-axis stretch,center, flex-start,flex-end. flex-wrap: The¬†flex-wrap¬†property specifies whether the flexible items should wrap or not. like nowrap,wrap,wrap-reverse. flex-shrink: The¬†flex-shrink¬†property specifies how the item will shrink relative to the rest of the flexible items inside the same container. value like 0 or 1. Pseudo-Class and Pseudo-Elements:- Pseudo-elements and pseudo-classes are both powerful CSS features used to style elements based on specific states or to target parts of elements that aren\u0026rsquo;t directly available in the DOM, although they serve similar purposes, modifying or styling elements based on conditions, they function differently.\nPseudo-Classes: They targets an element in a specific state, and we use : for pseudo-classes. Syntax: selector:pesudo-class\nCommon Examples:\n:hover when an element is hovered. :focus when an element is focused. :th-child(n) targets the nth child of parent. :active when an element is being clicked. :visited for visited links Pseudo-Elements: Targets part of an element or inserts content before/after it. we use :: for elements. Syntax: selector::pesudo-element\nCommon Examples:\n::before insert content before an element. ::after inserts content after an element. ::first-letter styles the first-letter. ::first-line styles the first line. ::selection styles the selected text. Pseudo Classes Pseudo-Elements Interact with element states (e.g., :hover, :focus) Target parts of an element or add content (e.g., ::before, ::first-letter). Color Science and their Units 1. Color Name: CSS provides a set of predefined names that are recognized by all browsers ex: red,green,blue,black (total around 140 standard names) Example: background-color: red;\n2. Hexadecimal Notation(#RRGGBB): A more precise way to specify color in CSS is using hexadecimal(hx) notation. Hex values are written in the form #RRGGBB, where:\n#RR : represent the red component. #GG : represent the green component. #BB : represent the blue component. The values range is 00-FF, 00 means no color and FF means full intensity. Example: background-color: #11111b; 3. RGB Functional Notation: The rgb notation uses the same concept as hex but, specifies values in the decimal range from 0-255. The format is rgb(red,green,blue), where each color component is an integer between 0(no color) and 255(full intensity). Example: background-color: rgb(255,0.0);\n4. RGBA Functional Notation: rgba() extends the rgb() notation by adding an alpha channel for transparency. The format is rgba(red,green,blue,alpha), where alpha value is a decimal between 0(completely transparent) and 1(completely opoque). Example: background-color: rgba(255,0,0,0.5).\nGrid in CSS CSS Grid Layout is a powerful two-dimensional layout system designed to handle both rows and columns. It provides a way to create web layouts without relying on floats or positioning.\nCore Concepts of CSS Grid; Grid Container: The parent element where display: grid; is applied. Grid Items: The direct child elements of a grid container. Grid Lines: Horizontal and vertical lines that divide the gird into cells. Defining a Grid: Columns and Rows: Use grid-template-columns and grid-template-rows to define the grid. grid-template-columns: Specifies the size of the columns, and how many columns in a grid layout grid-template-rows: Specifies the size of the rows in a grid layout. Gap between Grid items: Use gap,row-gap,column-gap to create spacing. Alignment and Justification: align-items: Aligns items vertically inside the container. justify-items: Aligns items horizontally inside the container. align-content: Vertically aligns the whole grid inside the container (when total grid size is smaller than container). jusitfy-content: Horizontally aligns the whole grid inside the container (when total grid size is smaller than container). other useful: justify-self: Aligns the content for a specific grid item along the row axis align-self: Aligns the content for a specific grid item along the column axis grid-row-start: Specifies where to start the grid item grid-row-end: Specifies where to end the grid item grid-column-start: Specifies where to start the grid item grid-column-end: Specifies where to end the grid item grid-row: A shorthand property for the¬†grid-row-start¬†and the¬†grid-row-end¬†properties.ex: grid-row: 1 / 3; grid-column: A shorthand property for the¬†grid-column-start¬†and the¬†grid-column-end¬†properties.ex: grid-column: 1 / 4; CSS Grid vs Flexbox CSS Grid Flexbox Two-dimensional layout One-dimensional layout Suitable for complex layouts Ideal for simpler layouts (row/column) Explicit rows and columns No rows/columns concept Responsive Web Design 1.Understanding Units The first thing in responsiveness is to understand the Absolute(like px) and Relative(em,vh) Units and given are units in css.\nAbsolute Units These units are fixed and not affected by the size of other elements or the viewport.\npx (pixels): A single pixel on the screen. cm (centimeters): A physical centimeter. mm (millimeters): A physical millimeter. in (inches): A physical inch (1 inch = 2.54 cm). Relative Units These units are based on the size of other elements, the viewport, or the font size.\nRelative to the Font Size em: Relative to the font size of the parent element. rem (root em): Relative to the font size of the root element (\u0026lt;html\u0026gt;). ex: Relative to the height of the lowercase letter \u0026ldquo;x\u0026rdquo; in the current font. ch: Relative to the width of the character \u0026ldquo;0\u0026rdquo; (zero) in the current font. Relative to the Viewport vw (viewport width): 1% of the viewport‚Äôs width. vh (viewport height): 1% of the viewport‚Äôs height. vmin: 1% of the smaller dimension (width or height) of the viewport. vmax: 1% of the larger dimension (width or height) of the viewport. Relative to the Element‚Äôs Size % (percentage): Relative to the size of the parent element. 3. Flexbox Flexbox is a powerful tool for creating responsive layouts that adapt to different screen sizes and devices. Below are key takeaways for using Flexbox in responsive design:\nGeneral Concepts Flex Direction: Use flex-direction: row; for horizontal layouts. Switch to flex-direction: column; for vertical layouts on smaller screens using media queries. Flex Wrap: Use flex-wrap: wrap; to allow flex items to wrap onto new lines if necessary. Flex Property: Use the flex property with percentages (e.g., flex: 50%;) to adjust the width of items based on the screen size. 3. CSS Media Queries Media query is a CSS technique introduced in CSS3. It uses the¬†@mediarule to include a block of CSS properties only if a certain condition is true.\nExample If the browser window is 600px or smaller, the background color will be lightblue:\n@media (max-width: 600px) { body { background-color: lightblue; } Add a Breakpoint: Earlier in this tutorial we made a web page with rows and columns, and it was responsive, but it did not look good on a small screen.\nMedia queries can help with that. We can add a breakpoint where certain parts of the design will behave differently on each side of the breakpoint.\nAlways Design for Mobile First Mobile First means designing for mobile before designing for desktop or any other device (This will make the page display faster on smaller devices).\nThis means that we must make some changes in our CSS.\nInstead of changing styles when the width gets¬†smaller¬†than 768px, we should change the design when the width gets¬†larger¬†than 768px. This will make our design Mobile First:\nTypical Device Breakpoints There are tons of screens and devices with different heights and widths, so it is hard to create an exact breakpoint for each device. To keep things simple you could target five groups:\n/* Extra small devices (phones, 600px and down) */ @media only screen and (max-width: 600px) {...} /* Small devices (portrait tablets and large phones, 600px and up) */ @media only screen and (min-width: 600px) {...} /* Medium devices (landscape tablets, 768px and up) */ @media only screen and (min-width: 768px) {...} /* Large devices (laptops/desktops, 992px and up) */ @media only screen and (min-width: 992px) {...} /* Extra large devices (large laptops and desktops, 1200px and up) */ @media only screen and (min-width: 1200px) {...} CSS Animations CSS allows animation of HTML elements without using JavaScript!. An animation lets an element gradually change from one style to another. You can change as many CSS properties you want, as many times as you want. To use CSS animation, you must first specify some keyframes for the animation. Keyframes hold what styles the element will have at certain times. Animations is just transaction from initial to final position. The @keyframes Rule: When you specify CSS styles inside the @keyframes rule, the animation will gradually change from the current to the new style at certain times.\n@keyframes animation-name { to{ /* Intial properties */ left: 0%; rotate: 0; top: 0; } from{ /* final properties */ left: 75%; rotate: 360deg; border-radius: 50%; background-color: green; } } /* we can also give animation in percenatge so when the animation is 25% complete, 50% complete, and again when the animation is 100% complete: */ @keyframes animation-name { 0%{ left: 0%; rotate: 0; top: 0; } 25%{ left: 75%; top: 0; background-color: blue; } 50%{ left: 75%; top: 73%; rotate: 360deg; background-color: green; } 75%{ left: 0; top: 73%; background-color: aqua; } 100%{ left: 0; top: 0; } } CSS Animation Properties Property Description @keyframes Specifies the animation code animation A shorthand property for setting all the animation properties. animation:¬†example 5s linear 2s infinite alternate; animation-delay specifies a delay for start of an animation. like 1s,5s animation-direction Specifies whether an animation should be played forwards, backward or in alternate cycles.normal,reverse,alternate,alternate-reverse. animation-duration specifies how long time an animation should take to complete one cycle like. 2s,4s. animation-iteration-count Specifies the number of times an animation should be played. like 2,4, or infinite. animation-name Specifies the name of the @keyframes animation. animation-fill-mode Specifies a style for the element when animation is not playing or completed(before it starts, after it ends, or both).none,forwards,backwards,both. animation-timing-function Specifes the speed curve of the animation like ease,linear,ease-in,ease-out,ease-in-out,cubic-bezier(n,n,n,n) Animation-timing-function: ease¬†- Specifies an animation with a slow start, then fast, then end slowly (this is default) linear¬†- Specifies an animation with the same speed from start to end ease-in¬†- Specifies an animation with a slow start ease-out¬†- Specifies an animation with a slow end ease-in-out¬†- Specifies an animation with a slow start and end cubic-bezier(n,n,n,n)¬†- Lets you define your own values in a cubic-bezier function. ","permalink":"http://localhost:1313/posts/css/","summary":"\u003cp\u003eCSS (Cascadia Styling Sheet) is the style sheet language that\u0026rsquo;s use to specify how a document written in HTML or XML should be presented and styled.\u003c/p\u003e\n\u003ch2 id=\"css-boilerplate\"\u003eCSS Boilerplate\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003e*\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003emargin\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003epadding\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003ebox-sizing\u003c/span\u003e: \u003cspan style=\"color:#ff79c6\"\u003eborder-box\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003ehtml\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e,\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003ebody\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003ewidth\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e100\u003c/span\u003e\u003cspan style=\"color:#8be9fd\"\u003e%\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003eheight\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e100\u003c/span\u003e\u003cspan style=\"color:#8be9fd\"\u003e%\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"how-to-link-css-with-html\"\u003eHow to Link CSS with HTML\u003c/h2\u003e\n\u003cp\u003eAdd the line after tittle tag in your html file\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTips:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWe use \u003ccode\u003e.\u003c/code\u003e dot to target class in CSS\u003c/li\u003e\n\u003cli\u003eWe use \u003ccode\u003e#\u003c/code\u003e hash to target id in CSS\u003c/li\u003e\n\u003cli\u003eAlso if you want to target tag we can simply target like h3{}\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eDiv:\u003c/em\u003e box means div and also when e have more than one element and also when there is rectangle shape, very high change there is div ;).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"units-in-css\"\u003eUnits in CSS\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003epx :\u003c/strong\u003e It is use to define the measurement in pixels. \u003ccode\u003e1px = 1/96th of inch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e% :\u003c/strong\u003e It is used to define the measurement as a percentage that is relative to another value (maybe to their \u003ccode\u003eparent element\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evh :\u003c/strong\u003e It is relative to the height of the \u003ccode\u003eviewpoint(screen)\u003c/code\u003e. \u003ccode\u003e1vh = 1% or 1/100 of the height of the viewpoint\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evw :\u003c/strong\u003e It is relative to the width of the \u003ccode\u003eviewpoint(screen)\u003c/code\u003e. \u003ccode\u003e1vm or 1/100 of the width of the width of viewpoint\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eem :\u003c/strong\u003e Relative to the font-size of the element \u003ccode\u003e2em means 2 times the size of the current font\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003erem :\u003c/strong\u003e Relative to font-size of the root element like \u003ccode\u003ehtml tag\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evmin :\u003c/strong\u003e Relative to 1% of viewport\u0026rsquo;s* smaller dimension\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evmax :\u003c/strong\u003e Relative to 1% of viewport\u0026rsquo;s* larger dimension\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cem\u003eTip:\u003c/em\u003e There are mainly two type of fonts sans-serif and serif. The difference is the presence of decorative strokes, or serifs at the beginning and end of letters.\u003c/p\u003e","title":"CSS - Cascading Style Sheets"},{"content":"HTML(Hyper Text Markup Language) is the standard language use to create and structure content on the web.\nWhy learn html: because we need to create website for that we need html, or because of content.\nGetting with HTML Tip: type - html:5 / ! - for boilerplate code\nBoilerplate Code \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;!-- tells that we are using HTML5 --\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;!--The tag represents the root of an HTML document.--\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- head is a container for metadata (data about data)--\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;!--tag defines metadata about an HTML document--\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;!--defines the title of the document.--\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- defines the document\u0026#39;s body.--\u0026gt; \u0026lt;!-- content added here --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Tags in HTML \u0026lt;h1\u0026gt;\u0026lt;/h1\u0026gt; - heading tag and Most Importance \u0026lt;h2\u0026gt;\u0026lt;/h2\u0026gt; - less Importance than h1 \u0026lt;h3\u0026gt;\u0026lt;/h3\u0026gt; - less Importance than h2 \u0026lt;h4\u0026gt;\u0026lt;/h4\u0026gt; - less Importance than h3 \u0026lt;h5\u0026gt;\u0026lt;/h5\u0026gt; - less Importance than h4 \u0026lt;h6\u0026gt;\u0026lt;/h6\u0026gt; - less Importance than h5 \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; - paragraph tag used to add paragraph/text on website \u0026lt;b\u0026gt;\u0026lt;/b\u0026gt; - used to bold the text \u0026lt;i\u0026gt;\u0026lt;/i\u0026gt; - used to italic the text \u0026lt;sup\u0026gt;\u0026lt;/sup\u0026gt; - used for to add super script \u0026lt;sub\u0026gt;\u0026lt;/sub\u0026gt; - used to add sub script \u0026lt;br\u0026gt;\u0026lt;/br\u0026gt; - used to break line \u0026lt;hr\u0026gt; - used to add horizontal row \u0026lt;ol\u0026gt;\u0026lt;/ol\u0026gt; - used to add ordered list \u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt; - used to add unordered list \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; - used to add items in list \u0026lt;a href =\u0026quot;source\u0026quot;\u0026gt; \u0026lt;/a\u0026gt; - used to make text clickable/hyperlink Tip: to open link in new tab use this target=\u0026quot;_blank\u0026quot; \u0026lt;img src=\u0026quot;source\u0026quot; alt=\u0026quot; \u0026quot;\u0026gt; - used to add image to website \u0026lt;form\u0026gt;\u0026lt;/form\u0026gt; - used to create the form \u0026lt;label\u0026gt;\u0026lt;/label\u0026gt; - used to add label to input field \u0026lt;input id =\u0026quot;abc\u0026quot; type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot; \u0026gt; - used to add input field \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; div is rectangle in his nature with 0 height div is used to combine multiple elements together in html \u0026lt;table\u0026gt;\u0026lt;/table\u0026gt; - A table in HTML consists of table cells inside rows and columns. \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; - Each table cell is defined by a and a tag \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt; - table row starts with a and ends with a tag \u0026lt;th\u0026gt;\u0026lt;/th\u0026gt; - Defines a header cell in a table Input Types for Input tag text : \u0026lt;input type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot;\u0026gt; email : \u0026lt;input type=\u0026quot;email\u0026quot; placeholder=\u0026quot;Email\u0026quot;\u0026gt; password : \u0026lt;input type=\u0026quot;password\u0026quot; placeholder=\u0026quot;Password\u0026quot;\u0026gt; checkbox : \u0026lt;input type=\u0026quot;checkbox\u0026quot; \u0026gt; radio button : \u0026lt;input type=\u0026quot;radio\u0026quot; \u0026gt; Male file : \u0026lt;input type=\u0026quot;file\u0026quot; \u0026gt; range : \u0026lt;input type=\u0026quot;range\u0026quot; \u0026gt; color: \u0026lt;input type=\u0026quot;color\u0026quot; \u0026gt; date : \u0026lt;input type=\u0026quot;date\u0026quot; \u0026gt; submit : \u0026lt;input type=\u0026quot;submit\u0026quot; \u0026gt; id: id is attribute that is used to assign id to an element. It is very helpful when we have multiple of same type but we need to treat them differently. id must be unique of element.\nclass: As we know that we are not allowed to assign same id to different element but when we need this type of thing we use the class attribute.\nHTML5 Semantics HTML5 semantics refers to the use of specific tags like \u0026lt;header\u0026gt;,\u0026lt;footer\u0026gt;,\u0026lt;nav\u0026gt;,\u0026lt;article\u0026gt;,\u0026lt;section\u0026gt;,etc, to provide clearer structure and meaning to web content. This improves accessibility, better SEO, and facilitates better better understanding by both human and machines, These tags did not to something special they act like normal div but with clearer structure and meaning about there content.\nSemantics Elements \u0026lt;header\u0026gt; : First section website can be called header nav : Navigation bar. \u0026lt;main\u0026gt; : complete website in this tag. \u0026lt;section\u0026gt; : A page can split into sections like introduction, contact information, Details, etc and each of these sections can be in a different section tag. \u0026lt;article\u0026gt; : It contains independent content which does not require any other context, blog post, newspaper article etc. \u0026lt;aside\u0026gt; : It is used to place content in a sidebar i.e aside from the existing content. IT is related to surrounding context. \u0026lt;footer\u0026gt; : Footer located at the bottom of any article or document, they can contain contact details, copyright information etc. There can be multiple footers on a page. \u0026lt;audio\u0026gt; : use to add audio support \u0026lt;video\u0026gt; : use to add video support ","permalink":"http://localhost:1313/posts/html/","summary":"\u003cp\u003eHTML(Hyper Text Markup Language) is the standard language use to create and structure content on the web.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhy learn html:\u003c/strong\u003e because we need to create website for that we need html, or because of content.\u003c/p\u003e\n\u003ch2 id=\"getting-with-html\"\u003eGetting with HTML\u003c/h2\u003e\n\u003cp\u003eTip: type - \u003ccode\u003ehtml:5\u003c/code\u003e / \u003ccode\u003e!\u003c/code\u003e - for boilerplate code\u003c/p\u003e\n\u003ch5 id=\"boilerplate-code\"\u003eBoilerplate Code\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- tells that we are using HTML5 --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003ehtml\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003elang\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!--The tag represents the root of an HTML document.--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003ehead\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- head is a container for metadata (data about data)--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003echarset\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!--tag defines metadata about an HTML document--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003ename\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;viewport\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003econtent\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003etitle\u003c/span\u003e\u0026gt;Document\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003etitle\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!--defines the title of the document.--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003ehead\u003c/span\u003e\u0026gt; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003ebody\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- defines the document\u0026#39;s body.--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- content added here --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003ehtml\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"tags-in-html\"\u003eTags in HTML\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u0026lt;/h1\u0026gt;\u003c/code\u003e - heading tag and Most Importance\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u0026lt;/h2\u0026gt;\u003c/code\u003e - less Importance than h1\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h3\u0026gt;\u0026lt;/h3\u0026gt;\u003c/code\u003e - less Importance than h2\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h4\u0026gt;\u0026lt;/h4\u0026gt;\u003c/code\u003e - less Importance than h3\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h5\u0026gt;\u0026lt;/h5\u0026gt;\u003c/code\u003e - less Importance than h4\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h6\u0026gt;\u0026lt;/h6\u0026gt;\u003c/code\u003e - less Importance than h5\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;\u003c/code\u003e - paragraph tag used to add paragraph/text on website\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;b\u0026gt;\u0026lt;/b\u0026gt;\u003c/code\u003e - used to bold the text\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;i\u0026gt;\u0026lt;/i\u0026gt;\u003c/code\u003e - used to italic the text\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;sup\u0026gt;\u0026lt;/sup\u0026gt;\u003c/code\u003e - used for to add super script\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;sub\u0026gt;\u0026lt;/sub\u0026gt;\u003c/code\u003e - used to add sub script\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;br\u0026gt;\u0026lt;/br\u0026gt;\u003c/code\u003e - used to break line\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;hr\u0026gt;\u003c/code\u003e - used to add horizontal row\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u0026lt;/ol\u0026gt;\u003c/code\u003e - used to add ordered list\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt;\u003c/code\u003e - used to add unordered list\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;\u003c/code\u003e - used to add items in list\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;a href =\u0026quot;source\u0026quot;\u0026gt; \u0026lt;/a\u0026gt;\u003c/code\u003e - used to make text clickable/hyperlink\n\u003cul\u003e\n\u003cli\u003eTip: to open link in new tab use this \u003ccode\u003etarget=\u0026quot;_blank\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;img src=\u0026quot;source\u0026quot; alt=\u0026quot; \u0026quot;\u0026gt;\u003c/code\u003e - used to add image to website\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;form\u0026gt;\u0026lt;/form\u0026gt;\u003c/code\u003e - used to create the form\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;label\u0026gt;\u0026lt;/label\u0026gt;\u003c/code\u003e - used to add label to input field\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;input id =\u0026quot;abc\u0026quot; type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot; \u0026gt;\u003c/code\u003e - used to add input field\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u003c/code\u003e\n\u003col\u003e\n\u003cli\u003ediv is rectangle in his nature with 0 height\u003c/li\u003e\n\u003cli\u003ediv is used to combine multiple elements together in html\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u0026lt;/table\u0026gt;\u003c/code\u003e - A table in HTML consists of table cells inside rows and columns.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;td\u0026gt;\u0026lt;/td\u0026gt;\u003c/code\u003e - Each table cell is defined by a and a tag\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003c/code\u003e - table row starts with a and ends with a tag\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;th\u0026gt;\u0026lt;/th\u0026gt;\u003c/code\u003e - Defines a header cell in a table\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"input-types-for-input-tag\"\u003eInput Types for Input tag\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003etext :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot;\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eemail :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;email\u0026quot; placeholder=\u0026quot;Email\u0026quot;\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003epassword :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;password\u0026quot; placeholder=\u0026quot;Password\u0026quot;\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003echeckbox :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;checkbox\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eradio button :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;radio\u0026quot; \u0026gt; Male\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003efile :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;file\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003erange :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;range\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecolor:\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;color\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003edate :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;date\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003esubmit :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;submit\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"id\"\u003eid:\u003c/h5\u003e\n\u003cp\u003eid is attribute that is used to assign id to an element. It is very helpful when we have multiple of same type but we need to treat them differently. id must be unique of element.\u003c/p\u003e","title":"HTML - The Language of the Web"},{"content":"\nWeb development is a continuously evolving field, and becoming a proficient full-stack developer in 2025 requires not only mastering essential basics but also adopting advanced tools and concepts. This roadmap will guide you, step by step, through the skills and technologies you need to become job-ready and adaptable to industry trends.\nWeb Development [Basic] (3 Months) üìÑ Topics Covered: 1. HTML \u0026amp; CSS Build at least 100 static landing pages to master the fundamentals and different layouts. 2. Git and GitHub Learn the foundations of version control: Creating repositories Branching and merging workflows Collaborating on platforms like GitHub 3. Basic JavaScript Core Concepts: Variables Functions Control Flow (if/else, loops) Data Structures (objects, arrays) DOM APIs: Event handling DOM manipulation Using browser-native features 4. Build the Following Projects Digital Clock Build a digital clock with accurate timed updates.\nStopwatch and Timer App Create an app with stopwatch and countdown timer functionality.\nTodo App with Local Storage Save user data (tasks) using localStorage.\nWeather App Fetch live weather data using APIs based on the user‚Äôs location.\n**Monkey Typing Game Create a typing test with stats like speed (WPM) and accuracy.\nImage Slider Build an interactive slider component.\nBreak Time (15 Days): Quick Networking and Internet Basics Learn essential network and web communication concepts: **What is the Internet?, **How it works?** Understanding Protocols (HTTP, HTTPS, FTP, TCP/IP) **TCP vs UDP Protocol Basics of DNS and **DNS Records** (A, CNAME, MX, TXT) Client-Server Architecture Diving into topics like 3-way TCP Handshakes, IP Addresses (Private vs Public), and Subnet Masks Basic Backend Development (3 Months) üìÑ Topics Covered: Servers: Understand the function of a server. Differentiate between Web Servers, API Servers, and File Servers. Cloud Servers vs On-Premises Servers Introduce virtualization concepts.\nNode.js Learn how to build REST APIs with Node.js: Using frameworks like Express.js, Hono.js, or Intent.js\nConcepts like Headers, Body, and HTTP Methods Databases (DB): Integrate MongoDB with Mongoose (NoSQL Database). Learn SQL databases with PostgreSQL. Compare SQL vs NoSQL Databases. Introduce **ORM Frameworks** (Prisma, Drizzle, Knex). **Authentication and Authorization**: **JWT vs Sessions** Learn different identification and security methods.\n**Build Backend Projects**: Simple CRUD Applications (like task managers) E-Commerce API Weather API Wrapper Task Management API **Advanced Backend Concepts**: **Redis** and caching systems Queue systems (BullMQ, SQS) Rate limiting strategies for APIs Batch processing jobs for async tasks **Database Optimizations** and indexing **Soft Skills for Developers**: Build a presence on platforms like Twitter. Share what you\u0026rsquo;re learning and building to connect with others.\nShare feedback and ask for advanced learning topics. Build confidence while solving real-life problems. React.js (2 Months) React.js is one of the most popular front-end libraries for building web interfaces.\nüìÑ Topics Covered: **Why Use React?** Understand the advantages of component-based architecture. **React Fundamentals**: **Hooks** (useState, useEffect, useReducer) **Components** and JSX Component lifecycle Adding styling with **TailwindCSS** State management using **Redux** and **Zustand** **Routing with React Router**: Learn navigation in React-based apps **React Projects**: **Todo App with Local Storage** **Weather App** **Amazon-like Working Clone** (FE only) **YouTube Clone** (using Google APIs for video data) Full-Stack Applications (MERN or PERN) Begin combining front-end and back-end skills to create complex applications:\nReal-Time Collaboration Tools (like Google Docs) Multi-Vendor E-Commerce Platforms Social Media Automation Tools (similar to LinkedIn‚Äôs automation tools) Video Conferencing Applications (leveraging **WebRTC or SFU**) Live Streaming Studio (with RTMP) Advanced whiteboarding tools Connectors for workflow automation (Zapier-like APIs) Cloud Basics (AWS) (1.5 Months) Learn the fundamentals of hosting, deploying, and scaling applications on servers.\nüìÑ Topics Covered: **AWS Services**: **EC2**, Load Balancers, CloudFront, S3 Storage **Private and Public VPC** IAM Roles and Federated Management Depict networking setups using Internet Gateways. **Scripts and Automation**: Learn how to automate deployments with **CloudFormation Templates**. Become Unstoppable (Advanced Topics) Master niche tools and technologies to thrive in enterprise environments.\n1. **Distributed Systems** Learn **microservices architecture**: Communication strategies like REST, gRPC, Saga patterns. Understanding CAP Theorem and data sharding. 2. **API Design and Optimization** **GraphQL** and **gRPC** for fast and scalable APIs. API version control and rate-limiting (use Redis, HATEOAS). 3. **Caching Strategies** CDN integration and distributed caches using Redis. Optimize performance with **cache partitioning**. 4. **Authentication \u0026amp; Authorization** Secure APIs with **OAuth 2.0, JWT**, and session management. Implement **Role-Based Access Control (RBAC)**. 5. **Database Optimization** Schema optimization with indexing. Learn SQL Query Optimization. Explore distributed databases (like CockroachDB, Cassandra). 6. **Observability** Set up dashboards with **Prometheus and Grafana**. Implement **distributed tracing** for debugging. Final Thought on Becoming Full-Stack in 2025 This roadmap provides a clear and structured guide to becoming a proficient full-stack developer by 2025. It covers everything from the basics of HTML to advanced distributed systems, ensuring you\u0026rsquo;re equipped to handle real-world challenges with confidence.\nHappy coding! üöÄ\n","permalink":"http://localhost:1313/posts/web-dev-roadmap/","summary":"\u003cp\u003e\u003cimg alt=\"cover-image\" loading=\"lazy\" src=\"/posts/assets/web-dev-roadmap/web-dev-roadmap.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eWeb development is a continuously evolving field, and becoming a proficient full-stack developer in 2025 requires not only mastering essential basics but also adopting advanced tools and concepts. This roadmap will guide you, step by step, through the skills and technologies you need to become job-ready and adaptable to industry trends.\u003c/p\u003e\n\u003ch2 id=\"web-development-basic-3-months\"\u003eWeb Development [Basic] (3 Months)\u003c/h2\u003e\n\u003ch3 id=\"-topics-covered\"\u003eüìÑ Topics Covered:\u003c/h3\u003e\n\u003ch4 id=\"1-html--css\"\u003e1. HTML \u0026amp; CSS\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eBuild \u003cstrong\u003eat least 100 static landing pages\u003c/strong\u003e to master the fundamentals and different layouts.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"2-git-and-github\"\u003e2. Git and GitHub\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eLearn the foundations of version control:\u003c/li\u003e\n\u003cli\u003eCreating repositories\u003c/li\u003e\n\u003cli\u003eBranching and merging workflows\u003c/li\u003e\n\u003cli\u003eCollaborating on platforms like GitHub\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"3-basic-javascript\"\u003e3. Basic JavaScript\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCore Concepts:\u003c/li\u003e\n\u003cli\u003eVariables\u003c/li\u003e\n\u003cli\u003eFunctions\u003c/li\u003e\n\u003cli\u003eControl Flow (if/else, loops)\u003c/li\u003e\n\u003cli\u003eData Structures (objects, arrays)\u003c/li\u003e\n\u003cli\u003eDOM APIs:\u003c/li\u003e\n\u003cli\u003eEvent handling\u003c/li\u003e\n\u003cli\u003eDOM manipulation\u003c/li\u003e\n\u003cli\u003eUsing browser-native features\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"4-build-the-following-projects\"\u003e4. Build the Following Projects\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDigital Clock\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBuild a digital clock with accurate timed updates.\u003c/p\u003e","title":"Becoming a Full-Stack Web Developer in 2025"},{"content":"\nThere comes a time in life when everything around you seems stifling. Every breath becomes a fight; the air seems weighty and pushes against your chest. Until you feel as though you are drowning, the weight of unmet expectations, unresolved grief, and constant disappointment presses down on your soul. Running away is not really an option; you yearn for escape; mountain tops call with promises of seclusion, vast roads whisper freedom into your ears. You thus withdraw inside, running back to yourself as the last haven remaining.\nThe never-ending battle to articulate what you are going through wears you out. Exhaustion penetrates into your bones, therefore rendering the act of hoping or trusting an impossible task. Love seems far, as like it belongs in a world you are no longer able to reach. You paste on a brave front at first since that is what others expect. You convince everyone you are good while donning a mask of normalcy. Still, the lies get more difficult to maintain quickly. You start to shun people‚Äînot out of indifference but rather because you have nothing left to offer. Plans are called off, messages go unacknowledged, calls are dismissed. Loneliness starts to be your haven since it feels safer than you could want. Alone, you can breathe without thinking about others.\nYou haven\u0026rsquo;t ceased yearning connection. Somewhere deep within, a part of you still yearns for closeness‚Äîfor someone who knows. Still, the suffering has caused you caution. You want the flames of your rage and grief to scorish those you love, but you worry bringing your inner turmoil upon others. You thus build towering, impervious barriers to keep everyone out. Your narrative too weighty to discuss, hence it appears impossible to explain your emotions. You worry about being misinterpreted and about people judging you for the wounds you bear as much as for your behavior. Vulnerability seems like a trap, and in a society where rumors travel like wildfire the risk is too large.\nStill, the damage stays, chewing away at you. The weight of past mistakes and losses hangs on your soul like a shadow not going to erase. The toughest is nighttime. The silence sharpens everything‚Äîthe regrets, the \u0026ldquo;what-ifs,\u0026rdquo; the memories of what you had and lost. \u0026ldquo;If only,\u0026rdquo; you consider. If only you had chosen another course. Just you would have been sufficient. Your chest hurts constantly, a faint aching never going away. The tears have stopped even though the suffering seems too great to contain. Even alone, crying seems like a luxury you cannot afford right now.\nThough certain emotions never alter with time. Despite the years and the heartache, that love you carried for someone still persists, stubborn and immobile. You know, though, you cannot go back to what was. Your heart‚Äîfragile, wounded‚Äîno longer has the strength to fall another time; the trust you once freely offered feels irreversibly damaged.\nThough it is debilitating, pain does not define you. Indeed, it shapes you, but it does not define you totally. Healing is nonlinear, messy, and usually frustrating. Setbacks and times when the weight seems intolerable will abound. Even in those times, though, it\u0026rsquo;s crucial to forgive yourself‚Äîfor the times you felt weak or stumbled under pressure. Honor the love you bear, even if it is complex or mixed-fevers. Above all, hang on. Because the weight won\u0026rsquo;t last permanently regardless of how heavy it feels right now. Deepest scars can heal as well. The darkest darkness lift too, finally.\n","permalink":"http://localhost:1313/posts/forher/","summary":"\u003cp\u003e\u003cimg alt=\"cover-image\" loading=\"lazy\" src=\"/posts/assets/forher/forher.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eThere comes a time in life when everything around you seems stifling. Every breath becomes a fight; the air seems weighty and pushes against your chest. Until you feel as though you are drowning, the weight of unmet expectations, unresolved grief, and constant disappointment presses down on your soul. Running away is not really an option; you yearn for escape; mountain tops call with promises of seclusion, vast roads whisper freedom into your ears. You thus withdraw inside, running back to yourself as the last haven remaining.\u003c/p\u003e","title":"What It Means to Feel for Someone"},{"content":"This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can‚Äôt cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax.\nHeadings Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores. Strong emphasis, aka bold, with asterisks or underscores. Combined emphasis with asterisks and underscores. Strikethrough with two tildes. Bold and nested italic. All bold and italic. Bold and italic nested.\nLists Ordered: First ordered list item Another item Actual numbers don\u0026rsquo;t matter, just that it\u0026rsquo;s a number 1st. 2nd. 3rd. Unordered: This is a list item\nThis is a nested list item This is a nested list item This is another list item This is another list item\nWrite the press release\nUpdate the website\nContact the media\nLinks This is a link.\nThis link has a title attribute.\nTables Syntax Description Header Title Paragraph Text Blockquotes Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.\nYou can reference a footnote like this.\nAll generalizations are false, including this one. ‚Äî Mark Twain. 1\nCode Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print(s) #include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; void heapify(int *arr, int index, int n) { int largest = index; int left = 2 * index + 1; int right = 2 * index + 2; if (left \u0026lt; n \u0026amp;\u0026amp; arr[left] \u0026gt; arr[largest]) largest = left; if (right \u0026lt; n \u0026amp;\u0026amp; arr[right] \u0026gt; arr[largest]) largest = right; if (largest != index) { swap(arr[largest], arr[index]); heapify(arr, largest, n); } } void buildHeap(int *arr, int n) { for (int i = (n / 2) - 1; i \u0026gt;= 0; i--) { heapify(arr, i, n); } } void heapSort(int *arr, int n) { buildHeap(arr, n); for (int i = n - 1; i \u0026gt; 0; i--) { swap(arr[i], arr[0]); heapify(arr, 0, i); } } void print(int *arr, int size) { for (int i = 0; i \u0026lt; size; i++) cout \u0026lt;\u0026lt; arr[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; } int main() { int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; buildHeap(arr, 10); print(arr, 10); heapSort(arr, 10); print(arr, 10); return 0; } No language indicated, so no syntax highlighting. But let\u0026#39;s throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. You can remove line numbers, change the highlighting theme, and more. See Syntax Highlighting and Highlight.\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello, World!\\n\u0026#34;); return 0; } Math You can use LaTeX-style math with $ and $$ delimiters. For example, $x^2$ renders as $x^2$, and $$\\frac{x}{y}$$ renders as: $$\\frac{x}{y}$$\nWe can throw this scary-looking equation at you:\n$$ \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\ldots} } } } $$\nHorizontal Rules Three or more\u0026hellip; Hyphens ---, Asterisks ***, or Underscores ___.\nMiscellaneous Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:scroll-auto to only The world is flat. apply the scroll-auto utility on hover.\nterm definition another definition https://www.brainyquote.com/quotes/mark_twain_137872.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/posts/markdown/","summary":"\u003cp\u003eThis Markdown cheat sheet \u003cstrong\u003eprovides\u003c/strong\u003e a quick overview of all the Markdown syntax elements. It can‚Äôt cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic \u003cem\u003esyntax\u003c/em\u003e and extended syntax.\u003c/p\u003e\n\u003ch1 id=\"headings\"\u003eHeadings\u003c/h1\u003e\n\u003chr\u003e\n\u003ch1 id=\"heading-1\"\u003eHeading 1\u003c/h1\u003e\n\u003ch2 id=\"heading-2\"\u003eHeading 2\u003c/h2\u003e\n\u003ch3 id=\"heading-3\"\u003eHeading 3\u003c/h3\u003e\n\u003ch4 id=\"heading-4\"\u003eHeading 4\u003c/h4\u003e\n\u003ch5 id=\"heading-5\"\u003eHeading 5\u003c/h5\u003e\n\u003ch6 id=\"heading-6\"\u003eHeading 6\u003c/h6\u003e\n\u003ch1 id=\"emphasis\"\u003eEmphasis\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003eEmphasis, aka italics, with asterisks or underscores. \u003cstrong\u003eStrong emphasis\u003c/strong\u003e, aka bold, with asterisks or underscores. Combined emphasis with asterisks and underscores. \u003cdel\u003eStrikethrough\u003c/del\u003e with two tildes. \u003cstrong\u003e\u003cem\u003eBold and nested italic\u003c/em\u003e\u003c/strong\u003e. \u003cstrong\u003e\u003cem\u003eAll bold and italic\u003c/em\u003e\u003c/strong\u003e. \u003cstrong\u003e\u003cem\u003e\u003cem\u003eBold and italic nested\u003c/em\u003e\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e","title":"Markdown Cheat Sheet"},{"content":"This is English text.\n€å€Å ÿßÿ±ÿØŸà €Å€í€î\nAnother test: ⁄©€åÿß €å€Å ŸÅŸàŸÜŸπ ⁄©ÿßŸÖ ⁄©ÿ± ÿ±€Åÿß €Å€íÿü\nhello world\n","permalink":"http://localhost:1313/posts/temp-article/","summary":"\u003cp\u003eThis is English text.\u003c/p\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003e€å€Å ÿßÿ±ÿØŸà €Å€í€î\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003cp\u003eAnother test: \u003c!-- raw HTML omitted --\u003e⁄©€åÿß €å€Å ŸÅŸàŸÜŸπ ⁄©ÿßŸÖ ⁄©ÿ± ÿ±€Åÿß €Å€íÿü\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003ehello world\u003c/p\u003e","title":"temp article"},{"content":"\nReact.js is a JavaScript library for building user interfaces. Developed by Facebook (now Meta) in 2013. It is component-based, declarative, and allows for efficient UI updates. Key Features of React Component-Based Architecture: UI is built using reusable components. Virtual DOM: Updates only the changed parts, making React fast. Unidirectional Data Flow: Props and state maintain a predictable data structure. JSX (JavaScript XML): A syntax extension that lets you write HTML inside JavaScript. Hooks: Allow functional components to have state and other features. Mutable vs Immutable Mutable (Changeable) Mutable data types can be changed after creation. Example: Objects \u0026amp; Arrays are mutable. let arr = [1, 2, 3]; arr.push(4); // Modifies the original array console.log(arr); // [1, 2, 3, 4] Immutable (Unchangeable) Immutable data cannot be changed directly. Instead, you create a new copy. Example: Strings \u0026amp; Numbers are immutable. let str = \u0026#34;Hello\u0026#34;; str[0] = \u0026#34;M\u0026#34;; // This won\u0026#39;t change the string console.log(str); // \u0026#34;Hello\u0026#34; Example of immutable object handling (creating a new object instead of modifying the original):\nconst person = { name: \u0026#34;Ahmad\u0026#34;, age: 19 }; const updatedPerson = { ...person, age: 20 }; console.log(updatedPerson); // { name: \u0026#34;Ahmad\u0026#34;, age: 20 } Arrays \u0026amp; Objects Destructuring Array Destructuring Extract values from an array and assign them to variables. const numbers = [10, 20, 30]; const [a, b, c] = numbers; console.log(a, b, c); // 10 20 30 Object Destructuring const person = { name: \u0026#34;Ahmad\u0026#34;, age: 19, city: \u0026#34;Multan\u0026#34; }; const { name, age } = person; console.log(name, age); // Ahmad 19 Import \u0026amp; Export in JavaScript Exporting in JavaScript Named Export (Multiple Exports) export const name = \u0026#34;Ahmad\u0026#34;; export const age = 19; export function greet() { return \u0026#34;Hello!\u0026#34;; } Default Export (Single Export per File) export default function greet() { return \u0026#34;Hello!\u0026#34;; } Importing in JavaScript Named Import import { name, age, greet } from \u0026#34;./module.js\u0026#34;; console.log(name, age); // Ahmad 19 console.log(greet()); // Hello! Default Import import greet from \u0026#34;./module.js\u0026#34;; console.log(greet()); // Hello! Import Everything import * as data from \u0026#34;./module.js\u0026#34;; console.log(data.name); // Ahmad console.log(data.greet()); // Hello! Concept Description Mutable Can be changed (Objects, Arrays). Immutable Cannot be changed (Strings, Numbers). Primitive Types Stored by value (string, number, boolean, etc.). Reference Types Stored by reference (object, array, function). Destructuring Extracts values from arrays/objects into variables. Import/Export Used to share JavaScript files/modules. Spread (...) Expands arrays/objects into individual values. Rest (...) Gathers multiple values into an array. Map \u0026amp; Filter in JavaScript for React map() Method map() is used to iterate over an array and return a new array with modified elements. It does not modify the original array. Syntax:\nconst newArray = array.map((element, index, array) =\u0026gt; { return modifiedElement; }); Example:\nconst numbers = [1, 2, 3, 4]; const doubled = numbers.map(num =\u0026gt; num * 2); console.log(doubled); // [2, 4, 6, 8] filter() Method filter() is used to filter elements based on a condition. It returns a new array with only the elements that satisfy the condition. The original array remains unchanged. Syntax:\nconst newArray = array.filter((element, index, array) =\u0026gt; { return condition; }); Example:\nconst numbers = [1, 2, 3, 4, 5, 6]; const evenNumbers = numbers.filter(num =\u0026gt; num % 2 === 0); console.log(evenNumbers); // [2, 4, 6] Method Purpose Returns map() Transforms each element in an array A new array with modified values filter() Selects elements that match a condition A new array with filtered values map() + filter() First filters elements, then transforms them A new modified and filtered array ‚úÖ Use map() to modify each element in an array.\n‚úÖ Use filter() to remove unwanted elements from an array.\n‚úÖ Always use a key prop in React when rendering lists.\nDifference Between Library \u0026amp; Framework Feature Library Framework Definition A collection of reusable code that helps developers perform specific tasks. A full-fledged structure that dictates how the code should be organized. Control You control when and how to use the library. The framework controls the flow of execution. Flexibility More flexible, can be used with other tools. Less flexible, enforces a specific architecture. Example React.js (UI library), Lodash, jQuery Angular, Django, Ruby on Rails Key Difference React (Library): You decide how to structure the app. Angular (Framework): It dictates the structure. Real DOM vs Virtual DOM What is the DOM (Document Object Model)? The DOM represents the structure of an HTML document as a tree. JavaScript can manipulate the DOM to update elements dynamically. What is Real DOM? The actual structure of an HTML document in the browser. When a change is made, the entire page re-renders. Slow performance for frequent updates. What is Virtual DOM? A lightweight copy of the Real DOM. React updates the Virtual DOM first, then compares it with the previous version using diffing. Only the changed parts of the Real DOM get updated, making React much faster. Difference Between Real DOM \u0026amp; Virtual DOM Feature Real DOM Virtual DOM Definition Actual representation of the webpage. Lightweight copy of the Real DOM. Updates Directly updates the UI. Updates in memory first, then syncs with the Real DOM. Performance Slower (entire page re-renders). Faster (only updates changed parts). Efficiency Expensive updates, slow rendering. Optimized updates, fast rendering. Used in Vanilla JavaScript, jQuery. React, Vue.js. Why Virtual DOM is Important in React? ‚úÖ Faster updates compared to Real DOM.\n‚úÖ Better performance for dynamic content.\n‚úÖ Efficient UI rendering with minimal reflows.\nVite vs Create React App (CRA) in React.js 1. Vite üöÄ Modern, fast, and optimized build tool for React. Uses ES modules (ESM) and Hot Module Replacement (HMR) for instant updates. Super fast startup (no bundling in development). Supports TypeScript, JSX, and more out-of-the-box. Tree-shaking \u0026amp; optimized builds for production. Install React with Vite\nnpm create vite@latest npm install npm run dev 2. Create React App (CRA) üèóÔ∏è Traditional way to set up React projects. Uses Webpack (slower than Vite). Slower builds and HMR compared to Vite. Good for beginners, but outdated for large apps. Install React with CRA\nnpx create-react-app my-app cd my-app npm start JSX (JavaScript XML) \u0026amp; React Vite Folder Structure 1. JSX (JavaScript XML) JSX is a syntax extension for JavaScript used in React. Looks like HTML inside JavaScript but gets converted to JavaScript functions or React.createElement. Allows embedding JavaScript inside {}. Must return a single parent element (use \u0026lt;\u0026gt;...\u0026lt;/\u0026gt; if needed). const App = () =\u0026gt; { const name = \u0026#34;Ahmad\u0026#34;; return \u0026lt;h1\u0026gt;Hello, {name}!\u0026lt;/h1\u0026gt;; }; export default App; 2. React Vite Folder Structure . ‚îú‚îÄ‚îÄ eslint.config.js # ESLint configuration (optional) ‚îú‚îÄ‚îÄ index.html # Main HTML file (root of the app) ‚îú‚îÄ‚îÄ node_modules/ # Installed dependencies ‚îú‚îÄ‚îÄ package.json # Project metadata \u0026amp; dependencies ‚îú‚îÄ‚îÄ package-lock.json # Exact versions of installed packages ‚îú‚îÄ‚îÄ public/ # Static assets (images, fonts, etc.) ‚îú‚îÄ‚îÄ README.md # Project documentation ‚îú‚îÄ‚îÄ src/ # Main source code directory ‚îÇ ‚îú‚îÄ‚îÄ App.jsx # Main React component ‚îÇ ‚îú‚îÄ‚îÄ main.jsx # React entry file (renders App) ‚îÇ ‚îú‚îÄ‚îÄ assets/ # Images, styles, etc. ‚îÇ ‚îú‚îÄ‚îÄ components/ # Reusable UI components ‚îÇ ‚îú‚îÄ‚îÄ pages/ # Page components (if using routing) ‚îÇ ‚îî‚îÄ‚îÄ styles/ # Global CSS files (if needed) ‚îî‚îÄ‚îÄ vite.config.js # Vite configuration file Key Points ‚úÖ src/ contains all React components \u0026amp; logic.\n‚úÖ index.html is the main HTML template.\n‚úÖ Vite uses main.jsx to mount the React app into #root.\n‚úÖ Public files are served as-is from /public/.\nReact Components \u0026amp; How They Work 1. Component in React A component is a reusable, independent UI piece in React. Two types: Functional Components (recommended, use hooks). Class Components (older, uses this.state). Components return JSX and manage their own logic \u0026amp; state. const MyComponent = () =\u0026gt; { return \u0026lt;h1\u0026gt;Hello, React!\u0026lt;/h1\u0026gt;; }; export default MyComponent; 2. How They Work ‚úÖ We create components inside the src/components/ folder (e.g., MyComponent.jsx).\n‚úÖ Components are imported into App.jsx, which acts as the main component.\n‚úÖ main.jsx is responsible for rendering App.jsx inside the root \u0026lt;div\u0026gt; in index.html.\n‚úÖ ReactDOM.createRoot(document.getElementById('root')) creates the Virtual DOM and syncs\nFlow of Code in React Create a component (MyComponent.jsx): const MyComponent = () =\u0026gt; \u0026lt;h1\u0026gt;Hello, React!\u0026lt;/h1\u0026gt;; export default MyComponent; import it inside App.jsx: import MyComponent from \u0026#34;./components/MyComponent\u0026#34;; const App = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;MyComponent /\u0026gt; \u0026lt;/div\u0026gt; ); }; export default App; Render App.jsx inside main.jsx: import React from \u0026#34;react\u0026#34;; import ReactDOM from \u0026#34;react-dom/client\u0026#34;; import App from \u0026#34;./App\u0026#34;; ReactDOM.createRoot(document.getElementById(\u0026#34;root\u0026#34;)).render(\u0026lt;App /\u0026gt;); index.html contains root div: \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;root\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; Key Points ‚úÖ Components are modular \u0026amp; reusable in React.\n‚úÖ main.jsx renders App.jsx inside the root div.\n‚úÖ React Virtual DOM updates only changed parts for better performance. üöÄ\nConditional Rendering in React Conditional rendering in React allows components to render dynamically based on conditions.\nUsing if-else Statements\nfunction Greeting(props) { if (props.isLoggedIn) { return \u0026lt;h1\u0026gt;Welcome Back!\u0026lt;/h1\u0026gt;; } else { return \u0026lt;h1\u0026gt;Please Sign In\u0026lt;/h1\u0026gt;; } } Using Ternary Operator (? :)\nfunction Greeting({ isLoggedIn }) { return \u0026lt;h1\u0026gt;{isLoggedIn ? \u0026#34;Welcome Back!\u0026#34; : \u0026#34;Please Sign In\u0026#34;}\u0026lt;/h1\u0026gt;; } Event Handling in React React follows the Synthetic Event system, making event handling efficient across different browsers.\nHandling Click Events\nfunction Button() { function handleClick() { alert(\u0026#34;Button Clicked!\u0026#34;); } return \u0026lt;button onClick={handleClick}\u0026gt;Click Me\u0026lt;/button\u0026gt;; } Passing Arguments in Event Handlers\nfunction Greeting({ name }) { function sayHello(name) { alert(`Hello, ${name}!`); } return \u0026lt;button onClick={() =\u0026gt; sayHello(name)}\u0026gt;Greet\u0026lt;/button\u0026gt;; } Handling Keyboard Events\nfunction InputBox() { function handleKeyPress(event) { if (event.key === \u0026#34;Enter\u0026#34;) { alert(\u0026#34;Enter key pressed!\u0026#34;); } } return \u0026lt;input type=\u0026#34;text\u0026#34; onKeyPress={handleKeyPress} /\u0026gt;; } ‚úÖ Conditional Rendering: Use if-else, ternary (? :), \u0026amp;\u0026amp;, or switch-case for rendering components based on conditions.\n‚úÖ Event Handling: Use event handlers like onClick, onKeyPress, onSubmit, etc., with functions.\n‚úÖ Pass Parameters: Use arrow functions for passing arguments in event handlers.\n‚úÖ Prevent Default Behavior: Use event.preventDefault() to stop default browser actions like form submissions.\nState in React State is an object that holds dynamic data that affects a component‚Äôs rendering. Unlike props, state is mutable and can be changed within a component. When state changes, React re-renders the component to reflect the updates. Types of State in React Local State: Managed within a single component using useState(). Example: Form inputs, modals, toggles. Global State: Shared across multiple components. Managed using Context API, Redux, or other state management libraries. Server State: Data fetched from an API that needs to be integrated into UI. Managed using tools like React Query, SWR, or Redux Thunk. URL State: State stored in the URL (query parameters, path, etc.). Managed using React Router. Understanding useState() Hook useState() is a React Hook that allows functional components to manage state. It returns an array with two values: The current state value. A function to update the state. Syntax:\nconst [state, setState] = useState(initialValue); Example: Counter App\nimport { useState } from \u0026#34;react\u0026#34;; function Counter() { const [count, setCount] = useState(0); // Initial state is 0 return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Count: {count}\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt;Increment\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } export default Counter; useState(0): Initializes count to 0. setCount(count + 1): Updates the state, causing a re-render. Updating State Correctly 1. Using Functional Updates (Best Practice)\nWhen the new state depends on the previous state, use a function inside setState(). setCount((prevCount) =\u0026gt; prevCount + 1); This ensures correct updates, especially in async operations. 2. Updating Objects in State\nUse spread operator (...) to avoid modifying the original state. const [user, setUser] = useState({ name: \u0026#34;Ahmad\u0026#34;, age: 19 }); setUser(prevUser =\u0026gt; ({ ...prevUser, age: prevUser.age + 1 })); 3. Updating Arrays in State\nUse spread operator (...) to update arrays. const [items, setItems] = useState([1, 2, 3]); setItems(prevItems =\u0026gt; [...prevItems, 4]); // Adds new item ‚úÖ State is a way to store data inside a component.\n‚úÖ useState() is used to manage local state in functional components.\n‚úÖ Always use the updater function when updating state based on previous values.\n‚úÖ Never modify state directly, always use setState().\nProps (Properties) in React What are Props? Props stand for Properties. Props are read-only data passed from a parent component to a child component. They allow components to be dynamic and reusable by passing different data to them. Think of props as function arguments for components. How Props Work Parent component passes props to a child component. Child component receives them as a parameter (usually an object). The child accesses props using props.propName. Syntax 1. Passing Props \u0026lt;ChildComponent name=\u0026#34;Ahmad\u0026#34; age={19} /\u0026gt; 2. Receiving Props function ChildComponent(props) { return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Name: {props.name}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Age: {props.age}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } ‚úÖ OR Using Destructuring function ChildComponent({ name, age }) { return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Name: {name}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Age: {age}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } üß© Key Points Props are immutable: You cannot change props inside the child component. Unidirectional flow: Data flows from parent to child (one-way data binding). Can be any data type: String, number, boolean, array, object, function, etc. Used to customize components and make them reusable. CSS Modules A CSS Module is a CSS file in which all class and animation names are scoped locally by default. This means that styles defined in one component won‚Äôt affect other components, preventing style conflicts. Used in React.js to maintain modular, reusable, and conflict-free CSS How It Works A CSS file is treated as a module when named with the .module.css extension. Example: MyComponent.module.css In React, you import it as an object where each CSS class becomes a property of that object. üìÑ Example File: Button.module.css\n.button { background-color: blue; color: white; } Example Usage in Component import styles from \u0026#39;./Button.module.css\u0026#39;; function Button() { return \u0026lt;button className={styles.button}\u0026gt;Click me\u0026lt;/button\u0026gt;; } Behind the Scenes CSS Modules use a build tool like Webpack to automatically transform class names into unique identifiers. Example: .button in the source might become .Button_button__3hWkj in the final DOM. The mapping ensures local scoping and uniqueness across components. Comparison with Other Styling Methods Method Scoped Reusable Global Impact Setup Required CSS Modules ‚úÖ ‚úÖ ‚ùå Minimal Inline Styles ‚úÖ ‚ùå ‚ùå None Global CSS ‚ùå ‚úÖ ‚úÖ None CSS-in-JS (e.g. styled-components) ‚úÖ ‚úÖ ‚ùå More setup Form Handling in React.js Form handling refers to how input data is captured from HTML forms (like \u0026lt;input\u0026gt;, \u0026lt;textarea\u0026gt;, \u0026lt;select\u0026gt;) and managed using state or references in React.\nKey Concepts: React forms are usually managed through state (controlled) or refs (uncontrolled). You handle form submissions via an onSubmit event handler. You use onChange to capture input updates. Uncontrolled Components \u0026amp; useRef() An uncontrolled component lets the DOM manage the input value, and React accesses it using a ref.\nUsed to directly access a DOM element Doesn‚Äôt re-render the component on value change const inputRef = useRef(); const handleSubmit = () =\u0026gt; { console.log(inputRef.current.value); }; \u0026lt;input type=\u0026#34;text\u0026#34; ref={inputRef} /\u0026gt; Controlled Components A controlled component is an input element whose value is controlled by React state.\nconst [name, setName] = useState(\u0026#34;\u0026#34;); \u0026lt;input type=\u0026#34;text\u0026#34; value={name} onChange={(e) =\u0026gt; setName(e.target.value)} /\u0026gt; Full Example:\nimport React, { useState } from \u0026#34;react\u0026#34;; function Form() { const [val, setVal] = useState({ name: \u0026#34;\u0026#34;, email: \u0026#34;\u0026#34; }); const handleSubmit = (event) =\u0026gt; { event.preventDefault(); console.log(val); }; return ( \u0026lt;\u0026gt; \u0026lt;form action=\u0026#34;\u0026#34; onSubmit={handleSubmit}\u0026gt; \u0026lt;input onChange={(event) =\u0026gt; setVal({ ...val, name: event.target.value })} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; placeholder=\u0026#34;Email\u0026#34; onChange={(event) =\u0026gt; setVal({ ...val, email: event.target.value })} /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/\u0026gt; ); } export default Form; React Hook Form (Library) React Hook Form is a popular library for building performant and flexible forms in React.\nWhy Use It? Reduces boilerplate code Built-in validation Integrates well with UI libraries like Material UI, Chakra UI, etc. Basic Example:\nimport { useForm } from \u0026#34;react-hook-form\u0026#34;; const { register, handleSubmit } = useForm(); const onSubmit = (data) =\u0026gt; console.log(data); \u0026lt;form onSubmit={handleSubmit(onSubmit)}\u0026gt; \u0026lt;input {...register(\u0026#34;username\u0026#34;)} /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; Full Example\nimport React from \u0026#34;react\u0026#34;; import { useForm } from \u0026#34;react-hook-form\u0026#34;; function Form() { const { register, handleSubmit } = useForm(); return ( \u0026lt;\u0026gt; \u0026lt;form action=\u0026#34;\u0026#34; onSubmit={handleSubmit((data) =\u0026gt; console.log(data))}\u0026gt; \u0026lt;input {...register(\u0026#34;name\u0026#34;)} type=\u0026#34;text\u0026#34; placeholder=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;input {...register(\u0026#34;age\u0026#34;)} type=\u0026#34;age\u0026#34; placeholder=\u0026#34;age\u0026#34; /\u0026gt; \u0026lt;input {...register(\u0026#34;email\u0026#34;)} type=\u0026#34;email\u0026#34; placeholder=\u0026#34;email\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/\u0026gt; ); } export default Form; Dynamic Routing in React.js Dynamic Routing means that the routing is handled at runtime (not at compile time like in traditional HTML websites).\nIn React.js, dynamic routing is implemented using React Router, a library that enables navigation among views of various components.\nUnlike traditional routing where routes are hardcoded in a file (like routes.php), React dynamically loads components based on the current URL.\nInstallation of react-router-dom\nnpm install react-router-dom Core Components of React Router BrowserRouter ‚Äì Wraps the app and enables routing. Routes ‚Äì A container for all the Route components. Route ‚Äì Defines the path and component to render. Link / NavLink ‚Äì Used for navigation without reloading the page. useParams ‚Äì Hook to access URL parameters (useful for dynamic routes). Basic Routing Setup import { BrowserRouter, Routes, Route } from \u0026#34;react-router-dom\u0026#34;; import Home from \u0026#39;./Home\u0026#39;; import About from \u0026#39;./About\u0026#39;; function App() { return ( \u0026lt;BrowserRouter\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/\u0026#34; element={\u0026lt;Home /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/about\u0026#34; element={\u0026lt;About /\u0026gt;} /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/BrowserRouter\u0026gt; ); } What is Dynamic Routing? Dynamic routing allows us to create routes where parts of the URL are variables, e.g., /user/1, /user/2, etc.\n\u0026lt;Route path=\u0026#34;/user/:id\u0026#34; element={\u0026lt;UserProfile /\u0026gt;} /\u0026gt; In this case, :id is a route parameter.\nAccessing Dynamic Parameters: useParams useParams() is a React Router hook used to access dynamic parameters from the current URL. It is most useful with dynamic routes like /user/:id, /post/:slug, etc. import { useParams } from \u0026#34;react-router-dom\u0026#34;; function UserProfile() { const { id } = useParams(); return \u0026lt;h1\u0026gt;User ID: {id}\u0026lt;/h1\u0026gt;; } useNavigate() in React Router useNavigate() is a hook provided by react-router-dom. It is used to programmatically navigate to different routes (without clicking a \u0026lt;Link\u0026gt; or \u0026lt;NavLink\u0026gt;). It replaces the older useHistory() from React Router v5. const navigate = useNavigate(); function handleClick() { navigate(\u0026#34;/about\u0026#34;); } üîÅ Navigate with Parameters navigate(`/user/${userId}`); ‚èÆÔ∏è Navigate Back or Forward navigate(-1); // Go back navigate(1); // Go forward Feature Description navigate(\u0026quot;/path\u0026quot;) Navigate to a route navigate(-1) Go back navigate(1) Go forward { replace: true } Replace history entry { state: {...} } Pass data with navigation NavLink in React Router NavLink is a special version of the \u0026lt;Link\u0026gt; component in react-router-dom that adds styling attributes to the rendered element when it matches the current URL.\nIt‚Äôs perfect when you want to highlight the active page in a navigation menu (e.g., changing the color or adding underline).\n\u0026lt;NavLink to=\u0026#34;/home\u0026#34;\u0026gt;Home\u0026lt;/NavLink\u0026gt; \u0026lt;NavLink to=\u0026#34;/about\u0026#34;\u0026gt;About\u0026lt;/NavLink\u0026gt; Active Styling with NavLink By default, NavLink applies an active class when the route matches.\nYou can also provide your own styles or class names based on the active state using:\n‚úÖ className as a Function\n\u0026lt;NavLink to=\u0026#34;/home\u0026#34; className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;inactive-link\u0026#34;} \u0026gt; Home \u0026lt;/NavLink\u0026gt; ‚úÖ style as a Function\n\u0026lt;NavLink to=\u0026#34;/about\u0026#34; style={({ isActive }) =\u0026gt; ({ color: isActive ? \u0026#34;green\u0026#34; : \u0026#34;gray\u0026#34;, textDecoration: isActive ? \u0026#34;underline\u0026#34; : \u0026#34;none\u0026#34; })} \u0026gt; About \u0026lt;/NavLink\u0026gt; Example with Full NavBar import { NavLink } from \u0026#34;react-router-dom\u0026#34;; import \u0026#34;./styles.css\u0026#34;; // Assume you have .active-link class here function Navbar() { return ( \u0026lt;nav\u0026gt; \u0026lt;NavLink to=\u0026#34;/\u0026#34; end className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;\u0026#34;}\u0026gt; Home \u0026lt;/NavLink\u0026gt; \u0026lt;NavLink to=\u0026#34;/about\u0026#34; className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;\u0026#34;}\u0026gt; About \u0026lt;/NavLink\u0026gt; \u0026lt;NavLink to=\u0026#34;/contact\u0026#34; className={({ isActive }) =\u0026gt; isActive ? \u0026#34;active-link\u0026#34; : \u0026#34;\u0026#34;}\u0026gt; Contact \u0026lt;/NavLink\u0026gt; \u0026lt;/nav\u0026gt; ); } Summary of NavLink Prop/Feature Description to=\u0026quot;/path\u0026quot; Target route className Function that gives conditional class style Function that returns conditional style end Ensures exact matching isActive Boolean indicating current URL match \u0026lt;Outlet /\u0026gt; in React Router \u0026lt;Outlet /\u0026gt; is a placeholder component used to render child routes inside a parent route. It\u0026rsquo;s like saying: ‚ÄúHere is where the nested component will appear.‚Äù ‚úÖ How It Works Visiting /dashboard/profile will render: Dashboard component Profile component inside the \u0026lt;Outlet /\u0026gt; Visiting /dashboard/settings will render: Dashboard component Settings component inside the \u0026lt;Outlet /\u0026gt; import { Outlet } from \u0026#34;react-router-dom\u0026#34;; function Dashboard() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Dashboard Layout\u0026lt;/h1\u0026gt; {/* Nested route component will be rendered here */} \u0026lt;Outlet /\u0026gt; \u0026lt;/div\u0026gt; ); } API Integration in React.js using AJAX (fetch / axios) API integration in React lets your app communicate with backends, external services, or databases. AJAX (Asynchronous JavaScript and XML) is used to make asynchronous requests to APIs.\n1. Using fetch useEffect(() =\u0026gt; { fetch(\u0026#39;https://api.example.com/data\u0026#39;) .then(res =\u0026gt; res.json()) .then(data =\u0026gt; setData(data)) .catch(err =\u0026gt; console.error(err)); }, []); fetch() returns a Promise. Must manually handle JSON parsing (res.json()). 2. Using axios npm install axios // install this package to use axios import axios from \u0026#34;axios\u0026#34;; import React from \u0026#34;react\u0026#34;; const App = () =\u0026gt; { const api = \u0026#34;https://fakestoreapi.com/products\u0026#34;; // üì• Function to GET products from the API const getProducts = () =\u0026gt; { axios .get(api) .then((res) =\u0026gt; console.log(\u0026#34;GET:\u0026#34;, res)) .catch((err) =\u0026gt; console.error(\u0026#34;GET Error:\u0026#34;, err)); }; // üì§ Function to POST (add) a new product to the API const addProducts = () =\u0026gt; { axios .post(api, { id: 0, title: \u0026#34;Sample Product\u0026#34;, price: 0.1, description: \u0026#34;This is a test product.\u0026#34;, category: \u0026#34;sample-category\u0026#34;, image: \u0026#34;http://example.com/image.jpg\u0026#34;, }) .then((res) =\u0026gt; console.log(\u0026#34;POST:\u0026#34;, res)) .catch((err) =\u0026gt; console.error(\u0026#34;POST Error:\u0026#34;, err)); }; return ( \u0026lt;div className=\u0026#34;p-5\u0026#34;\u0026gt; {/* üü¢ Button to trigger GET request */} \u0026lt;button onClick={getProducts} className=\u0026#34;px-3 py-2 m-2 bg-blue-500 rounded-lg text-white\u0026#34; \u0026gt; Get Data \u0026lt;/button\u0026gt; {/* üîµ Button to trigger POST request */} \u0026lt;button onClick={addProducts} className=\u0026#34;px-3 py-2 m-2 bg-green-600 rounded-lg text-white\u0026#34; \u0026gt; Send Data \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); }; export default App; Example (with async/await) useEffect(() =\u0026gt; { const fetchData = async () =\u0026gt; { try { const response = await axios.get(\u0026#39;https://api.example.com/data\u0026#39;); setData(response.data); } catch (err) { console.error(err); } finally { setLoading(false); } }; fetchData(); }, []); React Component Lifecycle The component lifecycle refers to the sequence of methods/functions that are invoked during the life of a React component ‚Äî from its creation to its removal from the DOM.\nüß± 3 Main Phases: 1. Mounting Component is being created and inserted into the DOM.\nconstructor() ‚Üí (Class component only) render() componentDidMount() ‚úÖ (ideal for API calls, subscriptions) 2. Updating When props or state change.\nshouldComponentUpdate() ‚Üí (optional) render() componentDidUpdate() ‚úÖ (runs after update) 3. Unmounting Component is removed from the DOM.\ncomponentWillUnmount() ‚úÖ (cleanup tasks: timers, subscriptions, etc.) Functional Components use useEffect for all of this! A React Hook for handling side effects (e.g. API calls, DOM updates, subscriptions). Runs after the component renders. Basic Syntax useEffect(() =\u0026gt; { // effect logic return () =\u0026gt; { // optional cleanup }; }, [dependencies]); Dependency Array []: runs once after initial render (like componentDidMount) [var]: runs when var changes No array: runs after every render Note: When we [] square bracket in useEffect() component only update the changed part and if we don\u0026rsquo;t add square bracket component re-render means first it deleted and then again created.\nüí° Common Uses API calls Event listeners Timers Cleanups (return function) Full Example useEffect(() =\u0026gt; { console.log(\u0026#34;About Component is Created\u0026#34;); return () =\u0026gt; { console.log(\u0026#34;About Comonent is Deleted\u0026#34;); }; Example: Cleanup (like componentWillUnmount) useEffect(() =\u0026gt; { const timer = setInterval(() =\u0026gt; { console.log(\u0026#34;Running interval...\u0026#34;); }, 1000); return () =\u0026gt; { clearInterval(timer); // üßπ cleanup console.log(\u0026#34;Interval cleared\u0026#34;); }; }, []); What is React Reconciliation React Reconciliation is the process React uses to update the DOM efficiently when the state or props of a component change.\nThis makes updates fast and efficient, instead of redrawing the whole UI.\nNote: üîç Think of reconciliation as React saying: \u0026ldquo;Okay, what exactly changed? Let me only update that part.\u0026rdquo;\nTerm What it Means Triggered By Happens In Updating When React detects a change in props or state. setState, parent re-render, context change, etc. Component lifecycle Re-rendering When the component‚Äôs render method runs again (or JSX is re-evaluated in function components). After an update (or forced render) Virtual DOM const [val, setVal] = useState(\u0026#34;This is Normal Data\u0026#34;); const [val2, setVal2] = useState(\u0026#34;This is Very Large Data\u0026#34;); useEffect(() =\u0026gt; { console.log(\u0026#34;About Component is Created\u0026#34;); return () =\u0026gt; { console.log(\u0026#34;About Comonent is Deleted\u0026#34;); }; }, [val2]); // component only re-render when val2 is changed otherwise it update only changed part. Axios for Session Management \u0026amp; Separation 1. Why Use a Separate Axios File? Centralizes config (base URL, headers, interceptors) Cleaner code, reusable instance Easy to maintain sessions (cookies, tokens) Can add error handlers globally 2. Basic Axios Setup (Separate File) üóÇÔ∏è File: axiosInstance.js\nimport axios from \u0026#34;axios\u0026#34;; // Create an Axios instance const instance = axios.create({ baseURL: \u0026#34;https://fakestoreapi.com/\u0026#34;, // üè† Your backend URL withCredentials: true, // ‚úÖ Important for session cookies }); export default instance; 3. What withCredentials: true Does Allows Axios to send cookies and authentication headers Required when working with sessions (esp. JWT or Express sessions) Must also be enabled on backend (CORS settings) 4. Using It in Components import axios from \u0026#34;../axiosInstance\u0026#34;; const getProducts = async () =\u0026gt; { try { const res = await axios.get(\u0026#34;/products\u0026#34;); console.log(res.data); } catch (err) { console.error(err); } }; Concept Purpose withCredentials Send cookies for session management axios.create() Reusable config for base URL, etc. interceptors Add headers (like auth) automatically instance.get() Use anywhere like normal Axios ReactJS Context API A way to share data between components without passing props manually at every level. Solves prop drilling (passing data from parent to child repeatedly). When to Use Context API? When you need to share state across many components (e.g., theme, user authentication, language, etc.) Good for global state management in small to medium-sized apps. Key Components of Context API React.createContext() Creates a context object. const MyContext = React.createContext(); \u0026lt;Context.Provider\u0026gt; Wraps components to provide the context value. \u0026lt;MyContext.Provider value={someData}\u0026gt; \u0026lt;ChildComponent /\u0026gt; \u0026lt;/MyContext.Provider\u0026gt; useContext(Context) A hook to access the context value in a functional component. const value = useContext(MyContext); Example: Basic Usage // 1. Create Context const ThemeContext = React.createContext(); // 2. Create a Provider Component const ThemeProvider = ({ children }) =\u0026gt; { const [theme, setTheme] = React.useState(\u0026#34;light\u0026#34;); return ( \u0026lt;ThemeContext.Provider value={{ theme, setTheme }}\u0026gt; {children} \u0026lt;/ThemeContext.Provider\u0026gt; ); }; // 3. Use Context in a Child Component const ThemeToggler = () =\u0026gt; { const { theme, setTheme } = React.useContext(ThemeContext); return ( \u0026lt;button onClick={() =\u0026gt; setTheme(theme === \u0026#34;light\u0026#34; ? \u0026#34;dark\u0026#34; : \u0026#34;light\u0026#34;)}\u0026gt; Switch to {theme === \u0026#34;light\u0026#34; ? \u0026#34;dark\u0026#34; : \u0026#34;light\u0026#34;} mode \u0026lt;/button\u0026gt; ); }; // 4. Wrap in App const App = () =\u0026gt; ( \u0026lt;ThemeProvider\u0026gt; \u0026lt;ThemeToggler /\u0026gt; \u0026lt;/ThemeProvider\u0026gt; ); Redux Toolkit (RTK) What is Redux Redux is a state management library used with JavaScript apps (especially React) to manage and share application-wide state in a predictable way.\nWhat is React-Redux? React-Redux is the official binding library that allows React components to interact with the Redux store using hooks like:\nuseSelector() ‚Äì read state useDispatch() ‚Äì send actions It acts as a bridge between Redux and React.\nWhy Redux Toolkit is Useful ‚úÖ Reduces boilerplate code (less code, same result) ‚úÖ Built-in support for async actions using createAsyncThunk ‚úÖ Uses Immer.js internally so you can write mutable-style logic safely ‚úÖ Easy and clean setup via configureStore and createSlice ‚úÖ Encourages best practices by default Core Concepts Concept Description Store Holds the global state Slice A piece of the store: includes state + reducers Action An object describing a change Reducer A function that updates state based on action Dispatch A way to send actions to the store Selector Reads state from the store Redux Toolkit vs Context API Feature Redux Toolkit Context API üß† Purpose Complex state management Simple state sharing üîÅ Re-renders Optimized with useSelector() Causes re-renders of all consumers üîå DevTools Built-in support for Redux DevTools ‚ùå No DevTools üßµ Async Logic Built-in with createAsyncThunk Needs custom setup üì¶ Scalability Highly scalable (slices, modular code) Not ideal for large apps üîß Boilerplate Minimal with RTK Less than raw Redux, but Context still has limitations üîí Predictability More structured and strict More flexible but can lead to mess Use Context API: For theme, language, auth user ‚Äì simple state Use Redux Toolkit: For complex state logic, shared global data, multiple components, async logic Redux Flow Diagram: üì¶ Store ‚Äì Global State Container The store is where all the application state lives. It combines different reducers (e.g., user, products, carts) into one centralized global state. The store is created using configureStore() in Redux Toolkit. üß© Reducers ‚Äì Handle State Changes Reducers are functions that decide how the state should change in response to actions. Each reducer manages its own slice of state (e.g., user state, products state, carts state). Redux Toolkit allows you to define reducers inside createSlice(). üéØ Action ‚Äì Event Trigger An action is a plain JavaScript object that describes what happened. Actions are sent from components using dispatch() and are automatically created via createSlice() in RTK. For example:\n{ type: \u0026quot;cart/addToCart\u0026quot;, payload: { id: 1, name: \u0026quot;Product A\u0026quot; } } üßµ From App.jsx (Any Component) Any component (like App.jsx or its children) can: Read data using useSelector() ‚Äì it\u0026rsquo;s read-only, not mutable. Send actions using useDispatch() to update the global state. Installation and Usage 1. Install Redux Toolkit and React-Redux Add the Redux Toolkit and React-Redux packages to your project:\nnpm install @reduxjs/toolkit react-redux 2. Create a Redux Store Create a file named src/app/store.js. Import the configureStore API from Redux Toolkit. We\u0026rsquo;ll start by creating an empty Redux store, and exporting it:\nimport { configureStore } from \u0026#39;@reduxjs/toolkit\u0026#39; export const store = configureStore({ reducer: {}, }) 3. Provide the Redux Store to React Once the store is created, we can make it available to our React components by putting a React-Redux \u0026lt;Provider\u0026gt; around our application in src/index.js. Import the Redux store we just created, put a \u0026lt;Provider\u0026gt; around your \u0026lt;App\u0026gt;, and pass the store as a prop:\ncreateRoot(document.getElementById(\u0026#34;root\u0026#34;)).render( \u0026lt;Provider store={store}\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;/Provider\u0026gt; ); Note: Redux installed and below is example usage\n4. Create a Redux State Slice import { createSlice } from \u0026#39;@reduxjs/toolkit\u0026#39; const initialState = { value: 0, } export const counterSlice = createSlice({ name: \u0026#39;counter\u0026#39;, initialState, reducers: { increment: (state) =\u0026gt; { // Redux Toolkit allows us to write \u0026#34;mutating\u0026#34; logic in reducers. It // doesn\u0026#39;t actually mutate the state because it uses the Immer library, // which detects changes to a \u0026#34;draft state\u0026#34; and produces a brand new // immutable state based off those changes state.value += 1 }, decrement: (state) =\u0026gt; { state.value -= 1 }, incrementByAmount: (state, action) =\u0026gt; { state.value += action.payload }, }, }) // Action creators are generated for each case reducer function export const { increment, decrement, incrementByAmount } = counterSlice.actions export default counterSlice.reducer 5. Add Slice Reducers to the Store import { configureStore } from \u0026#39;@reduxjs/toolkit\u0026#39; import counterReducer from \u0026#39;../features/counter/counterSlice\u0026#39; export const store = configureStore({ reducer: { counter: counterReducer, }, }) 6. Use Redux State and Actions in React Components import React from \u0026#39;react\u0026#39; import { useSelector, useDispatch } from \u0026#39;react-redux\u0026#39; import { decrement, increment } from \u0026#39;./counterSlice\u0026#39; export function Counter() { const count = useSelector((state) =\u0026gt; state.counter.value) const dispatch = useDispatch() return ( \u0026lt;div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button aria-label=\u0026#34;Increment value\u0026#34; onClick={() =\u0026gt; dispatch(increment())} \u0026gt; Increment \u0026lt;/button\u0026gt; \u0026lt;span\u0026gt;{count}\u0026lt;/span\u0026gt; \u0026lt;button aria-label=\u0026#34;Decrement value\u0026#34; onClick={() =\u0026gt; dispatch(decrement())} \u0026gt; Decrement \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) } There is always room for improvement and continuous learning, but we\u0026rsquo;ll end this note/article here. We\u0026rsquo;ve gained valuable knowledge about React ‚Äî congratulations!\n","permalink":"http://localhost:1313/posts/reactjs/","summary":"\u003cp\u003e\u003cimg alt=\"JS Image\" loading=\"lazy\" src=\"/posts/assets/react/react.webp\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReact.js is a JavaScript library for building \u003cstrong\u003euser interfaces\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eDeveloped by \u003cstrong\u003eFacebook\u003c/strong\u003e (now Meta) in 2013.\u003c/li\u003e\n\u003cli\u003eIt is \u003cstrong\u003ecomponent-based\u003c/strong\u003e, \u003cstrong\u003edeclarative\u003c/strong\u003e, and allows for efficient UI updates.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"key-features-of-react\"\u003eKey Features of React\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eComponent-Based Architecture\u003c/strong\u003e: UI is built using reusable components.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVirtual DOM\u003c/strong\u003e: Updates only the changed parts, making React fast.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUnidirectional Data Flow\u003c/strong\u003e: Props and state maintain a predictable data structure.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eJSX (JavaScript XML)\u003c/strong\u003e: A syntax extension that lets you write HTML inside JavaScript.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHooks\u003c/strong\u003e: Allow functional components to have state and other features.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"mutable-vs-immutable\"\u003eMutable vs Immutable\u003c/h2\u003e\n\u003ch3 id=\"mutable-changeable\"\u003eMutable (Changeable)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eMutable data types \u003cstrong\u003ecan be changed\u003c/strong\u003e after creation.\u003c/li\u003e\n\u003cli\u003eExample: \u003cstrong\u003eObjects \u0026amp; Arrays\u003c/strong\u003e are mutable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e arr \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#bd93f9\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#bd93f9\"\u003e3\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003earr.push(\u003cspan style=\"color:#bd93f9\"\u003e4\u003c/span\u003e); \u003cspan style=\"color:#6272a4\"\u003e// Modifies the original array\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#6272a4\"\u003e\u003c/span\u003econsole.log(arr); \u003cspan style=\"color:#6272a4\"\u003e// [1, 2, 3, 4]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"immutable-unchangeable\"\u003eImmutable (Unchangeable)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eImmutable data \u003cstrong\u003ecannot be changed\u003c/strong\u003e directly. Instead, you create a new copy.\u003c/li\u003e\n\u003cli\u003eExample: \u003cstrong\u003eStrings \u0026amp; Numbers\u003c/strong\u003e are immutable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e str \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estr[\u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;M\u0026#34;\u003c/span\u003e; \u003cspan style=\"color:#6272a4\"\u003e// This won\u0026#39;t change the string\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#6272a4\"\u003e\u003c/span\u003econsole.log(str); \u003cspan style=\"color:#6272a4\"\u003e// \u0026#34;Hello\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eExample of immutable object handling (creating a new object instead of modifying the original):\u003c/p\u003e","title":"React ‚Äì A JavaScript Library"},{"content":"\nHow anyone can be more effective with less effort by learning how to identify and leverage the 80/20 principle\u0026ndash;the well-known, unpublicized secret that 80 percent of all our results in business and in life stem from a mere 20 percent of our efforts.\nThe 80/20 principle is one of the great secrets of highly effective people and organizations.\nDid you know, for example, that 20 percent of customers account for 80 percent of revenues? That 20 percent of our time accounts for 80 percent of the work we accomplish? The 80/20 Principle shows how we can achieve much more with much less effort, time, and resources, simply by identifying and focusing our efforts on the 20 percent t at really counts. Although the 80/20 principle has long influenced today\u0026rsquo;s business world, author Richard Koch reveals how the principl works and shows how we can use it in a systematic and practical way to vastly increase our effectiveness, and improve our careers and o r companies.\nThe unspoken corollary to the 80/20 principle is that little of what we spend our time on actually counts. But by concentrating on those things that do, we can unlock the enormous potential of the magic 20 percent, and transform our effectiveness in our jobs, our careers, our businesses, and our lives.\n1) 80/20: The Basics The 80/20 Principle:\n80% of your effort, action, or input will lead to only 20% of your results, output, rewards, or victories. 20% of your efforts, action, or input is what leads to the majority of your results, output, rewards and victories. It is a proven nonlinear approach to everything that happens. You will see this consistently across the board 20% of the pea pods will have 80% of the peas 80% of the money in this world is controlled by 20% of the people 80% of your carpet wear will be on 20% of your carpet 80% of your profits come from 20% of your customers 2) You Can Be great The 80/20 principle states that it is possible for anyone to achieve greatness.\nThe key: Do not spend your time trying to figure out how much effort you will need to become great at something.\nInstead: Figure out what is the right thing for you to do.\njWhat is it that makes you great? What is it that makes you come alive? What is that area where you are the best? If you\u0026rsquo;re spending your time on everything else, you\u0026rsquo;re just going to be wasting your life away, never getting to that point of greatness.\nSo find that area where you can be great and just push on that. Continue to work on that.\nThat may be where you\u0026rsquo;re expending minimum effort but are getting the most benefit from. That is the area where you will get exponential results.\n3) Choose Your Allies One of the most important decisions you can make in your life concerns your allies \u0026ndash; figuring out who are the people you are going to spend time with.\nBut in most cases, people are doing this wrong.\nThe allies they have are by default. They just happened to run into certain kinds of people and hence they associated with them. That how they choose \u0026ndash; or how they don‚Äôt choose \u0026ndash; their allies.\nThese are the wrong kinds of ‚Äúallies.‚Äù Your allies should not be chosen by default People have too many allies. There are just too many people in their lives who do not add much value.\nPeople do not know how to use their allies, how to be able to leverage them.\nThe key to 80/20 thinking Say this: ‚ÄúI\u0026rsquo;m going to choose my allies who are going to help me move forward in my life.‚Äù\nYou\u0026rsquo;re not going to do it by default. It\u0026rsquo;s going to be by design.\nPick a few allies that are powerful. Pick a few that are going to really help you move the needle forward. Don‚Äôt have too many. And then use them properly. Leverage their strengths and they will leverage yours. That\u0026rsquo;s the power of allies. You help each other out and you build each other up and get exponential results in the process.\n4) Design Your Own Game How people play the game of life\nThey play their game of life by default They play the game of life that their parents want them to play, that the society wants them to play They continue to lose at that game because they never designed the game that they are in. But as 80/20 thinkers, we need to design our game \u0026ndash; the game that we most want to play \u0026ndash; then it will be really easy for us to win at that game.\nThose with default conditioning are actually playing someone else\u0026rsquo;s game. They\u0026rsquo;re simply wasting their time playing others‚Äô games, society‚Äôs games, and so on \u0026ndash; anything but their own game, which is what really matters.\nThe greatest innovations and the greatest accomplishments are always a result of people who are designing their own game and hence winning at those games. They\u0026rsquo;re designing their own races of life and are playing in those races, winning in those races, and that\u0026rsquo;s what we need to do.\nWe need to design our own game and win in those games to get exponential results.\n5) Achievement Island / Desert As you look back at your life, what you\u0026rsquo;ll see is That\nthere are short periods of time when you get extreme results there are long periods of time when you got almost no results Wonder what‚Äôs going on?\nThe key to harnessing the power of 80/20:\nRealize that we\u0026rsquo;re gonna have these short periods of extreme results (or the author‚Äôs so-called ‚ÄúAchievement Islands‚Äù)\nTo Do:\nMake a list of all the times in your life where you\u0026rsquo;ve had these Achievement Islands. Be guided by these questions: Where have you had extreme results in very short durations of time? What are the key characteristics of those situations? What are the things that stand out when you think about these moments of extreme results? What happened? Why did you get those results? On the other end, make a list of the times in your life where you almost got no results at all despite trying and trying (‚ÄúAchievement Deserts‚Äù). What happened? What were the common situations or characteristics that were happening during those long periods of time? Now your job is to focus as much as possible on the things where you were getting maximum results. Those are what will get you to move towards your Achievement Islands rather than your Achievement Deserts. 6) 80/20 in Relationships When it comes to relationships, 80/20 principle still holds true.\n80% of your relationships give you only 20% value 20% of your relationships give you 80% value So what you need to do is ensure that you\u0026rsquo;re spending 80% of your relationship time on only 20% of those relationships. These are your high-leverage people, the relationships that are creating the most value.\nWith that, spend only 20% on the remaining 80% people in your life.\nMany people tend to spray their effort with a lot of different relationships (the 80%) all over the place.\nThese are relationships that don\u0026rsquo;t bring them any long-term value. They have a lot of friends, but none of them are real. None of them are actually going to help them build anything useful or accomplish great goals. As an 80/20 practitioner, find a few powerful alliances. These are your key allies ( your 20%).\nDevelop deep relationships with them. Spend a lot of quality time with them in order to strengthen those 20% relationships. Richard Koch says that all we need is just 6-7 key allies, and then we can do tremendously in our lives. We don\u0026rsquo;t need 100, 200, or 500 friends. From there we can leverage the power of our relationships.\nStart figuring out who these people are, or those who will add that value to your life. Design your circle rather than let it happen b default, which happens unfortunately to most people.\n7) Ruthlessly Prune We need to cut down. We don\u0026rsquo;t need to add. We need to remove, to reduce, so that we can get massive results. This process is called ruthless pruning.\nThe problem that happens with most people:\n80% of their time is encroaching on their 20% time where they create the most value. 80% of their allies are encroaching on the 20% that create the most value for them. 80% of your customers actually take up so much value that you end up not having enough value to give to the 20% customers who create the most value for you. Mental energy expended on 80% of your projects is taking away mental energy from. the 20% projects that create the most value/exponential results for you. Actions expended on 80% of your projects do the same thing. They take away from the 20% projects that are creating the most leverage, the most value for you. The same happens with any area of business - marketing efforts, sales effort, strategic efforts, whatever it is.\nThat\u0026rsquo;s why one of the things Jack Welch at G.E said was: ‚ÄúWe\u0026rsquo;re only going to do things that we can be in the Top 2 to Top 3 in the world. If we\u0026rsquo;re not in the Top 2 or Top 3, then we\u0026rsquo;re going to stop doing those things.‚Äù\nHence, we\u0026rsquo;re going to only expend our energy on the 20% things and we\u0026rsquo;re going to ruthlessly prune the 80%, even if there is some result coming from it\u0026hellip; in order to exponentially grow the areas of business and life where we\u0026rsquo;re getting maximum results.\n8) Multiply Output In order to multiply our output, we need to move our resources from an unproductive place to a productive place, from an unproductive arena into an arena, where the resource can be productive.\nEXAMPLE: A hammer is great at hammering a nail but it\u0026rsquo;s not useful when it comes to cutting a piece of cloth. It\u0026rsquo;s not going to help.\nSimilarly, a pair of scissors is great at cutting a piece of cloth but entirely useless when it comes to hammering a nail.\nBoth these resources are very powerful but they have to be used in the right arena and that\u0026rsquo;s the key.\nThat\u0026rsquo;s the 80/20 \u0026ndash; the understanding that the resource needs to be used in the right arena where you get 10x, 100x, even 1000x more improvement or higher productivity.\nThe same holds with you. If you\u0026rsquo;re using your resources and your strengths properly, then you are living in the right arena. You are being highly productive.\nBut if you\u0026rsquo;re not using those strengths properly, if you are using them in the wrong arena, you are in the unproductive zone.\nAgain, our job is to move our resources from an unproductive area to a productive area. That‚Äôs when we can massively multiply our productivity.\nKEY POINTS: The basics - The 80/20 principle in a nutshell. You can be great - How the 80/20 principle can make you, and everyone else, great. Choosing allies - Why choosing your allies is important and how to identify them. Design your own game - Stop living your life by default. Achievement island and desert - Be clear with your ‚Äúachievement islands‚Äù and only build on them. Relationships - How the 80/20 principle applies to our relationships and how we can improve them. Ruthlessly prune - Why we need to reduce, not add, in our lives. Multiplying output - Use your strengths and resources properly in order to multiply your productivity. ","permalink":"http://localhost:1313/posts/80-20-rule/","summary":"\u003cp\u003e\u003cimg alt=\"cover-image\" loading=\"lazy\" src=\"/posts/assets/80-20/80-20.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eHow anyone can be more effective with less effort by learning how to identify and leverage the 80/20 principle\u0026ndash;the well-known, unpublicized secret that 80 percent of all our results in business and in life stem from a mere 20 percent of our efforts.\u003c/p\u003e\n\u003cp\u003eThe 80/20 principle is one of the great secrets of highly effective people and organizations.\u003c/p\u003e\n\u003cp\u003eDid you know, for example, that 20 percent of customers account for 80 percent of revenues? That 20 percent of our time accounts for 80 percent of the work we accomplish? \u003cstrong\u003eThe 80/20 Principle\u003c/strong\u003e shows how\nwe can achieve much more with much less effort, time, and resources, simply by identifying and focusing our efforts on the 20 percent t at really counts. Although the 80/20 principle has long influenced today\u0026rsquo;s business world, author Richard Koch reveals how the principl works and shows how we can use it in a systematic and practical way to vastly increase our effectiveness, and improve our careers and o r companies.\u003c/p\u003e","title":"The 80/20 Principle"},{"content":"\nIn this article, we‚Äôll walk through the complete process of building an AI chatbot web app powered by Google Gemini and deploying it to the web using Vercel. We‚Äôll use AssistantUI, a modern framework to create conversational experiences using powerful LLMs.\nStep 1: Install the Prerequisites Before we begin, make sure the following tools are installed on your machine:\nInstall Visual Studio Code (VS Code). Install Node.js (Node.js). Install Git (Git). Step 2: Set Up the Project Directory Create a folder named chatbot:\nmkdir chatbot \u0026amp;\u0026amp; cd chatbot Open the folder in VS\ncode . Step 3: Scaffold the Assistant UI App npx assistant-ui@latest create This command will prompt you to select a template. Choose the chat template. This will create a new folder named assistant-ui with the necessary files and dependencies.\nStep 4: Set Up Dependencies Move into the generated project folder (likely chatbot):\ncd chatbot Install the required SDKs:\nnpm install ai @assistant-ui/react-ai-sdk @ai-sdk/google Step 5: Integrate Google Gemini API Open the file:\n/app/api/chat/route.ts Clear all content in the file and paste the following code:\nimport { google } from \u0026#34;@ai-sdk/google\u0026#34;; import { streamText } from \u0026#34;ai\u0026#34;; export const maxDuration = 30; export async function POST(req: Request) { const { messages } = await req.json(); const result = streamText({ model: google(\u0026#34;gemini-2.0-flash\u0026#34;), messages, }); return result.toDataStreamResponse(); } Get your Google Gemini API Key from the Google AI Studio.\nStep 6: Store Your API Key Create a new environment file in the root directory:\n.env.local Add the following line:\nGOOGLE_GENERATIVE_AI_API_KEY=\u0026#34;Your_API_KEY\u0026#34; Make sure to replace Your_API_KEY with your actual API key.\nStep 7: Run the Development Server Start your app locally:\nnpm run dev Your application will be live at:\nhttp://localhost:3000 Step 8: Build for Production Build your app for production:\nnpm run build This command will create a .vercel folder in your project directory.\nClean up: Delete the node_modules folder and .env.local file before uploading to GitHub for security reasons.\nStep 9: Upload your code to GitHub Create a new repository on GitHub. Initialize a new Git repository in your project folder: git init Add your files to the repository: git add . Commit your changes: git commit -m \u0026#34;Initial commit\u0026#34; Add the remote repository: git remote add origin https://github.com/\u0026lt;username\u0026gt;/chatbot.git Push your changes: git push -u origin main Step 10: Deploy to vercel Go to Vercel and sign in with your GitHub account. Click on the \u0026ldquo;New Project\u0026rdquo; button. Select your GitHub repository. Vercel will automatically detect the framework and set up the build settings. When prompted, add your API key as an environment variable:\nGOOGLE_GENERATIVE_AI_API_KEY = your_key_here Step 11: Your AI Chatbot is Live! Once the deployment is complete, you will receive a live URL for your chatbot. You can share this URL with anyone to access your AI chatbot.\nFinal Notes Make sure to keep your API key secure and do not expose it in your public repositories. This setup gives you a solid starting point to create intelligent AI interfaces. You can now customize the UI, add more features, or even connect this to a backend for storing user interactions. ","permalink":"http://localhost:1313/posts/chatbot/","summary":"\u003cp\u003e\u003cimg alt=\"Thumbnail Image\" loading=\"lazy\" src=\"/posts/assets/tech/chatbot.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eIn this article, we‚Äôll walk through the complete process of building an AI chatbot web app powered by Google Gemini and deploying it to the web using Vercel. We‚Äôll use AssistantUI, a modern framework to create conversational experiences using powerful LLMs.\u003c/p\u003e\n\u003ch2 id=\"step-1-install-the-prerequisites\"\u003eStep 1: Install the Prerequisites\u003c/h2\u003e\n\u003cp\u003eBefore we begin, make sure the following tools are installed on your machine:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInstall Visual Studio Code (\u003ca href=\"https://code.visualstudio.com\"\u003eVS Code\u003c/a\u003e).\u003c/li\u003e\n\u003cli\u003eInstall Node.js (\u003ca href=\"https://nodejs.org/en/download/\"\u003eNode.js\u003c/a\u003e).\u003c/li\u003e\n\u003cli\u003eInstall Git (\u003ca href=\"https://git-scm.com/downloads\"\u003eGit\u003c/a\u003e).\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step-2-set-up-the-project-directory\"\u003eStep 2: Set Up the Project Directory\u003c/h2\u003e\n\u003cp\u003eCreate a folder named chatbot:\u003c/p\u003e","title":"Build an AI Chatbot Web App with Google Gemini and Deploy on Vercel"},{"content":"Installing MS SQL Server along with Azure Data Studio on Arch Linux requires a combination of Microsoft packages and some extra tweaks since SQL Server isn\u0026rsquo;t natively available for Arch and Azure Data Studio is mainly targeted for Debian/Red Hat based distros.\nStep 1: Install Azure Data Studio Azure Data Studio is available via AUR.\nyay -S azuredatastudio-bin This installs the latest prebuilt version from Microsoft.\nOption 2: Manual (optional) If you want to manually install:\nDownload .tar.gz from Azure Data Studio official packages Extract it: tar -xvzf azuredatastudio-linux-x64.tar.gz cd azuredatastudio-linux-x64 ./azuredatastudio Step 2: Install Microsoft SQL Server (Docker Method ‚Äì Recommended) Microsoft SQL Server is not supported natively on Arch, but the Docker container is fully functional and easiest to manage.\nInstall Docker if you haven‚Äôt: sudo pacman -S docker sudo systemctl enable --now docker sudo usermod -aG docker $USER newgrp docker Pull SQL Server Image: docker pull mcr.microsoft.com/mssql/server:2022-latest Run the Container: docker run -e \u0026#34;ACCEPT_EULA=Y\u0026#34; -e \u0026#34;SA_PASSWORD=YourStrong!Passw0rd\u0026#34; \\ -p 1433:1433 --name sql_server \\ -d mcr.microsoft.com/mssql/server:2022-latest Note: Make sure to use a strong password (uppercase, lowercase, number, symbol, and \u0026gt;8 characters).\nStep 3: Connect SQL Server to Azure Data Studio Launch Azure Data Studio. Click on New Connection. Fill out the fields: Server: localhost Authentication: SQL Login User: sa Password: YourStrong!Passw0rd Hit Connect Step 4: (Optional) Autostart Docker with Hyprland If you want SQL Server to start with your system:\nsudo systemctl enable docker Or add a Hyprland hook to start the container at login:\ndocker start sql_server Conclusion You now have a fully functional SQL Server instance running on Arch Linux via Docker, and you can manage it using Azure Data Studio. This setup allows you to leverage the power of SQL Server without needing to run a full Windows environment.\n","permalink":"http://localhost:1313/posts/sqlserver/","summary":"\u003cp\u003eInstalling MS SQL Server along with Azure Data Studio on Arch Linux requires a combination of Microsoft packages and some extra tweaks since SQL Server isn\u0026rsquo;t natively available for Arch and Azure Data Studio is mainly targeted for Debian/Red Hat based distros.\u003c/p\u003e\n\u003ch2 id=\"step-1-install-azure-data-studio\"\u003eStep 1: Install Azure Data Studio\u003c/h2\u003e\n\u003cp\u003eAzure Data Studio is available via AUR.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eyay -S azuredatastudio-bin\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis installs the latest prebuilt version from Microsoft.\u003c/p\u003e\n\u003ch3 id=\"option-2-manual-optional\"\u003eOption 2: Manual (optional)\u003c/h3\u003e\n\u003cp\u003eIf you want to manually install:\u003c/p\u003e","title":"MS SQL Server and Azure Data Studio on Arch Linux"},{"content":"Database Database is a collection of interrelated data.\nA database is an organized collection of data that can be easily accessed, managed, and updated. It stores data in tables, rows, and columns, allowing efficient retrieval and manipulation. Examples include MySQL, PostgreSQL, and MongoDB. DBMS DBMS(Database Management System) is software used to create, manage, and organize databases.\nA DBMS is software that manages and controls database operations like storing, retrieving, and updating data. It ensures data consistency, security, and integrity while providing an interface for users to interact with the database. Examples include MySQL, Oracle, and Microsoft SQL Server. üöÄ What is RDBMS RDBMS (Relational Database Management System) - is a DBMS based on the concept of tables (also called relations). Data is organized into tables(also known as relations) with rows(records) and columns(attributes). E.g., MySQL, PostgreSQL, SQL Server etc. SQL SQL is Structured Query Language - used to store, manipulate and retrieve data from RDBMS.\nWe use SQL for CRUD Operations:\nCREATE - To Create databases, tables, insert tuples etc. READ - To read data present int the database. UPDATE - Modify already insert data. DELETE - Delete database, table or specific data point/tuple/row or multiple rows. NOTE : SQL keywords are NOT case sensitive. E.g., select is the same as SELECT in SQL.\nCreate Database We can use the the following command to create the database.\nCREATE DATABASE database_name; Delete Database We Can use the DROP command to delete the database.\nDROP DATABASE database_name; Select/Use the Database We can use the USE command to select db and perform operation.\nUSE db_name; SQL vs MySQL SQL is a language used to perform CRUD operations in Relational DB, while MySQL is a RDBMS that uses SQL.\nCreating Table We can create the table in db using the CREATE TABLE command whole syntax is given below.\nCREATE TABLE table_name( column_name1 datatype constraint; column_name2 datatype constraint; column_name3 datatype constraint; ); SQL Data Types In SQL, data types define the kind of data that can be stored in a column or variable.\nDatatype Description Usage CHAR String (0-255), can store characters of fixed length CHAR(50) VARCHAR String (0-255), can store characters up to given length VARCHAR(50) BLOB String (0-65535), can store binary large object BLOB(1000) INT Integer (-2,147,483,648 to 2,147,483,647) INT TINYINT Integer (-128 to 127) TINYINT BIGINT Integer (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807) BIGINT BIT Can store x-bit values. x can range from 1 to 64 BIT(2) FLOAT Decimal number - with precision to 23 digits FLOAT DOUBLE Decimal number - with 24 to 53 digits DOUBLE BOOLEAN Boolean values 0 or 1 BOOLEAN DATE Date in format of YYYY-MM-DD ranging from 1000-01-01 to 9999-12-31 DATE TIME HH:MM:SS TIME YEAR Year in 4-digit format ranging from 1901 to 2155 YEAR Note - CHAR is for fixed length \u0026amp; VARCHAR is for variable length strings. Generally, VARCHAR is better as it only occupies necessary memory \u0026amp; works more efficiently.\nSigned \u0026amp; Unsigned : We can also use UNSIGNED with datatypes when we only have positive values to add. Eg - UNSIGNED INT\nTINYINT UNSIGNED (0 to 255)\nTINYINT (-128 to 127)\nTypes of SQL Commands DDL(Database Definition Language): Used to create, alter, delete database objects like tables, indexes, etc. (CREATE, DROP, ALTER, RENAME, TRUNCATE). DQL(Database Query Language): Used to retrieve data from databases. (SELECT). DML(Database Manipulation Language): Used to modify the database. (INSERT, UPDATE, DELETE). DCL(Database Control Language): Used to grant \u0026amp; revoke permissions. (GRANT, REVOKE). TCL(Transaction Control Language): Used to manage transactions, (COMMIT, ROLLBACK, START TRANSACTIONS, SAVEPOINT). DATABASE related Queries CREATE DATABASE db_name; -- used to create database CREATE DATABASE IF NOT EXISTS db_name; -- create database if database not exist of this name. DROP DATABASE db_name; -- delete database DROP DATABASE IF EXISTS db_name; -- delete database if exists SHOW DATABASES; -- show all databases SHOW TABLES; -- used to show all tables in particular database Table related Queries Create Tables We can use the following syntax to create the table or design the scheme of table.\nCREATE TABLE table_name( column_name1 datatype constraint; column_name2 datatype constraint; ); Example\nCREATE TABLE student( id INT PRIMARY KEY, name VARCHAR(50), age INT NOT NULL ); Select \u0026amp; View ALL columns SELECT * FROM table_name; -- display whole table Insert INSERT INTO table_name (colname1, colname2); VALUES (col1_v1, col2_v1), (col1_v2, col2_v2); Keys Primary Key It is a column (or set of columns) in a table that uniquely identifies each row. (a unique id). There is only 1 Primary Key and it should not be NOT null\nForeign Key A foreign key is a column (or set of columns) in a table that refers to the primary key in another table. There can be multiple FKs. FKs can be have duplicate \u0026amp; null values.\nSecondary Key Secondary key may or may not be unique field. Some times records are required to access by a field other than the primary key. In these situations another key that is used is called secondary key.\nComposite Key Composite key consists of two or more than two fields. Composite key is also designed as a primary key. It is created in a situation when no single field fulfills the property of uniqueness. To make unique more than one field are combined and used as primary key.\nConstraints SQL constraints are used to specify rules for data in a table.\nNOT NULL : columns cannot have null value. col1 INT NOT NULL UNIQUE : all values in column are different. col2 UNIQUE PRIMARY KEY : makes a column unique \u0026amp; not null but used only for one. id INT PRIMARY KEY. also declare as PRIMARY KEY (id). Foreign Key Prevent actions that would destroy links between tables.\nCREATE TABLE temp( cust_id INT, FOREIGN KEY (cust_id) references customer(id) ); DEFAULT sets the default value of a column\nsalary INT DEFAULT default_value; CHECK It can limit the values allowed in a column.\nCREATE TABLE city( id INT PRIMARY KEY, city VARCHAR(50), age INT, CONSTRAINT age_check CHECK (age\u0026gt;= 16 AND city=\u0026#34;Delhi\u0026#34;) ); CREATE TABLE newTab ( age INT CHECK (age\u0026gt;=18) ); Select in Detail SELECT The SELECT statement is used to select data from a database.\nSELECT col1,col2 FROM table_name; To Select All SELECT * FROM table_name; Tip: DISTINCT Keyword Removes duplicate rows from query results.\nSyntax:\nSELECT DISTINCT column1, column2 FROM table_name; Where Clause To define some conditions\nSELECT col1,col2 from table WHERE condition(s). SELECT * FROM student WHERE marks \u0026gt; 80; SELECT * FROM student WHERE city=\u0026#34;Multan\u0026#34;; Operator in WHERE Arithmetic Operators : + , - , * , / , % Comparison Operators : = , != , \u0026gt; , \u0026gt;= , \u0026lt; , \u0026lt;= Logical Operators : AND, OR, NOT, IN, BETWEEN, ALL, LIKE, ANY Bitwise Operators : \u0026amp; , | Operators AND (to check for both conditions to be true) SELECT * FROM student WHERE marks \u0026gt; 80 AND city=\u0026#34;Multan\u0026#34;; OR (to check for one of the conditions to be true) SELECT * FROM student WHERE marks \u0026gt; 90 OR city=\u0026#34;Lahore\u0026#34;; BETWEEN : select for a given range SELECT * FROM student WHERE marks BETWEEN 80 AND 90; IN : (matches any value in the list) SELECT * FROM student WHERE city IN (\u0026#34;Multan\u0026#34;,\u0026#34;Karachi\u0026#34;) NOT : (to negate the given condition) SELECT * FROM student WHERE city NOT IN (\u0026#34;Multan\u0026#34;, \u0026#34;Karachi\u0026#34;) Limit Clause The limit clause is used to sets an upper limit on number of(tuples)rows to be returned.\nSELECT * FROM student LIMIT 3; SELECT col1,col2 FROM table_name LIMIT number; Order by Clause To sort in ascending (ASC) or descending (DESC) order.\nSELECT * FROM student ORDER BY city ASC; SELECT col1,col2 FROM table_name ORDER BY col_name(s) ASC; Aggregate Functions Aggregate functions perform a calculation on a set of values, and return a single value.\nCOUNT() MAX() MIN() SUM() AVG() Get Maximum Marks\nSELECT MAX(marks) FROM student; Get Average marks\nSELECT AVG(marks) FROM student; Group By Clause Group rows that have the same values into summary rows. It collect data from multiple records(rows) and groups the result by one ore more column.\nGenerally we use the group by with some aggregation function.\nCount number of students in each city\nSELECT city, count(name) FROM student GROUP BY city; HAVING Clause Similar to WHERE i.e., applies some condition on rows. Used when we want to apply any condition after grouping.\nCount number of students in each city where max marks cross 90.\nSELECT city, count(rollno) FROM student GROUP BY city HAVING MAX(marks) \u0026gt; 90; General Order SELECT column(s) FROM table_name WHERE condition GROUP BY column(s) HAVING condition ORDER BY column(s) ASC;\nExample:\nSELECT city FROM student WHERE grade = \u0026#34;A\u0026#34; GROUP BY city HAVING MAX(marks) \u0026gt; 90 ORDER BY city DESC; Table related Queries UPDATE is used to update existing rows in a table.\nUPDATE table_name SET col1=val1, col2=val2 WHERE condition; UPDATE student SET grade = \u0026#34;O\u0026#34; WHERE grade = \u0026#34;A\u0026#34;; DELETE is used to delete the existing rows in a table\nDELETE FROM table_name WHERE condition; DELETE FROM student WHERE marks \u0026lt; 33; Foreign Key A foreign key (FK) is a column or a set of columns in a table that establishes a link between data in two tables. It refers to the primary key (PK) in another table, ensuring data integrity and enforcing referential constraints.\nCREATE TABLE Orders ( order_id INT PRIMARY KEY, customer_id INT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); Cascading for FK On Delete Cascade When we create a foreign key using this option, it deletes the referencing rows in the child table when the referenced row is deleted in the parent table which has a primary key.\nOn Update Cascade When we create a foreign key using UPDATE CASCADE the referencing rows are updated in the child table when the referenced row is updated in the parent table which has a primary key.\nCREATE TABLE teacher( id INT PRIMARY KEY, name VARCHAR(50), dept_id INT, FOREIGN KEY (dept_id) references dept(id) ON UPDATE CASCADE ON DELETE CASCADE ); Alter The ALTER is used to change the schema of table in a database.\nADD Column ALTER TABLE table_name ADD COLUMN column_name datatype constraint; DROP Column ALTER TABLE table_name DROP COLUMN column_name; RENAME Column ALTER TABLE table_name RENAME TO new_table_name; CHANGE Column(rename) ALTER TABLE table_name CHANGE COLUMN old_name new_name new_datatype new_constraint; MODIFY Column(modify datatype/ constraint) ALTER TABLE table_name MODIFY col_name new_datatype new_constraint; Truncate The TRUNCATE is used to delete the data of table in database.\nTRUNCATE TABLE table_name ; Joins in SQL JOIN is used to combine rows from two or more tables, based on a related column between them.\n1. Inner Join Returns records that have matching values in both tables Syntax\nSELECT column(s) FROM tableA INNER JOIN tableB ON tableA.col_name = tableB.col_name; Example\nSELECT * FROM student INNER JOIN course ON student.student_id = course.student_id; Tip: SQL aliases are used to give a table, or a column in a table, a temporary name. Aliases are often used to make column names more readable. An alias only exists for the duration of that query. An alias is created with the¬†AS¬†keyword.\nSELECT CustomerID AS ID FROM Customers; 2. Left Join Returns all records from the left table, and the matched records from the right table. Syntax\nSELECT columns(s) FROM talbeA LEFT JOIN tableB ON tableA.col_name = tableB.col_name; Example\nSELECT * FROM student as s LEFT JOIN course as c ON s.student_id = c.student_id; 3. Right Join Returns all records from the right table, and the matched records from the left table\nSyntax\nSELECT column(s) FROM tableA RIGHT JOIN tableB ON tableA.col_name = tableB.col_name; Example\nSELECT * FROM student as s RIGHT JOIN course as c ON s.student_id = c.student_id; 4. Full Join Returns all records when there is a match in either left or right table\nSELECT * FROM student AS s LEFT JOIN course AS c ON s.student_id = c.student_id UNION SELECT * FROM student AS s LEFT JOIN course AS c ON s.student_id = c.student_id; Left Exclusive Join Exclusive joins in SQL are used to retrieve records that exist in one table but not in the other when performing a LEFT JOIN or RIGHT JOIN.\nA Left Exclusive Join retrieves records from the left table that do not have matching records in the right table.\nSELECT * FROM student AS a LEFT JOIN course AS b ON a.id = b.id WHERE b.id IS NULL; Right Exclusive Join A Right Exclusive Join retrieves records from the right table that do not have matching records in the left table.\nSELECT * FROM student AS a RIGHT JOIN course AS b ON a.id = b.id WHERE a.id IS NULL; Self Join It is a regular join but the table is joined with itself.\nSELECT column(s) FROM table as a JOIN table as b ON a.col_name = b.col_name Union It is used to combine the result-set of two or more SELECT statements. Gives UNIQUE records.\nevery SELECT should have same no. of columns columns must have similar data types columns in every SELECT should be in same order SELECT column(s) FROM tableA UNION SELECT column(s) FROM tableB and we can also use the UNION ALL to give all the values including the duplicates records.\nSQL Sub Queries A Subquery or Inner query or a Nested query is a query within another SQL query. It is used to return data that will be used in the main query as a condition.\nIt involves 2 select statements.\nSyntax SELECT column(s) FROM table_name WHERE col_name operator ( subquery ); Example with FROM SELECT MAX(marks) FROM (SELECT marks FROM student WHERE city = \u0026#39;Delhi\u0026#39;) AS temp; MySQL Views A view is a virtual table based on the result-set of an SQL statement.\nA view always shows up-to-date data. The database engine recreates the view, every time a user queries it.\nCREATE VIEW v1 AS SELECT rollno, name, marks FROM student; Stored Procedures in MySQL A Stored Procedure is a precompiled set of SQL statements stored in the database that can be executed repeatedly. It helps encapsulate logic in a modular way, improving reusability, maintainability, and performance.\nBenefits of Stored Procedures Modularity ‚Äì Write once, use many times. Performance ‚Äì Precompiled for faster execution. Security ‚Äì Users can be granted access to run procedures without giving access to underlying tables. Reduced network traffic ‚Äì Fewer queries sent between application and server. Syntax: Creating a Stored Procedure DELIMITER // CREATE PROCEDURE procedure_name ( IN param1 datatype, OUT param2 datatype, INOUT param3 datatype ) BEGIN -- SQL statements go here END // DELIMITER ; Example:\nDELIMITER // CREATE PROCEDURE GetEmployeeByID(IN emp_id INT) BEGIN SELECT * FROM employees WHERE id = emp_id; END // DELIMITER ; Calling a Stored Procedure CALL GetEmployeeByID(1); If there are OUT or INOUT parameters:\nCALL ProcedureName(@out_param); SELECT @out_param; Types of Parameters Type Description IN Input only (passed by value). OUT Output only (value returned). INOUT Both input and output (passed by reference). Modifying or Dropping Stored Procedures DROP PROCEDURE IF EXISTS procedure_name; Alter is not supported: You must drop and recreate the procedure. Control Structures in Stored Procedures IF-ELSE Used to execute different blocks of code based on a condition.\nIF condition THEN -- statements ELSE -- statements END IF; Example:\nDELIMITER // CREATE PROCEDURE CheckAge(IN age INT) BEGIN IF age \u0026gt;= 18 THEN SELECT \u0026#39;You are an adult\u0026#39; AS result; ELSE SELECT \u0026#39;You are a minor\u0026#39; AS result; END IF; END // DELIMITER ; -- Call the procedure CALL CheckAge(20); -- Output: You are an adult CALL CheckAge(15); -- Output: You are a minor CASE Statement Used as an alternative to multiple IF statements when checking several conditions.\nSyntax:\nCASE variable WHEN value1 THEN statement1; WHEN value2 THEN statement2; ELSE statement_default; END CASE; Example:\nDELIMITER // CREATE PROCEDURE GradeResult(IN grade CHAR(1)) BEGIN CASE grade WHEN \u0026#39;A\u0026#39; THEN SELECT \u0026#39;Excellent\u0026#39; AS Result; WHEN \u0026#39;B\u0026#39; THEN SELECT \u0026#39;Good\u0026#39; AS Result; WHEN \u0026#39;C\u0026#39; THEN SELECT \u0026#39;Average\u0026#39; AS Result; ELSE SELECT \u0026#39;Fail or Invalid Grade\u0026#39; AS Result; END CASE; END // DELIMITER ; -- Call the procedure CALL GradeResult(\u0026#39;A\u0026#39;); -- Output: Excellent CALL GradeResult(\u0026#39;D\u0026#39;); -- Output: Fail or Invalid Grade WHILE Loop Repeats a block of statements while the condition is true.\nSyntax\nWHILE condition DO -- statements END WHILE; Example:\nDELIMITER // CREATE PROCEDURE CountToFive() BEGIN DECLARE i INT DEFAULT 1; WHILE i \u0026lt;= 5 DO SELECT CONCAT(\u0026#39;Count: \u0026#39;, i) AS Output; SET i = i + 1; END WHILE; END // DELIMITER ; -- Call the procedure CALL CountToFive(); ## REPEAT Loop Similar to WHILE, but checks the condition after executing the block.\nSyntax:\nREPEAT -- statements UNTIL condition END REPEAT; Example:\nDELIMITER // CREATE PROCEDURE RepeatExample() BEGIN DECLARE i INT DEFAULT 1; REPEAT SELECT CONCAT(\u0026#39;Repeat Count: \u0026#39;, i) AS Output; SET i = i + 1; UNTIL i \u0026gt; 5 END REPEAT; END // DELIMITER ; -- Call the procedure CALL RepeatExample(); Error Handling Use DECLARE ... HANDLER to define how to handle errors.\nSyntax\nDECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN -- Error handling code END; Create the procedure with error handler\nDELIMITER // CREATE PROCEDURE InsertStudent ( IN student_id INT, IN student_name VARCHAR(50) ) BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN SELECT \u0026#39;Error occurred while inserting student!\u0026#39; AS ErrorMessage; END; -- Attempt to insert student INSERT INTO students (id, name) VALUES (student_id, student_name); -- Continue execution even if error occurred SELECT \u0026#39;Insert attempt completed.\u0026#39; AS Status; END // DELIMITER ; Show Existing Stored Procedures SHOW PROCEDURE STATUS WHERE Db = \u0026#39;your_database\u0026#39;; Or to view the code:\nSHOW CREATE PROCEDURE procedure_name; ","permalink":"http://localhost:1313/posts/mysql/","summary":"\u003ch2 id=\"database\"\u003eDatabase\u003c/h2\u003e\n\u003cp\u003eDatabase is a collection of interrelated data.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA \u003cstrong\u003edatabase\u003c/strong\u003e is an organized collection of data that can be easily accessed, managed, and updated.\u003c/li\u003e\n\u003cli\u003eIt stores data in tables, rows, and columns, allowing efficient retrieval and manipulation.\u003c/li\u003e\n\u003cli\u003eExamples include MySQL, PostgreSQL, and MongoDB.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"dbms\"\u003eDBMS\u003c/h2\u003e\n\u003cp\u003eDBMS(Database Management System) is software used to create, manage, and organize databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA \u003cstrong\u003eDBMS\u003c/strong\u003e is software that manages and controls database operations like storing, retrieving, and updating data.\u003c/li\u003e\n\u003cli\u003eIt ensures data consistency, security, and integrity while providing an interface for users to interact with the database.\u003c/li\u003e\n\u003cli\u003eExamples include MySQL, Oracle, and Microsoft SQL Server. üöÄ\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"what-is-rdbms\"\u003eWhat is RDBMS\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eRDBMS (Relational Database Management System) - is a DBMS based on the concept of tables (also called relations).\u003c/li\u003e\n\u003cli\u003eData is organized into tables(also known as relations) with rows(records) and columns(attributes).\u003c/li\u003e\n\u003cli\u003eE.g., MySQL, PostgreSQL, SQL Server etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"sql\"\u003eSQL\u003c/h2\u003e\n\u003cp\u003eSQL is \u003cstrong\u003eStructured Query Language\u003c/strong\u003e - used to store, manipulate and retrieve data from RDBMS.\u003c/p\u003e","title":"Introduction to Databases - MySQL"},{"content":"Introduction to GSAP GSAP(Greensock Animation Platform) is a powerful JavaScript animation library that allows you to create high-performance animations for web applications. It is widely used for animating elements with precision and smoothness.\n2. Installing GSAP You can use GSAP in multiple ways:\nCDN\n\u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 3. Basic GSAP Syntax GSAP uses the .to(), .from(), and .fromTo() methods to animate elements.\ngsap.to() ‚Üí Animates from the current state to a new state. gsap.to(\u0026#34;.box\u0026#34;, { x: 200, duration: 1 }); gsap.from() ‚Üí Animates from a given state to the current state. gsap.from(\u0026#34;.box\u0026#34;, { opacity: 0, y: -50, duration: 1 }); gsap.fromTo() ‚Üí Specifies both the start and end states explicitly. gsap.fromTo(\u0026#34;.box\u0026#34;, { x: 0 }, { x: 300, duration: 1 }); 4. Key Properties x, y ‚Üí Move horizontally/vertically scale, scaleX, scaleY ‚Üí Scale size rotation, rotate ‚Üí Rotate element opacity ‚Üí Change transparency skewX, skewY ‚Üí Skew transformation stagger ‚Üí Create a delay between multiple elements Example\ngsap.to(\u0026#34;.box\u0026#34;, { x: 100, scale: 1.5, rotation: 360, duration: 2 }); 5. Timeline for Sequencing Animations GSAP‚Äôs gsap.timeline() helps chain animations in sequence.\nlet tl = gsap.timeline(); tl.to(\u0026#34;.box\u0026#34;, { x: 100, duration: 1 }) .to(\u0026#34;.box\u0026#34;, { y: 100, duration: 1 }) .to(\u0026#34;.box\u0026#34;, { rotation: 360, duration: 1 }); 6. Easing Functions Easing makes animations feel natural.\ngsap.to(\u0026#34;.box\u0026#34;, { x: 300, duration: 2, ease: \u0026#34;bounce.out\u0026#34; }); gsap.to(\u0026#34;.circle\u0026#34;, { y: -100, duration: 1, ease: \u0026#34;elastic.out(1, 0.3)\u0026#34; }); 7. Staggering Animations Use stagger to animate multiple elements with delay.\ngsap.to(\u0026#34;.boxes\u0026#34;, { y: 100, duration: 1, stagger: 0.2 }); 8. ScrollTrigger (GSAP Plugin) To trigger animations on scroll:\nCDN\n\u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Example:\ngsap.to(\u0026#34;.box\u0026#34;, { // Animates the element with class \u0026#34;box\u0026#34; x: 300, // Moves the element 300 pixels to the right duration: 2, // Animation lasts for 2 seconds scrollTrigger: { // Uses the ScrollTrigger plugin to trigger animation on scroll trigger: \u0026#34;.box\u0026#34;, // The animation starts when the \u0026#34;.box\u0026#34; element enters the viewport scroller: \u0026#34;body\u0026#34;, // Specifies the scrolling container (default is \u0026#34;body\u0026#34;) markers: true, // Displays visual markers (start and end points) for debugging start: \u0026#34;top 80%\u0026#34;, // Animation starts when the top of \u0026#34;.box\u0026#34; reaches 80% of the viewport height end: \u0026#34;top 30%\u0026#34;, // Animation ends when the top of \u0026#34;.box\u0026#34; reaches 30% of the viewport height scrub: true, // Makes the animation progress smoothly with scrolling } }); Explanation of ScrollTrigger Properties Property Description trigger Defines which element should trigger the animation when it enters/exits the viewport. scroller Specifies the scrollable container (default is body). Useful when working with scrollable divs. markers Adds visual markers to indicate where the animation starts and ends (for debugging). start Defines when the animation starts. \u0026quot;top 80%\u0026quot; means when the top of .box reaches 80% of the viewport height. end Defines when the animation ends. \u0026quot;top 30%\u0026quot; means when the top of .box reaches 30% of the viewport height. scrub Syncs the animation with the scroll position. If true, the animation plays forward and backward as the user scrolls. Delays the animation by 1 second, creating a smoother transition. if scrub is scrub: 2 it has range 1-5. pin The pin: true property locks (pins) an element in place while the user scrolls past it. Locomotive Locomotive Scroll is a powerful JavaScript library that provides smooth scrolling, parallax effects, and scroll-based animations. It enhances user experience by making scrolling feel more natural.\n1. Installation CDN (Easiest Way) Add this in your HTML file:\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/locomotive-scroll/dist/locomotive-scroll.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/locomotive-scroll/dist/locomotive-scroll.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; NPM/Yarn (Recommended for Projects) npm install locomotive-scroll 2. Basic Setup HTML Structure \u0026lt;body data-scroll-container\u0026gt; \u0026lt;div data-scroll-section\u0026gt; \u0026lt;h1 data-scroll data-scroll-speed=\u0026#34;2\u0026#34;\u0026gt;Smooth Scrolling\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; data-scroll-container ‚Üí Defines the scrollable container. data-scroll ‚Üí Enables scroll animations for elements. data-scroll-speed=\u0026quot;2\u0026quot; ‚Üí Adds a parallax effect. JavaScript Setup const scroll = new LocomotiveScroll({ el: document.querySelector(\u0026#34;[data-scroll-container]\u0026#34;), // Selects the scrollable container smooth: true, // Enables smooth scrolling lerp: 0.1, // Controls scroll smoothness (0 = instant, 1 = no smoothness) }); Key Features \u0026amp; Properties (1) Smooth Scrolling const scroll = new LocomotiveScroll({ el: document.querySelector(\u0026#34;[data-scroll-container]\u0026#34;), smooth: true, // Enables smooth scrolling smoothMobile: false, // Disable smooth scroll on mobile }); (2) Parallax Effects \u0026lt;h1 data-scroll data-scroll-speed=\u0026#34;3\u0026#34;\u0026gt;Parallax Effect\u0026lt;/h1\u0026gt; data-scroll-speed=\u0026quot;3\u0026quot; ‚Üí Moves the text at a different speed than the scroll. (3) Sticky Elements \u0026lt;div data-scroll data-scroll-sticky\u0026gt; \u0026lt;p\u0026gt;I\u0026#39;m sticky!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; data-scroll-sticky ‚Üí Keeps the element fixed while scrolling. (4) Scroll-based Animations scroll.on(\u0026#34;call\u0026#34;, (value, way) =\u0026gt; { if (value === \u0026#34;animate\u0026#34; \u0026amp;\u0026amp; way === \u0026#34;enter\u0026#34;) { document.querySelector(\u0026#34;.box\u0026#34;).classList.add(\u0026#34;active\u0026#34;); } }); Runs animations when an element enters/exits the viewport. (5) Scroll Events scroll.on(\u0026#34;scroll\u0026#34;, (instance) =\u0026gt; { console.log(instance.scroll.y); // Get current scroll position }); Triggers custom functions on scroll events. (6) Destroy \u0026amp; Rebuild Scroll scroll.destroy(); // Stops LocomotiveJS scroll.init(); // Re-initializes scrolling Useful when dynamically updating content. (7). LocomotiveJS with GSAP GSAP works great with LocomotiveJS for advanced animations.\nscroll.on(\u0026#34;scroll\u0026#34;, (args) =\u0026gt; { let progress = args.scroll.y / args.limit; gsap.to(\u0026#34;.progress-bar\u0026#34;, { scaleX: progress }); }); This creates a scroll progress bar animation. Summary Feature Usage Smooth Scrolling smooth: true in the JS setup Parallax Effect data-scroll-speed=\u0026quot;X\u0026quot; Sticky Sections data-scroll-sticky Scroll-based Animations scroll.on(\u0026quot;scroll\u0026quot;, callback) Integration with GSAP ScrollTrigger.scrollerProxy() ","permalink":"http://localhost:1313/posts/gsap-locomotive/","summary":"\u003ch2 id=\"introduction-to-gsap\"\u003eIntroduction to GSAP\u003c/h2\u003e\n\u003cp\u003eGSAP(Greensock Animation Platform) is a powerful JavaScript animation library that allows you to create high-performance animations for web applications. It is widely used for animating elements with precision and smoothness.\u003c/p\u003e\n\u003ch2 id=\"2-installing-gsap\"\u003e2. Installing GSAP\u003c/h2\u003e\n\u003cp\u003eYou can use GSAP in multiple ways:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCDN\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003escript\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003esrc\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003escript\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"3-basic-gsap-syntax\"\u003e3. Basic GSAP Syntax\u003c/h2\u003e\n\u003cp\u003eGSAP uses the \u003ccode\u003e.to()\u003c/code\u003e, \u003ccode\u003e.from()\u003c/code\u003e, and \u003ccode\u003e.fromTo()\u003c/code\u003e methods to animate elements.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003egsap.to()\u003c/code\u003e\u003c/strong\u003e ‚Üí Animates from the current state to a new state.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egsap.to(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;.box\u0026#34;\u003c/span\u003e, { x\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e200\u003c/span\u003e, duration\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003egsap.from()\u003c/code\u003e\u003c/strong\u003e ‚Üí Animates from a given state to the current state.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egsap.from(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;.box\u0026#34;\u003c/span\u003e, { opacity\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e, y\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#bd93f9\"\u003e50\u003c/span\u003e, duration\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003egsap.fromTo()\u003c/code\u003e\u003c/strong\u003e ‚Üí Specifies both the start and end states explicitly.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egsap.fromTo(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;.box\u0026#34;\u003c/span\u003e, { x\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e }, { x\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e300\u003c/span\u003e, duration\u003cspan style=\"color:#ff79c6\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e });\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"4-key-properties\"\u003e4. Key Properties\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ex, y\u003c/code\u003e ‚Üí Move horizontally/vertically\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003escale, scaleX, scaleY\u003c/code\u003e ‚Üí Scale size\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erotation, rotate\u003c/code\u003e ‚Üí Rotate element\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eopacity\u003c/code\u003e ‚Üí Change transparency\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eskewX, skewY\u003c/code\u003e ‚Üí Skew transformation\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estagger\u003c/code\u003e ‚Üí Create a delay between multiple elements\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eExample\u003c/em\u003e\u003c/p\u003e","title":"GSAP \u0026 Locomotive Scroll"},{"content":"DOM Manipulation in JavaScript DOM (Document Object Model) Manipulation in JavaScript refers to modifying HTML elements dynamically using JavaScript. This includes selecting, modifying, adding, or removing elements from the webpage.\nSelecting Elements in the DOM Before modifying elements, we need to select them. Here are the different ways:\nMethod Description Example document.getElementById(id) Selects an element by its ID document.getElementById(\u0026quot;myDiv\u0026quot;) document.getElementsByClassName(className) Selects elements by class name (returns an HTMLCollection) document.getElementsByClassName(\u0026quot;myClass\u0026quot;) document.getElementsByTagName(tagName) Selects elements by tag name (returns an HTMLCollection) document.getElementsByTagName(\u0026quot;p\u0026quot;) document.querySelector(selector) Selects the first element that matches the CSS selector document.querySelector(\u0026quot;.myClass\u0026quot;) document.querySelectorAll(selector) Selects all elements that match the CSS selector (returns a NodeList) document.querySelectorAll(\u0026quot;div\u0026quot;) Examples of Selection Methods 1. Selecting an Element by ID let title = document.getElementById(\u0026#34;main-title\u0026#34;); console.log(title.innerText); // Logs the text inside the element 2. Selecting Elements by Class Name let items = document.getElementsByClassName(\u0026#34;item\u0026#34;); console.log(items[0].innerText); // Logs the first element\u0026#39;s text 3. Selecting Elements by Tag Name let paragraphs = document.getElementsByTagName(\u0026#34;p\u0026#34;); console.log(paragraphs.length); // Logs the number of \u0026lt;p\u0026gt; elements 4. Selecting an Element Using querySelector() Returns only the first matching element.\nlet firstItem = document.querySelector(\u0026#34;.item\u0026#34;); // Selects the first `.item` console.log(firstItem.innerText); 5. Selecting Multiple Elements Using querySelectorAll() Returns a NodeList, supports .forEach().\nlet allItems = document.querySelectorAll(\u0026#34;.item\u0026#34;); // Selects all `.item` allItems.forEach((item) =\u0026gt; console.log(item.innerText)); innerHTML vs innerText vs textContent in JavaScript 1. innerHTML ‚úÖ Gets or sets the HTML content (including tags) inside an element.\n‚úÖ Parses and renders HTML if assigned.\n‚ùå Can expose security risks (XSS attacks) if inserting user input.\nlet h1 = document.querySelector(\u0026#34;h1\u0026#34;); h1.innerHTML += \u0026#34; \u0026lt;i\u0026gt;hello\u0026lt;/i\u0026gt;\u0026#34;; 2. innerText ‚úÖ Gets or sets only the visible text inside an element.\n‚úÖ Ignores hidden elements (like display: none;).\n‚ùå Does not retain HTML tags.\nlet h1 = document.querySelector(\u0026#34;h1\u0026#34;); h1.innerText += \u0026#34;Hack the Planat\u0026#34;; 3. textContent ‚úÖ Gets or sets all text (including hidden text) inside an element.\n‚úÖ Preserves whitespace and hidden elements (e.g., display: none;).\n‚ùå Does not interpret HTML tags.\nlet h1 = document.querySelector(\u0026#34;h1\u0026#34;); h1.textContent += \u0026#34; Hack the Planat\u0026#34;; Key Differences Between innerHTML, innerText, and textContent Property HTML Support Includes Hidden Text? Performance Security Risks? innerHTML ‚úÖ Supports HTML ‚úÖ Yes ‚ùå Slower (parses HTML) ‚ùå Vulnerable to XSS innerText ‚ùå No HTML ‚ùå No ‚úÖ Faster ‚úÖ Safe textContent ‚ùå No HTML ‚úÖ Yes ‚úÖ Fastest ‚úÖ Safe Manipulating Styles \u0026amp; Classes in JavaScript JavaScript allows us to dynamically change the styles and classes of HTML elements using:\nelement.style ‚Äì for inline styles element.classList ‚Äì for adding, removing, toggling, and checking classes 1. element.style (Manipulating Inline Styles) ‚úÖ Modifies individual CSS properties directly\n‚úÖ Only applies inline styles, does NOT affect CSS classes\n‚ùå Does not allow setting multiple styles at once using a string\n\u0026lt;div id=\u0026#34;box\u0026#34; style=\u0026#34;width: 100px; height: 100px; background: red;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;button onclick=\u0026#34;changeStyle()\u0026#34;\u0026gt;Change Style\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; function changeStyle() { let box = document.getElementById(\u0026#34;box\u0026#34;); box.style.backgroundColor = \u0026#34;blue\u0026#34;; // Change background color box.style.width = \u0026#34;200px\u0026#34;; // Change width box.style.height = \u0026#34;200px\u0026#34;; // Change height } \u0026lt;/script\u0026gt; ‚úÖ Before Clicking: Red box (100x100)\n‚úÖ After Clicking: Blue box (200x200)\n2. element.classList (Manipulating Classes) ‚úÖ Adds, removes, toggles, and checks classes efficiently\n‚úÖ Does NOT override existing styles like style does\nMethods of classList Method Description Example add(className) Adds a class element.classList.add(\u0026quot;new-class\u0026quot;) remove(className) Removes a class element.classList.remove(\u0026quot;old-class\u0026quot;) toggle(className) Toggles a class (adds if not present, removes if present) element.classList.toggle(\u0026quot;active\u0026quot;) contains(className) Checks if a class exists element.classList.contains(\u0026quot;hidden\u0026quot;) replace(oldClass, newClass) Replaces an old class with a new one element.classList.replace(\u0026quot;old\u0026quot;, \u0026quot;new\u0026quot;) \u0026lt;style\u0026gt; .box { width: 100px; height: 100px; background: red; } .big { width: 200px; height: 200px; } .blue { background: blue; } \u0026lt;/style\u0026gt; \u0026lt;div id=\u0026#34;box\u0026#34; class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSize()\u0026#34;\u0026gt;Toggle Size\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;toggleColor()\u0026#34;\u0026gt;Toggle Color\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; let box = document.getElementById(\u0026#34;box\u0026#34;); function toggleSize() { box.classList.toggle(\u0026#34;big\u0026#34;); // Toggles between small and big size } function toggleColor() { box.classList.toggle(\u0026#34;blue\u0026#34;); // Toggles background color } \u0026lt;/script\u0026gt; Creating and Deleting Elements in JavaScript DOM Manipulation Once you\u0026rsquo;ve selected elements in the DOM, the next step in DOM manipulation is creating new elements and removing existing ones dynamically.\ndocument.createElement(tagName) ‚Üí Creates a new element parent.appendChild(childElement) ‚Üí Adds an element inside another element parent.removeChild(childElement) ‚Üí Removes a child element from its parent Creating Elements ‚Äì document.createElement() ‚úÖ Creates a new element in memory (not yet visible in the DOM).\n‚úÖ You can set attributes, styles, and inner content before adding it to the DOM.\n‚ùå Must be appended manually to be visible in the DOM.\nconst newDiv = document.createElement(\u0026#39;div\u0026#39;); // Creates a \u0026lt;div\u0026gt; element newDiv.textContent = \u0026#34;Hello, this is a new div!\u0026#34;; // Adds text inside the div newDiv.classList.add(\u0026#39;new-class\u0026#39;); // Adds a class to the div console.log(newDiv); // Logs the newly created \u0026lt;div\u0026gt; Appending Elements ‚Äì appendChild() ‚úÖ Inserts a new child element inside a parent. ‚úÖ Moves elements if they already exist (won\u0026rsquo;t duplicate them).\nconst parent = document.getElementById(\u0026#39;container\u0026#39;); // Select an existing parent element parent.appendChild(newDiv); // Adds the new div inside the parent element insertBefore() ‚Äì Insert Before a Specific Element Inserts a new element before an existing child element.\nconst firstChild = parent.firstElementChild; // Get the first child of the parent parent.insertBefore(newDiv, firstChild); // Insert newDiv before the first child Removing Elements ‚Äì removeChild() ‚úÖ Deletes a child element from its parent.\n‚ùå If the element does not exist inside the parent, it throws an error.\nparent.removeChild(firstChild); // Removes the first child from the parent Removing an Element Directly (remove()) Instead of removeChild(), you can use element.remove() (modern method).\nnewDiv.remove(); // Removes the newly created \u0026lt;div\u0026gt; Summary Action Method Create an element document.createElement('tag') Add an element inside another appendChild(element), append(element) Insert before another element insertBefore(newElement, existingChild) Remove an element from the DOM removeChild(element), remove() What is addEventListener() An event listener is a method that allows you to wait for a specific event (like a click, keypress, hover, etc.) and run a function when the event occurs.\nelement.addEventListener(event, function, useCapture); Parameter Description event The type of event (e.g., \u0026quot;click\u0026quot;, \u0026quot;mouseover\u0026quot;, \u0026quot;keydown\u0026quot;) function The function to run when the event occurs useCapture (optional) true for event capturing, false for bubbling (default: false) Basic Example: Click Event\n\u0026lt;button id=\u0026#34;myBtn\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#34;myBtn\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function() { alert(\u0026#34;Button Clicked!\u0026#34;); }); \u0026lt;/script\u0026gt; Removing an Event Listener with removeEventListener() To remove an event, you must use a named function.\n\u0026lt;button id=\u0026#34;myBtn\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;remove\u0026#34;\u0026gt;Remove Event\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; function showAlert() { alert(\u0026#34;Button Clicked!\u0026#34;); } let btn = document.getElementById(\u0026#34;myBtn\u0026#34;); btn.addEventListener(\u0026#34;click\u0026#34;, showAlert); document.getElementById(\u0026#34;remove\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function() { btn.removeEventListener(\u0026#34;click\u0026#34;, showAlert); // Removes event }); \u0026lt;/script\u0026gt; Event Object (event) Every event passes an event object (e) that gives details about the event.\n\u0026lt;button id=\u0026#34;btn\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#34;btn\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function(event) { console.log(\u0026#34;Event Type:\u0026#34;, event.type); console.log(\u0026#34;Clicked Element:\u0026#34;, event.target); console.log(\u0026#34;Mouse Coordinates:\u0026#34;, event.clientX, event.clientY); }); \u0026lt;/script\u0026gt; JavaScript Events ‚Äì Cheat Sheet Category Event Description üñ±Ô∏è Mouse Events click Fires when an element is clicked dblclick Fires when an element is double-clicked mousedown Fires when a mouse button is pressed down mouseup Fires when a mouse button is released mousemove Fires when the mouse moves over an element mouseenter Fires when the mouse enters an element (does not bubble) mouseleave Fires when the mouse leaves an element (does not bubble) mouseover Fires when the mouse enters an element or its children (bubbles) mouseout Fires when the mouse leaves an element or its children (bubbles) contextmenu Fires when the right mouse button is clicked (opens the context menu) ‚å®Ô∏è Keyboard Events keydown Fires when any key is pressed down (includes special keys like Shift, Enter) keyup Fires when a key is released keypress (deprecated) Fires when a key is pressed (only for character keys) üìù Form Events submit Fires when a form is submitted change Fires when an input/select field value changes input Fires when the user types in an input field focus Fires when an element gains focus blur Fires when an element loses focus reset Fires when a form is reset üåç Window/Document Events load Fires when the entire page has loaded (including images) DOMContentLoaded Fires when the HTML document is fully loaded (before images \u0026amp; stylesheets) resize Fires when the window is resized scroll Fires when the user scrolls the page unload Fires when the user leaves the page beforeunload Fires when the user is about to leave the page (can show a confirmation) visibilitychange Fires when the page visibility changes (e.g., switching tabs) üìã Clipboard Events copy Fires when content is copied cut Fires when content is cut paste Fires when content is pasted üèóÔ∏è Drag \u0026amp; Drop Events drag Fires when an element is being dragged dragstart Fires when dragging starts dragend Fires when dragging ends dragover Fires when a dragged element is over a valid drop target dragenter Fires when a dragged element enters a drop target dragleave Fires when a dragged element leaves a drop target drop Fires when a dragged element is dropped üéµüìΩÔ∏è Media Events play Fires when media (audio/video) starts playing pause Fires when media is paused ended Fires when media reaches the end volumechange Fires when the volume is changed timeupdate Fires when the current playback position changes üëÄ Focus \u0026amp; Blur Events focus Fires when an element gains focus blur Fires when an element loses focus üì± Touch Events (Mobile) touchstart Fires when a touch point is placed on the screen touchmove Fires when a touch point moves across the screen touchend Fires when a touch point is removed from the screen ‚ö° Other Useful Events error Fires when an error occurs while loading an image, script, or resource online Fires when the browser goes online offline Fires when the browser goes offline hashchange Fires when the URL hash changes (window.location.hash) ","permalink":"http://localhost:1313/posts/dom-js/","summary":"\u003ch1 id=\"dom-manipulation-in-javascript\"\u003eDOM Manipulation in JavaScript\u003c/h1\u003e\n\u003cp\u003eDOM (Document Object Model) Manipulation in JavaScript refers to \u003cstrong\u003emodifying HTML elements dynamically\u003c/strong\u003e using JavaScript. This includes \u003cstrong\u003eselecting, modifying, adding, or removing elements\u003c/strong\u003e from the webpage.\u003c/p\u003e\n\u003ch2 id=\"selecting-elements-in-the-dom\"\u003eSelecting Elements in the DOM\u003c/h2\u003e\n\u003cp\u003eBefore modifying elements, we need to \u003cstrong\u003eselect\u003c/strong\u003e them. Here are the different ways:\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003cstrong\u003eMethod\u003c/strong\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementById(id)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects an element by its \u003cstrong\u003eID\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementById(\u0026quot;myDiv\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByClassName(className)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects elements by \u003cstrong\u003eclass name\u003c/strong\u003e (returns an HTMLCollection)\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByClassName(\u0026quot;myClass\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByTagName(tagName)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects elements by \u003cstrong\u003etag name\u003c/strong\u003e (returns an HTMLCollection)\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.getElementsByTagName(\u0026quot;p\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelector(selector)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects \u003cstrong\u003ethe first\u003c/strong\u003e element that matches the CSS selector\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelector(\u0026quot;.myClass\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelectorAll(selector)\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003eSelects \u003cstrong\u003eall\u003c/strong\u003e elements that match the CSS selector (returns a NodeList)\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003edocument.querySelectorAll(\u0026quot;div\u0026quot;)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"examples-of-selection-methods\"\u003eExamples of Selection Methods\u003c/h2\u003e\n\u003ch3 id=\"1-selecting-an-element-by-id\"\u003e1. Selecting an Element by ID\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e title \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edocument\u003c/span\u003e.getElementById(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;main-title\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole.log(title.innerText); \u003cspan style=\"color:#6272a4\"\u003e// Logs the text inside the element\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-selecting-elements-by-class-name\"\u003e2. Selecting Elements by Class Name\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e items \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edocument\u003c/span\u003e.getElementsByClassName(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;item\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole.log(items[\u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e].innerText); \u003cspan style=\"color:#6272a4\"\u003e// Logs the first element\u0026#39;s text\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-selecting-elements-by-tag-name\"\u003e3. Selecting Elements by Tag Name\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elet\u003c/span\u003e paragraphs \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edocument\u003c/span\u003e.getElementsByTagName(\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;p\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole.log(paragraphs.length); \u003cspan style=\"color:#6272a4\"\u003e// Logs the number of \u0026lt;p\u0026gt; elements\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"4-selecting-an-element-using-queryselector\"\u003e4. Selecting an Element Using querySelector()\u003c/h3\u003e\n\u003cp\u003eReturns \u003cstrong\u003eonly the first matching\u003c/strong\u003e element.\u003c/p\u003e","title":"DOM Manipulation in JavaScript"},{"content":"Arrays Objects allow you to store keyed collections of values. That‚Äôs fine.\nBut quite often we find that we need an¬†ordered collection, where we have a 1st, a 2nd, a 3rd element and so on. For example, we need that to store a list of something: users, goods, HTML elements etc.\nIt is not convenient to use an object here, because it provides no methods to manage the order of elements. We can‚Äôt insert a new property ‚Äúbetween‚Äù the existing ones. Objects are just not meant for such use.\nThere exists a special data structure named¬†Array, to store ordered collections.\nDeclaration There are two syntaxes for creating an empty array:\nlet arr = new Array(); let arr = []; Almost all the time, the second syntax is used. We can supply initial elements in the brackets:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; Array elements are numbered, starting with zero.\nWe can get an element by its number in square brackets:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits[0] ); // Apple alert( fruits[1] ); // Orange alert( fruits[2] ); // Plum We can replace an element:\nfruits[2] = \u0026#39;Pear\u0026#39;; // now [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;] ‚Ä¶Or add a new one to the array:\nfruits[3] = \u0026#39;Lemon\u0026#39;; // now [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;, \u0026#34;Lemon\u0026#34;] The total count of the elements in the array is its¬†length:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits.length ); // 3 We can also use alert to show the whole array.\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits ); // Apple,Orange,Plum An array can store elements of any type.\nFor instance:\n// mix of values let arr = [ \u0026#39;Apple\u0026#39;, { name: \u0026#39;John\u0026#39; }, true, function() { alert(\u0026#39;hello\u0026#39;); } ]; // get the object at index 1 and then show its name alert( arr[1].name ); // John // get the function at index 3 and run it arr[3](); // hello Get last elements with ‚Äúat‚Äù Let‚Äôs say we want the last element of the array.\nSome programming languages allow the use of negative indexes for the same purpose, like¬†fruits[-1].\nAlthough, in JavaScript it won‚Äôt work. The result will be¬†undefined, because the index in square brackets is treated literally.\nWe can explicitly calculate the last element index and then access it:¬†fruits[fruits.length - 1].\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; alert( fruits[fruits.length-1] ); // Plum A bit cumbersome, isn‚Äôt it? We need to write the variable name twice.\nLuckily, there‚Äôs a shorter syntax:¬†fruits.at(-1):\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Plum\u0026#34;]; // same as fruits[fruits.length-1] alert( fruits.at(-1) ); // Plum In other words,¬†arr.at(i):\nis exactly the same as¬†arr[i], if¬†i \u0026gt;= 0. for negative values of¬†i, it steps back from the end of the array. Methods pop/push, shift/unshift A¬†queue¬†is one of the most common uses of an array. In computer science, this means an ordered collection of elements which supports two operations:\npush¬†appends an element to the end. shift¬†get an element from the beginning, advancing the queue, so that the 2nd element becomes the 1st. Arrays support both operations.\nIn practice we need it very often. For example, a queue of messages that need to be shown on-screen.\nThere‚Äôs another use case for arrays ‚Äì the data structure named¬†stack.\nIt supports two operations:\npush¬†adds an element to the end. pop¬†takes an element from the end. So new elements are added or taken always from the ‚Äúend‚Äù.\nA stack is usually illustrated as a pack of cards: new cards are added to the top or taken from the top:\nFor stacks, the latest pushed item is received first, that‚Äôs also called LIFO (Last-In-First-Out) principle. For queues, we have FIFO (First-In-First-Out).\nArrays in JavaScript can work both as a queue and as a stack. They allow you to add/remove elements, both to/from the beginning or the end.\nIn computer science, the data structure that allows this, is called¬†deque.\nMethods that work with the end of the array:\npop\nExtracts the last element of the array and returns it:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; alert( fruits.pop() ); // remove \u0026#34;Pear\u0026#34; and alert it alert( fruits ); // Apple, Orange Both¬†fruits.pop()¬†and¬†fruits.at(-1)¬†return the last element of the array, but¬†fruits.pop()¬†also modifies the array by removing it.\npush\nAppend the element to the end of the array:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;]; fruits.push(\u0026#34;Pear\u0026#34;); alert( fruits ); // Apple, Orange, Pear The call¬†fruits.push(...)¬†is equal to¬†fruits[fruits.length] = ....\nMethods that work with the beginning of the array:\nshift\nExtracts the first element of the array and returns it:\nlet fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; alert( fruits.shift() ); // remove Apple and alert it alert( fruits ); // Orange, Pear unshift\nAdd the element to the beginning of the array:\nlet fruits = [\u0026#34;Orange\u0026#34;, \u0026#34;Pear\u0026#34;]; fruits.unshift(\u0026#39;Apple\u0026#39;); alert( fruits ); // Apple, Orange, Pear Methods¬†push¬†and¬†unshift¬†can add multiple elements at once:\nlet fruits = [\u0026#34;Apple\u0026#34;]; fruits.push(\u0026#34;Orange\u0026#34;, \u0026#34;Peach\u0026#34;); fruits.unshift(\u0026#34;Pineapple\u0026#34;, \u0026#34;Lemon\u0026#34;); // [\u0026#34;Pineapple\u0026#34;, \u0026#34;Lemon\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Peach\u0026#34;] alert( fruits ); Objects As we know from the chapter¬†Data types, there are eight data types in JavaScript. Seven of them are called ‚Äúprimitive‚Äù, because their values contain only a single thing (be it a string or a number or whatever).\nIn contrast, objects are used to store keyed collections of various data and more complex entities. In JavaScript, objects penetrate almost every aspect of the language. So we must understand them first before going in-depth anywhere else.\nAn object can be created with figure brackets¬†{‚Ä¶}¬†with an optional list of¬†properties. A property is a ‚Äúkey: value‚Äù pair, where¬†key¬†is a string (also called a ‚Äúproperty name‚Äù), and¬†value¬†can be anything.\nWe can imagine an object as a cabinet with signed files. Every piece of data is stored in its file by the key. It‚Äôs easy to find a file by its name or add/remove a file.\nAn empty object (‚Äúempty cabinet‚Äù) can be created using one of two syntaxes:\nlet user = new Object(); // \u0026#34;object constructor\u0026#34; syntax let user = {}; // \u0026#34;object literal\u0026#34; syntax Usually, the figure brackets¬†{...}¬†are used. That declaration is called an¬†object literal.\nLiterals and properties We can immediately put some properties into¬†{...}¬†as ‚Äúkey: value‚Äù pairs:\nlet user = { // an object name: \u0026#34;John\u0026#34;, // by key \u0026#34;name\u0026#34; store value \u0026#34;John\u0026#34; age: 30 // by key \u0026#34;age\u0026#34; store value 30 }; A property has a key (also known as ‚Äúname‚Äù or ‚Äúidentifier‚Äù) before the colon¬†\u0026quot;:\u0026quot;¬†and a value to the right of it.\nIn the¬†user¬†object, there are two properties:\nThe first property has the name¬†\u0026quot;name\u0026quot;¬†and the value¬†\u0026quot;John\u0026quot;. The second one has the name¬†\u0026quot;age\u0026quot;¬†and the value¬†30. The resulting¬†user¬†object can be imagined as a cabinet with two signed files labeled ‚Äúname‚Äù and ‚Äúage‚Äù.\nWe can add, remove and read files from it at any time.\nProperty values are accessible using the dot notation:\n// get property values of the object: alert( user.name ); // John alert( user.age ); // 30 The value can be of any type. Let‚Äôs add a boolean one:\nuser.isAdmin = true To remove a property, we can use the¬†delete¬†operator:\ndelete user.age; We can also use multiword property names, but then they must be quoted:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, \u0026#34;likes birds\u0026#34;: true // multiword property name must be quoted }; The last property in the list may end with a comma:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, } That is called a ‚Äútrailing‚Äù or ‚Äúhanging‚Äù comma. Makes it easier to add/remove/move around properties, because all lines become alike.\nSquare brackets For multiword properties, the dot access doesn‚Äôt work:\n// this would give a syntax error user.likes birds = true JavaScript doesn‚Äôt understand that. It thinks that we address¬†user.likes, and then gives a syntax error when comes across unexpected¬†birds.\nThe dot requires the key to be a valid variable identifier. That implies: contains no spaces, doesn‚Äôt start with a digit and doesn‚Äôt include special characters ($¬†and¬†_¬†are allowed).\nThere‚Äôs an alternative ‚Äúsquare bracket notation‚Äù that works with any string:\nlet user = {}; // set user[\u0026#34;likes birds\u0026#34;] = true; // get alert(user[\u0026#34;likes birds\u0026#34;]); // true // delete delete user[\u0026#34;likes birds\u0026#34;]; Now everything is fine. Please note that the string inside the brackets is properly quoted (any type of quotes will do).\nSquare brackets also provide a way to obtain the property name as the result of any expression ‚Äì as opposed to a literal string ‚Äì like from a variable as follows:\nlet key = \u0026#34;likes birds\u0026#34;; // same as user[\u0026#34;likes birds\u0026#34;] = true; user[key] = true; Here, the variable¬†key¬†may be calculated at run-time or depend on the user input. And then we use it to access the property. That gives us a great deal of flexibility.\nFor instance:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; let key = prompt(\u0026#34;What do you want to know about the user?\u0026#34;, \u0026#34;name\u0026#34;); // access by variable alert( user[key] ); // John (if enter \u0026#34;name\u0026#34;) The dot notation cannot be used in a similar way:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; let key = \u0026#34;name\u0026#34;; alert( user.key ) // undefined Computed properties We can use square brackets in an object literal, when creating an object. That‚Äôs called¬†computed properties.\nFor instance:\nlet fruit = prompt(\u0026#34;Which fruit to buy?\u0026#34;, \u0026#34;apple\u0026#34;); let bag = { [fruit]: 5, // the name of the property is taken from the variable fruit }; alert( bag.apple ); // 5 if fruit=\u0026#34;apple\u0026#34; The meaning of a computed property is simple:¬†[fruit]¬†means that the property name should be taken from¬†fruit.\nSo, if a visitor enters¬†\u0026quot;apple\u0026quot;,¬†bag¬†will become¬†{apple: 5}.\nEssentially, that works the same as:\nlet fruit = prompt(\u0026#34;Which fruit to buy?\u0026#34;, \u0026#34;apple\u0026#34;); let bag = {}; // take property name from the fruit variable bag[fruit] = 5; ‚Ä¶But looks nicer.\nWe can use more complex expressions inside square brackets:\nlet fruit = \u0026#39;apple\u0026#39;; let bag = { [fruit + \u0026#39;Computers\u0026#39;]: 5 // bag.appleComputers = 5 }; Square brackets are much more powerful than dot notation. They allow any property names and variables. But they are also more cumbersome to write.\nSo most of the time, when property names are known and simple, the dot is used. And if we need something more complex, then we switch to square brackets.\nProperty value shorthand In real code, we often use existing variables as values for property names.\nFor instance:\nfunction makeUser(name, age) { return { name: name, age: age, // ...other properties }; } let user = makeUser(\u0026#34;John\u0026#34;, 30); alert(user.name); // John variable is so common, that there‚Äôs a special¬†property value shorthand¬†to make it shorter.\nInstead of¬†name:name¬†we can just write¬†name, like this:\nfunction makeUser(name, age) { return { name, // same as name: name age, // same as age: age // ... }; } We can use both normal properties and shorthands in the same object:\nlet user = { name, // same as name:name age: 30 }; Property names limitations As we already know, a variable cannot have a name equal to one of the language-reserved words like ‚Äúfor‚Äù, ‚Äúlet‚Äù, ‚Äúreturn‚Äù etc.\nBut for an object property, there‚Äôs no such restriction:\n// these properties are all right let obj = { for: 1, let: 2, return: 3 }; alert( obj.for + obj.let + obj.return ); // 6 In short, there are no limitations on property names. They can be any strings or symbols (a special type for identifiers, to be covered later).\nOther types are automatically converted to strings.\nFor instance, a number¬†0¬†becomes a string¬†\u0026quot;0\u0026quot;¬†when used as a property key:\nlet obj = { 0: \u0026#34;test\u0026#34; // same as \u0026#34;0\u0026#34;: \u0026#34;test\u0026#34; }; // both alerts access the same property (the number 0 is converted to string \u0026#34;0\u0026#34;) alert( obj[\u0026#34;0\u0026#34;] ); // test alert( obj[0] ); // test (same property) Property existence test, ‚Äúin‚Äù operator A notable feature of objects in JavaScript, compared to many other languages, is that it‚Äôs possible to access any property. There will be no error if the property doesn‚Äôt exist!\nReading a non-existing property just returns undefined. So we can easily test whether the property exists:\nlet user = {}; alert( user.noSuchProperty === undefined ); // true means \u0026#34;no such property\u0026#34; There‚Äôs also a special operator¬†\u0026quot;in\u0026quot;¬†for that.\nThe syntax is:\n\u0026#34;key\u0026#34; in object For instance:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; alert( \u0026#34;age\u0026#34; in user ); // true, user.age exists alert( \u0026#34;blabla\u0026#34; in user ); // false, user.blabla doesn\u0026#39;t exist Please note that on the left side of¬†in¬†there must be a¬†property name. That‚Äôs usually a quoted string.\nIf we omit quotes, that means a variable should contain the actual name to be tested. For instance:\nlet user = { age: 30 }; let key = \u0026#34;age\u0026#34;; alert( key in user ); // true, property \u0026#34;age\u0026#34; exists Why does the¬†in¬†operator exist? Isn‚Äôt it enough to compare against¬†undefined?\nWell, most of the time the comparison with¬†undefined¬†works fine. But there‚Äôs a special case when it fails, but¬†\u0026quot;in\u0026quot;¬†works correctly.\nIt‚Äôs when an object property exists, but stores¬†undefined:\nlet obj = { test: undefined }; alert( obj.test ); // it\u0026#39;s undefined, so - no such property? alert( \u0026#34;test\u0026#34; in obj ); // true, the property does exist! In the code above, the property¬†obj.test¬†technically exists. So the¬†in¬†operator works right.\nSituations like this happen very rarely, because¬†undefined¬†should not be explicitly assigned. We mostly use¬†null¬†for ‚Äúunknown‚Äù or ‚Äúempty‚Äù values. So the¬†in¬†operator is an exotic guest in the code.\nThe \u0026ldquo;for..in\u0026rdquo; loop To walk over all keys of an object, there exists a special form of the loop:¬†for..in. This is a completely different thing from the¬†for(;;)¬†construct that we studied before.\nThe syntax:\nfor (key in object) { // executes the body for each key among object properties } For instance, let‚Äôs output all properties of¬†user:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, isAdmin: true }; for (let key in user) { // keys alert( key ); // name, age, isAdmin // values for the keys alert( user[key] ); // John, 30, true } Note that all ‚Äúfor‚Äù constructs allow us to declare the looping variable inside the loop, like¬†let key¬†here.\nAlso, we could use another variable name here instead of¬†key. For instance,¬†\u0026quot;for (let prop in obj)\u0026quot;¬†is also widely used.\nObject methods, \u0026ldquo;this\u0026rdquo; ‚Äúthis‚Äù in methods It‚Äôs common that an object method needs to access the information stored in the object to do its job.\nFor instance, the code inside¬†user.sayHi()¬†may need the name of the¬†user.\nTo access the object, a method can use the¬†this¬†keyword.\nThe value of¬†this¬†is the object ‚Äúbefore dot‚Äù, the one used to call the method.\nFor instance:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, sayHi() { // \u0026#34;this\u0026#34; is the \u0026#34;current object\u0026#34; alert(this.name); } }; user.sayHi(); // John Here during the execution of¬†user.sayHi(), the value of¬†this¬†will be¬†user.\nTechnically, it‚Äôs also possible to access the object without¬†this, by referencing it via the outer variable:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, sayHi() { alert(user.name); // \u0026#34;user\u0026#34; instead of \u0026#34;this\u0026#34; } }; ‚Äúthis‚Äù is not bound In JavaScript, keyword¬†this¬†behaves unlike most other programming languages. It can be used in any function, even if it‚Äôs not a method of an object.\nThere‚Äôs no syntax error in the following example:\nfunction sayHi() { alert( this.name ); } The value of¬†this¬†is evaluated during the run-time, depending on the context.\nFor instance, here the same function is assigned to two different objects and has different ‚Äúthis‚Äù in the calls:\nlet user = { name: \u0026#34;John\u0026#34; }; let admin = { name: \u0026#34;Admin\u0026#34; }; function sayHi() { alert( this.name ); } // use the same function in two objects user.f = sayHi; admin.f = sayHi; // these calls have different this // \u0026#34;this\u0026#34; inside the function is the object \u0026#34;before the dot\u0026#34; user.f(); // John (this == user) admin.f(); // Admin (this == admin) admin[\u0026#39;f\u0026#39;](); // Admin (dot or square brackets access the method ‚Äì doesn\u0026#39;t matter) Arrow functions have no ‚Äúthis‚Äù Arrow functions are special: they don‚Äôt have their ‚Äúown‚Äù this. If we reference this from such a function, it‚Äôs taken from the outer ‚Äúnormal‚Äù function.\nFor instance, here arrow() uses this from the outer user.sayHi() method:\nlet user = { firstName: \u0026#34;Ilya\u0026#34;, sayHi() { let arrow = () =\u0026gt; alert(this.firstName); arrow(); } }; user.sayHi(); // Ilya That‚Äôs a special feature of arrow functions, it‚Äôs useful when we actually do not want to have a separate¬†this, but rather to take it from the outer context. Later in the chapter¬†Arrow functions revisited¬†we‚Äôll go more deeply into arrow functions.\nSummary Functions that are stored in object properties are called ‚Äúmethods‚Äù. Methods allow objects to ‚Äúact‚Äù like¬†object.doSomething(). Methods can reference the object as¬†this. The value of¬†this¬†is defined at run-time.\nWhen a function is declared, it may use¬†this, but that¬†this¬†has no value until the function is called. A function can be copied between objects. When a function is called in the ‚Äúmethod‚Äù syntax:¬†object.method(), the value of¬†this¬†during the call is¬†object. Please note that arrow functions are special: they have no¬†this. When¬†this¬†is accessed inside an arrow function, it is taken from outside.\nKey Points In Global Scope the value of this is window. In function the value of this is window In Method the value of this is object function inside the method es5(deceleration function) the value of this is window. function inside the method es6(expression function) the value of this is object. the value of this in constructor function is blank object. In event listener value of this will be according to the element. call/apply/bind call There‚Äôs a special built-in function method¬†func.call(context, ‚Ä¶args)¬†that allows to call a function explicitly setting¬†this.\nThe syntax is:\nfunc.call(context, arg1, arg2, ...) It runs¬†func¬†providing the first argument as¬†this, and the next as the arguments.\nTo put it simply, these two calls do almost the same:\nfunc(1, 2, 3); func.call(obj, 1, 2, 3) They both call¬†func¬†with arguments¬†1,¬†2¬†and¬†3. The only difference is that¬†func.call¬†also sets¬†this¬†to¬†obj.\nAs an example, in the code below we call¬†sayHi¬†in the context of different objects:¬†sayHi.call(user)¬†runs¬†sayHi¬†providing¬†this=user, and the next line sets¬†this=admin:\nfunction sayHi() { alert(this.name); } let user = { name: \u0026#34;John\u0026#34; }; let admin = { name: \u0026#34;Admin\u0026#34; }; // use call to pass different objects as \u0026#34;this\u0026#34; sayHi.call( user ); // John sayHi.call( admin ); // Admin apply Instead of¬†func.call(this, ...arguments)¬†we could use¬†func.apply(this, arguments).\nThe syntax of built-in method¬†func.apply¬†is:\nfunc.apply(context, args) It runs the¬†func¬†setting¬†this=context¬†and using an array-like object¬†args¬†as the list of arguments.\nThe only syntax difference between¬†call¬†and¬†apply¬†is that¬†call¬†expects a list of arguments, while¬†apply¬†takes an array-like object with them.\nSo these two calls are almost equivalent:\nfunc.call(context, ...args); func.apply(context, args); Example:\nfunction func(a, b, c) { console.log(this, a, b, c); } func.call(obj, [1, 2, 3]); bind() The¬†bind()¬†method of¬†Function¬†instances creates a new function that, when called, calls this function with its¬†this¬†keyword set to the provided value, and a given sequence of arguments preceding any provided when the new function is called.\nIt does not call function. It just return another function that we can store in variable to call it\nfunction func() { console.log(this); } let n = func.bind(\u0026#34;ahmad\u0026#34;); n(); Prototypal inheritance In JavaScript, objects have a special hidden property¬†[[Prototype]]¬†(as named in the specification), that is either¬†null¬†or references another object. That object is called ‚Äúa prototype‚Äù:\nWhen we read a property from¬†object, and it‚Äôs missing, JavaScript automatically takes it from the prototype. In programming, this is called ‚Äúprototypal inheritance‚Äù. And soon we‚Äôll study many examples of such inheritance, as well as cooler language features built upon it.\nThe property¬†[[Prototype]]¬†is internal and hidden, but there are many ways to set it.\nPrototypal inheritance in JavaScript is a mechanism that allows objects to inherit properties and methods from other objects. Instead of using classes like in classical inheritance (as in Java or C++), JavaScript uses prototypes.\nfunction makeHuman(name,age){ this.name = name; this.age = age; } makeHuman.prototype.greet = 12; makeHuman.prototype.func = function(){ console.log(this.name); } let human1 = new makeHuman(\u0026#34;ahmad\u0026#34;,20); let human2 = new makeHuman(\u0026#34;ali\u0026#34;,30); How It Works: Every JavaScript object has an internal property called [[Prototype]], which points to another object.\nWhen you try to access a property or method on an object, JavaScript first looks for it on the object itself.\nIf the property/method is not found, JavaScript looks up the prototype chain until it either finds the property or reaches null.\nThe value of ‚Äúthis‚Äù An interesting question may arise in the example above: what‚Äôs the value of¬†this¬†inside¬†set fullName(value)? Where are the properties¬†this.name¬†and¬†this.surname¬†written: into¬†user¬†or¬†admin?\nThe answer is simple:¬†this¬†is not affected by prototypes at all.\nNo matter where the method is found: in an object or its prototype. In a method call,¬†this¬†is always the object before the dot.\nSo, the setter call¬†admin.fullName=¬†uses¬†admin¬†as¬†this, not¬†user.\nThat is actually a super-important thing, because we may have a big object with many methods, and have objects that inherit from it. And when the inheriting objects run the inherited methods, they will modify only their own states, not the state of the big object.\nClosures in JS A closure in JavaScript is a function that remembers the variables from its lexical scope, even when the function is executed outside that scope.\nHow It Works: When a function is created inside another function, it captures the outer function‚Äôs variables, even after the outer function has finished executing.\nfunction counter() { let count = 0; return function() { count++; console.log(count); }; } const increment = counter(); increment(); // 1 increment(); // 2 What is an Event Listener in JavaScript? An event listener is a method that allows you to wait for a specific event (like a click, keypress, hover, etc.) and run a function when the event occurs.\n‚úÖ Example of addEventListener() document.getElementById(\u0026#34;btn\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function() { console.log(\u0026#34;Button Clicked!\u0026#34;); }); Here, addEventListener(\u0026quot;click\u0026quot;, function) listens for a click event on the button with id=\u0026quot;btn\u0026quot;. When clicked, it logs \u0026quot;Button Clicked!\u0026quot;. Common Events Event Description click When an element is clicked mouseover When the mouse hovers over an element keydown When a key is pressed submit When a form is submitted What is querySelector in JavaScript? querySelector() is a method used to select an element from the DOM using CSS selectors.\nExample of querySelector() const heading = document.querySelector(\u0026#34;h1\u0026#34;); // Selects the first `\u0026lt;h1\u0026gt;` element heading.style.color = \u0026#34;red\u0026#34;; // Changes its color to red Selecting Elements document.querySelector(\u0026#34;#myId\u0026#34;); // Selects an element by ID document.querySelector(\u0026#34;.myClass\u0026#34;); // Selects the first element with this class document.querySelector(\u0026#34;p\u0026#34;); // Selects the first \u0026lt;p\u0026gt; element Event Delegation in JavaScript Event Delegation is a pattern that allows you to handle events efficiently by attaching a single event listener to a parent element instead of adding multiple listeners to child elements.\nü§î Why Use Event Delegation? ‚úÖ Better Performance ‚Üí Avoids adding multiple event listeners.\n‚úÖ Handles Dynamic Elements ‚Üí Works even for elements added later via JavaScript.\n‚úÖ Less Memory Usage ‚Üí Reduces the number of event listeners.\nExample\nlet parent = document.querySelector(\u0026#34;#parent\u0026#34;); parent.addEventListener(\u0026#34;click\u0026#34;, function (ev) { if (ev.target.id === \u0026#34;play\u0026#34;) { console.log(\u0026#34;Play Song\u0026#34;); } else if (ev.target.id === \u0026#34;pause\u0026#34;) { console.log(\u0026#34;Pause Song\u0026#34;); } }); When Should You Use Event Delegation? Handling clicks on lists, tables, menus, or dynamically added elements. Handling form inputs when adding fields dynamically. Improving performance for elements inside large containers. Higher-Order Functions in JavaScript A Higher-Order Function (HOF) is a function that takes another function as an argument or returns a function.\nfunction func1(f1) { // func1 takes a function as an argument (HOF property) f1(); // Calls the passed function return function () { // Returns a new function (HOF property) console.log(\u0026#34;returned fun\u0026#34;); }; } fun = function () { console.log(\u0026#34;Passed Function\u0026#34;); }; let returned = func1(fun); // Call func1 with \u0026#39;fun\u0026#39; function returned(); // Call the returned function Built-in Higher-Order Functions in JavaScript Method Description map() Transforms an array by applying a function to each element. filter() Filters an array based on a condition. reduce() Reduces an array to a single value. forEach() Iterates over an array but does not return a new one. Handling Errors with `try\u0026hellip;catch The try...catch block allows you to handle errors gracefully. The try...catch statement is used to handle errors, and throw is used to create custom errors.\nBasic Example of try...catch\ntry { let x = y + 5; // ‚ùå ReferenceError: y is not defined } catch (error) { console.log(\u0026#34;An error occurred:\u0026#34;, error.message); } üîπ If an error occurs inside try, execution moves to catch, preventing a crash.\nUsing throw to Create Custom Error function divide(a, b) { if (b === 0) { throw new Error(\u0026#34;Cannot divide by zero!\u0026#34;); // üöÄ Custom error } return a / b; } try { console.log(divide(10, 0)); // ‚ùå Throws an error } catch (error) { console.log(\u0026#34;Error:\u0026#34;, error.message); } üîπ throw allows custom error messages instead of generic JavaScript errors.\nfinally Block (Always Executes) try { console.log(\u0026#34;Trying something...\u0026#34;); throw new Error(\u0026#34;Something went wrong!\u0026#34;); } catch (error) { console.log(\u0026#34;Caught Error:\u0026#34;, error.message); } finally { console.log(\u0026#34;This runs no matter what!\u0026#34;); } Custom Events in JavaScript A Custom Event in JavaScript is an event that you manually create and dispatch using the CustomEvent constructor. This allows communication between different parts of your application.\nCreating and Dispatching a Custom Event The CustomEvent constructor takes two arguments: 1Ô∏è‚É£ Event Name (string)\n2Ô∏è‚É£ Event Options (optional, includes detail for extra data)\nlet ev = new Event(\u0026#34;newEv\u0026#34;); document.querySelector(\u0026#34;button\u0026#34;).addEventListener(\u0026#34;newEv\u0026#34;, function () { console.log(\u0026#34;Custom Event\u0026#34;); }); document.querySelector(\u0026#34;button\u0026#34;).dispatchEvent(ev); Full Example: Custom Event with Data\n// Create and dispatch custom event const customEvent = new CustomEvent(\u0026#34;userLoggedIn\u0026#34;, { detail: { username: \u0026#34;ahmad9059\u0026#34;, role: \u0026#34;admin\u0026#34; } }); document.addEventListener(\u0026#34;userLoggedIn\u0026#34;, function (event) { console.log(`User: ${event.detail.username}, Role: ${event.detail.role}`); }); // Dispatch the event document.dispatchEvent(customEvent); When to Use Custom Events?\nFor component communication (e.g., sending data between different UI components). When working with user interactions that don\u0026rsquo;t have built-in events. For event-driven architectures where actions trigger custom behavior. ","permalink":"http://localhost:1313/posts/javascript-advanced/","summary":"\u003ch1 id=\"arrays\"\u003eArrays\u003c/h1\u003e\n\u003cp\u003eObjects allow you to store keyed collections of values. That‚Äôs fine.\u003c/p\u003e\n\u003cp\u003eBut quite often we find that we need an¬†\u003cem\u003eordered collection\u003c/em\u003e, where we have a 1st, a 2nd, a 3rd element and so on. For example, we need that to store a list of something: users, goods, HTML elements etc.\u003c/p\u003e\n\u003cp\u003eIt is not convenient to use an object here, because it provides no methods to manage the order of elements. We can‚Äôt insert a new property ‚Äúbetween‚Äù the existing ones. Objects are just not meant for such use.\u003c/p\u003e","title":"JavaScript Advanced Concepts"},{"content":"Synchronous vs Asynchronous JavaScript JavaScript is single-threaded, meaning it executes one operation at a time in a sequential manner. However, JavaScript provides mechanisms to handle tasks asynchronously, allowing it to perform operations without blocking the main execution thread.\n1. Synchronous JavaScript In synchronous execution, tasks run one after another, meaning JavaScript waits for one operation to complete before moving to the next. This can cause delays if a task takes a long time (e.g., reading a large file or making a network request).\nExample:\nconsole.log(\u0026#34;Start\u0026#34;); function syncFunction() { console.log(\u0026#34;Processing...\u0026#34;); } syncFunction(); console.log(\u0026#34;End\u0026#34;); Here, JavaScript executes statements one by one in order, blocking execution until each task is completed.\n2. Asynchronous JavaScript Asynchronous JavaScript allows tasks to run in the background without blocking the execution of other tasks. This is useful for operations like fetching data from an API, reading files, or handling timers.\nDoes NOT wait for one task to complete before moving to the next. Allows JavaScript to handle time-consuming operations (API calls, file reads, etc.) efficiently. Uses the Event Loop to manage async tasks. How Asynchronous JavaScript Works JavaScript uses the Event Loop and the Call Stack to handle asynchronous code efficiently. It uses:\nCallbacks(setTimeout,setInterval) Fetch API Axios Promises Async/Await Callbacks A callback function is passed as an argument to be executed later.given example use the both setTimeout and setInterval and clearInterval to stop the setInterval\nconsole.log(\u0026#34;Start of program\u0026#34;); // setTimeout: Delays execution by 3 seconds setTimeout(() =\u0026gt; { console.log(\u0026#34;setTimeout: This runs after 3 seconds\u0026#34;); }, 3000); // setInterval: Runs every 2 seconds let counter = 0; let intervalID = setInterval(() =\u0026gt; { counter++; console.log(`setInterval: Counter is ${counter}`); // Stop interval after 5 executions if (counter === 5) { clearInterval(intervalID); console.log(\u0026#34;clearInterval: Stopped interval after 5 executions\u0026#34;); } }, 2000); console.log(\u0026#34;End of program (before timeouts and intervals execute)\u0026#34;); Fetch API The fetch() API is asynchronous because it makes network requests without blocking the execution of other code. It returns a Promise, which resolves when the request completes.\nfetch(\u0026#34;https://jsonplaceholder.typicode.com/todos/1\u0026#34;) // Fetch data from API .then((response) =\u0026gt; response.json()) // Convert response to JSON .then((data) =\u0026gt; console.log(data)) // Log the data .catch((error) =\u0026gt; console.error(\u0026#34;Error fetching data:\u0026#34;, error)); üîπ How it works? 1Ô∏è‚É£ fetch() makes an HTTP request (returns a Promise).\n2Ô∏è‚É£ .json() parses the response into JavaScript object (also async, returns a Promise).\n3Ô∏è‚É£ .then() handles the resolved data.\n4Ô∏è‚É£ .catch() handles errors (e.g., network failure).\nAxios Axios is asynchronous because it makes network requests without blocking execution. It is built on top of JavaScript Promises, similar to fetch(), but with more features.\nWhy use Axios?\nNo need to manually parse JSON (Axios does it automatically). Better error handling (Fetch only rejects on network errors, while Axios rejects on HTTP errors too). More readable with async/await. axios.get(\u0026#34;https://jsonplaceholder.typicode.com/todos/1\u0026#34;) .then(response =\u0026gt; console.log(response.data)) // Axios auto-parses JSON .catch(error =\u0026gt; console.error(\u0026#34;Error fetching data:\u0026#34;, error)); üî• Comparison: Axios vs. Fetch Feature Axios Fetch JSON Parsing ‚úÖ Auto ‚ùå Manual (.json()) Error Handling ‚úÖ Rejects on HTTP errors ‚ùå Only rejects on network errors Request Headers ‚úÖ Easy ‚ùå Manual setup required async/await Support ‚úÖ Yes ‚úÖ Yes Default Timeout ‚úÖ Yes (timeout option) ‚ùå No üëâ Best Practice: Use Axios when working with APIs that require headers, authentication, or advanced error handling.\nPromise in JavaScript A Promise in JavaScript is an object that represents the eventual completion (or failure) of an asynchronous operation.\nüëâ It has three states:\nPending ‚Üí Initial state, neither resolved nor rejected. Fulfilled ‚Üí Operation completed successfully. Rejected ‚Üí Operation failed. let promise = new Promise(function (resolve, reject) { fetch(`https://randomuser.me/api/`) .then((raw) =\u0026gt; raw.json()) .then((result) =\u0026gt; { if (result.results[0].gender === \u0026#34;male\u0026#34;) { resolve(); } else { reject(); } }); }); promise .then(function () { console.log(\u0026#34;Male Received\u0026#34;); }) .catch(function () { console.log(\u0026#34;Female Received\u0026#34;); }); Callbacks in JavaScript A callback is a function passed as an argument to another function and executed later.\nüëâ Why use callbacks?\nHandle asynchronous operations (like fetching data, timers, or reading files). Execute code after another function completes. function getData(url, callback) { fetch(`https://randomuser.me/api/`) .then((raw) =\u0026gt; raw.json()) .then((result) =\u0026gt; { callback(result); }); } getData(\u0026#34;https://randomuser.me/api/\u0026#34;, function (result) { console.log( result.results[0].gender, result.results[0].name.first, result.results[0].email, ); }); async/await async/await is a modern way to handle asynchronous code in JavaScript.\nIt allows you to write asynchronous code in a way that looks synchronous, making it easier to read and debug.\nüëâ Key Features:\n‚úîÔ∏è **async: **The async keyword is used before a function definition to make it return a Promise. ‚úîÔ∏è await: The await keyword is used inside an async function to pause execution until a Promise resolves. ‚úîÔ∏è Avoids callback hell and complex .then() chains.\n‚úîÔ∏è Handles errors with try/catch.\nasync function func() { let n = await fetch(`https://randomuser.me/api/`); n = await n.json(); console.log(n.results[0].gender); } func(); When to Use async/await? ‚úîÔ∏è Fetching data from an API\n‚úîÔ∏è Performing database queries\n‚úîÔ∏è Reading/Writing files (in Node.js)\n‚úîÔ∏è Processing multiple async requests together\n‚úîÔ∏è Avoiding callback hell\nEvent Loop To understand the Event Loop, you need to know how JavaScript executes code. It has three main components:\nCall Stack The Call Stack follows the LIFO (Last In, First Out) principle. It executes synchronous JavaScript code line by line. function greet() { console.log(\u0026#34;Hello!\u0026#34;); } greet(); üìå Execution:\ngreet() is pushed onto the Call Stack. console.log(\u0026quot;Hello!\u0026quot;) runs and is popped from the stack. Web APIs (Async Tasks) JavaScript delegates async tasks (e.g., setTimeout, fetch, event listeners) to Web APIs. These APIs handle the task in the background and return the result later. Example:\nconsole.log(\u0026#34;Start\u0026#34;); setTimeout(() =\u0026gt; { console.log(\u0026#34;Inside setTimeout\u0026#34;); }, 1000); console.log(\u0026#34;End\u0026#34;); üìå Execution Flow:\nconsole.log(\u0026quot;Start\u0026quot;) ‚Üí Executes immediately. setTimeout() ‚Üí Sent to Web API, NOT executed immediately. console.log(\u0026quot;End\u0026quot;) ‚Üí Executes immediately. After 1 second, the callback (console.log(\u0026quot;Inside setTimeout\u0026quot;)) moves to Callback Queue. Callback Queue \u0026amp; Microtask Queue Callback Queue: Stores callbacks from setTimeout, setInterval, event listeners. Microtask Queue: Stores callbacks from Promises (.then(), catch(), finally()) and MutationObserver. Microtasks always run before Callbacks (higher priority). Example:\nconsole.log(\u0026#34;Start\u0026#34;); setTimeout(() =\u0026gt; console.log(\u0026#34;Timeout Callback\u0026#34;), 0); Promise.resolve().then(() =\u0026gt; console.log(\u0026#34;Promise Resolved\u0026#34;)); console.log(\u0026#34;End\u0026#34;); üìå Execution Flow:\nconsole.log(\u0026quot;Start\u0026quot;) ‚Üí Runs immediately. setTimeout() ‚Üí Sent to Web API (callback moved to Callback Queue). Promise.resolve().then(...) ‚Üí Sent to Microtask Queue. console.log(\u0026quot;End\u0026quot;) ‚Üí Runs immediately. Microtask Queue executes first ‚Üí console.log(\u0026quot;Promise Resolved\u0026quot;). Callback Queue executes ‚Üí console.log(\u0026quot;Timeout Callback\u0026quot;). How the Event Loop Works 1Ô∏è‚É£ JavaScript executes synchronous code in the Call Stack. 2Ô∏è‚É£ If an async task is encountered, it moves to the Web API. 3Ô∏è‚É£ Once completed, it moves the callback to the Callback Queue or Microtask Queue. 4Ô∏è‚É£ The Event Loop checks if the Call Stack is empty. 5Ô∏è‚É£ If empty, it first executes Microtasks, then moves Callbacks from the Callback Queue. 6Ô∏è‚É£ Repeats the process infinitely.\nüöÄ Key Takeaways ‚úî JavaScript is single-threaded but handles async tasks with the Event Loop.\n‚úî Microtask Queue (Promises) runs before the Callback Queue (setTimeout).\n‚úî The Event Loop ensures JavaScript never blocks execution.\n‚úî Long-running tasks should be asynchronous to avoid UI freezing.\nDifference Between Callbacks, Promises, and Async/Await Feature Callbacks Promises Async/Await Definition A function passed as an argument to another function and executed later. An object representing the eventual completion (or failure) of an asynchronous operation. A modern way to handle asynchronous code using async and await keywords. Syntax Nested functions, leading to callback hell. Uses .then(), .catch(), and .finally(). Uses async to declare functions and await to handle promises. Readability Hard to read and maintain due to callback nesting. More readable but still involves chaining. Clean and synchronous-like syntax. Error Handling Error-prone, requires manual handling (if-else or separate error callback). Uses .catch() to handle errors. Uses try...catch for better error handling. Chaining Difficult, leads to callback hell (Pyramid of Doom). Easy with .then() chaining. Simplifies chaining with await. Execution Flow Asynchronous but difficult to manage for multiple tasks. More manageable, but chaining can still be tricky. Most intuitive, executes sequentially like synchronous code. Best For Simple async operations, event listeners. Handling multiple asynchronous operations in a cleaner way. Writing clean, readable, and maintainable async code. Generators in JavaScript Generators are special functions in JavaScript that allow us to pause and resume execution. Unlike normal functions, they do not execute all at once; instead, they produce values one at a time as requested.\nKey Features of Generators ‚úî Uses the function* syntax (notice the * after function).\n‚úî Uses the yield keyword to pause execution and return values.\n‚úî The function doesn‚Äôt run immediately; instead, it returns an iterator object.\n‚úî The next() method resumes execution from the last yield.\nfunction* myGenerator() { console.log(\u0026#34;Start\u0026#34;); yield 1; // Pause and return 1 console.log(\u0026#34;Resume\u0026#34;); yield 2; // Pause and return 2 console.log(\u0026#34;End\u0026#34;); } const gen = myGenerator(); // Creates the generator object console.log(gen.next()); // { value: 1, done: false } console.log(gen.next().value); // 2 console.log(gen.next()); // { value: undefined, done: true } üìå How it Works? Calling myGenerator() doesn\u0026rsquo;t execute it immediately. It returns a generator object (gen). gen.next() starts execution until the first yield, returning { value: 1, done: false }. Calling gen.next() again resumes execution after the first yield, printing \u0026quot;Resume\u0026quot; and yielding { value: 2, done: false }. When there are no more yield statements, done: true is returned. Generator with for...of Loop Instead of calling next() manually, we can use a for...of loop.\nfunction* fruits() { yield \u0026#34;üçé Apple\u0026#34;; yield \u0026#34;üçå Banana\u0026#34;; yield \u0026#34;üçá Grapes\u0026#34;; } for (let fruit of fruits()) { console.log(fruit); } Generators vs Async/Await Feature Generators Async/Await Execution Can be paused/resumed using yield Pauses execution until a Promise resolves Returns Iterator object Promise Use Case Custom iteration, state management Handling async operations When to Use Generators? ‚úî Custom Iterators ‚Äì Iterating over data in a custom way.\n‚úî Lazy Execution ‚Äì Generate values on demand instead of all at once.\n‚úî Infinite Sequences ‚Äì Generate values infinitely without memory issues.\n‚úî Asynchronous Programming (with co-routines) ‚Äì Generators can be combined with Promises.\nWeb Worker Web Workers allow JavaScript to run background tasks in a separate thread without blocking the main UI thread. This helps in handling heavy computations and keeping the web page responsive.\nWhy Use Web Workers? ‚úî JavaScript is single-threaded (blocking UI when executing long tasks).\n‚úî Web Workers allow running tasks in parallel on a different thread.\n‚úî Helps in CPU-intensive tasks like image processing, large calculations, etc.\n‚úî Keeps the UI smooth and prevents the page from freezing.\nüöÄ Step 1: Create the Worker (heavyWorker.js)\nonmessage = function (data) { let ans = data.data.reduce((acc, item) =\u0026gt; item + acc, 0); postMessage(ans); }; üöÄ Step 2: Use the Worker in Your Main Script (main.js)\nlet nums = Array.from({ length: 10000 }, (_, b) =\u0026gt; b + 1); let worker = new Worker(\u0026#34;worker.js\u0026#34;); worker.postMessage(nums); worker.onmessage = function (data) { console.log(data.data); }; Limitations of Web Workers ‚ùå No DOM Access ‚Äì Cannot manipulate HTML directly.\n‚ùå Cannot use window, document, or alert() ‚Äì Only limited APIs like fetch(), WebSockets, and IndexedDB.\n‚ùå Same-Origin Policy ‚Äì Workers must be loaded from the same domain.\n‚ùå Extra Resource Consumption ‚Äì Creating multiple workers consumes more memory.\n","permalink":"http://localhost:1313/posts/asynchronous-js/","summary":"\u003ch2 id=\"synchronous-vs-asynchronous-javascript\"\u003eSynchronous vs Asynchronous JavaScript\u003c/h2\u003e\n\u003cp\u003eJavaScript is \u003cstrong\u003esingle-threaded\u003c/strong\u003e, meaning it executes one operation at a time in a sequential manner. However, JavaScript provides mechanisms to handle tasks asynchronously, allowing it to perform operations without blocking the main execution thread.\u003c/p\u003e\n\u003ch2 id=\"1-synchronous-javascript\"\u003e1. Synchronous JavaScript\u003c/h2\u003e\n\u003cp\u003eIn \u003cstrong\u003esynchronous execution\u003c/strong\u003e, tasks run one after another, meaning JavaScript waits for one operation to complete before moving to the next. This can cause delays if a task takes a long time (e.g., reading a large file or making a network request).\u003c/p\u003e","title":"Asynchronous JavaScript"},{"content":"\nJavaScript was originally created to bring static web pages to life, enabling them to respond dynamically to user interactions. Its code, known as scripts, is directly embedded within HTML documents and executed by the browser as soon as the page loads. Because these scripts are delivered and interpreted as plain text, they bypass the need for a separate compilation process‚Äîthis makes development swift and flexible.\nThis interpretive nature is a key characteristic of JavaScript and distinguishes it from compiled languages like Java. Whereas Java requires a compile step to transform code into bytecode before execution, JavaScript‚Äôs immediate execution model facilitates rapid testing and iterative development. Over time, JavaScript has evolved from a simple tool for adding interactivity to a robust language capable of handling complex web applications, manipulating the Document Object Model (DOM), and even running on servers through environments like Node.js.\nIn essence, JavaScript‚Äôs design philosophy‚Äîenabling live, responsive web experiences with minimal overhead‚Äîcontinues to shape the modern, dynamic web.\nTip: Brendan Eich¬†is the original developer of JavaScript\nWhy is it called¬†JavaScript?\nWhen JavaScript was created, it initially had another name: ‚ÄúLiveScript‚Äù. But Java was very popular at that time, so it was decided that positioning a new language as a ‚Äúyounger brother‚Äù of Java would help.\nBut as it evolved, JavaScript became a fully independent language with its own specification called¬†ECMAScript, and now it has no relation to Java at all.\nToday, JavaScript can execute not only in the browser, but also on the server, or actually on any device that has a special program called¬†the JavaScript engine.\nThe browser has an embedded engine sometimes called a ‚ÄúJavaScript virtual machine‚Äù.\nDifferent engines have different ‚Äúcodenames‚Äù. For example:\nV8¬†‚Äì in Chrome, Opera and Edge. SpiderMonkey¬†‚Äì in Firefox. ‚Ä¶There are other codenames like ‚ÄúChakra‚Äù for IE, ‚ÄúJavaScriptCore‚Äù, ‚ÄúNitro‚Äù and ‚ÄúSquirrelFish‚Äù for Safari, etc. The terms above are good to remember because they are used in developer articles on the internet. We‚Äôll use them too. For instance, if ‚Äúa feature X is supported by V8‚Äù, then it probably works in Chrome, Opera and Edge.\nHow do engines work?\nEngines are complicated. But the basics are easy.\nThe engine (embedded if it‚Äôs a browser) reads (‚Äúparses‚Äù) the script. Then it converts (‚Äúcompiles‚Äù) the script to machine code. And then the machine code runs, pretty fast. The engine applies optimizations at each step of the process. It even watches the compiled script as it runs, analyzes the data that flows through it, and further optimizes the machine code based on that knowledge.\nWhat makes JavaScript unique? There are at least three great things about JavaScript:\nFull integration with HTML/CSS. Simple things are done simply. Supported by all major browsers and enabled by default. Link JavaScript to HTML We can use a¬†\u0026lt;script\u0026gt;¬†tag to add JavaScript code to a page. The¬†type¬†and¬†language¬†attributes are not required. A script in an external file can be inserted with¬†\u0026lt;script src=\u0026quot;path/to/script.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;. Please note: As a rule, only the simplest scripts are put into HTML. More complex ones reside in separate files.\nThe benefit of a separate file is that the browser will download it and store it in its cache.\nOther pages that reference the same script will take it from the cache instead of downloading it, so the file is actually downloaded only once.\nThat reduces traffic and makes pages faster.\nSemicolons A semicolon may be omitted in most cases when a line break exists. This would also work:\nconsole.log(\u0026#39;Hello\u0026#39;) console.log(\u0026#39;World\u0026#39;) Here, JavaScript interprets the line break as an ‚Äúimplicit‚Äù semicolon. This is called an automatic semicolon insertion.\nIn most cases, a newline implies a semicolon. But ‚Äúin most cases‚Äù does not mean ‚Äúalways‚Äù!\nThere are cases when a newline does not mean a semicolon. For example:\nconsole.log(3 + 1 + 2); The code outputs 6 because JavaScript does not insert semicolons here. It is intuitively obvious that if the line ends with a plus \u0026ldquo;+\u0026rdquo;, then it is an ‚Äúincomplete expression‚Äù, so a semicolon there would be incorrect. And in this case, that works as intended.\nBut there are situations where JavaScript ‚Äúfails‚Äù to assume a semicolon where it is really needed.\nErrors which occur in such cases are quite hard to find and fix.\nAn example of an error\nIf you‚Äôre curious to see a concrete example of such an error, check this code out:\nconsole.log(\u0026#34;Hello\u0026#34;); [1, 2].forEach(console.log); Now let‚Äôs remove the semicolon after the console.log:\nconsole.log(\u0026#34;Hello\u0026#34;) [1, 2].forEach(console.log); The difference compared to the code above is only one character: the semicolon at the end of the first line is gone.\nIf we run this code, only the first¬†Hello¬†shows (and there‚Äôs an error, you may need to open the console to see it). There are no numbers any more.\nThat‚Äôs because JavaScript does not assume a semicolon before square brackets¬†[...]. So, the code in the last example is treated as a single statement.\nHere‚Äôs how the engine sees it:\nconsole.log(\u0026#34;Hello\u0026#34;)[1, 2].forEach(console.log); It\u0026rsquo;s recommend putting semicolons between statements even if they are separated by newlines. This rule is widely adopted by the community. Let‚Äôs note once again ‚Äì it is possible to leave out semicolons most of the time. But it‚Äôs safer ‚Äì especially for a beginner ‚Äì to use them.\nComments As time goes on, programs become more and more complex. It becomes necessary to add comments which describe what the code does and why.\nComments can be put into any place of a script. They don‚Äôt affect its execution because the engine simply ignores them.\nOne-line comments start with two forward slash characters //. The rest of the line is a comment. It may occupy a full line of its own or follow a statement. Like here:\n// This comment occupies a line of its own console.log(\u0026#39;Hello\u0026#39;); console.log(\u0026#39;World\u0026#39;); // This comment follows the statement Multiline comments start with a forward slash and an asterisk /* and end with an asterisk and a forward slash */. /* An example with two messages. This is a multiline comment. */ console.log(\u0026#39;Hello\u0026#39;); console.log(\u0026#39;World\u0026#39;); Nested comments are not supported! There may not be /\u0026hellip;/ inside another /\u0026hellip;/.\nSuch code will die with an error:\n/* /* nested comment ?!? */ not allowed */ console.log( \u0026#39;World\u0026#39; ); The modern mode, \u0026ldquo;use strict\u0026rdquo; The directive looks like a string:¬†\u0026quot;use strict\u0026quot;¬†or¬†'use strict'. When it is located at the top of a script, the whole script works the ‚Äúmodern‚Äù way.\n\u0026#34;use strict\u0026#34;; // this code works the modern way ... Advance that¬†\u0026quot;use strict\u0026quot;¬†can be put at the beginning of a function. Doing that enables strict mode in that function only. But usually people use it for the whole script.\nEnsure that ‚Äúuse strict‚Äù is at the top\nPlease make sure that¬†\u0026quot;use strict\u0026quot;¬†is at the top of your scripts, otherwise strict mode may not be enabled. Strict mode isn‚Äôt enabled here:\nconsole.log(\u0026#34;some code\u0026#34;); // \u0026#34;use strict\u0026#34; below is ignored--it must be at the top \u0026#34;use strict\u0026#34;; // strict mode is not activated Should we ‚Äúuse strict‚Äù? The question may sound obvious, but it‚Äôs not so.\nOne could recommend to start scripts with \u0026ldquo;use strict\u0026rdquo;‚Ä¶ But you know what‚Äôs cool?\nModern JavaScript supports ‚Äúclasses‚Äù and ‚Äúmodules‚Äù ‚Äì advanced language structures (we‚Äôll surely get to them), that enable use strict automatically. So we don‚Äôt need to add the \u0026ldquo;use strict\u0026rdquo; directive, if we use them.\nSo, for now \u0026ldquo;use strict\u0026rdquo;; is a welcome guest at the top of your scripts. Later, when your code is all in classes and modules, you may omit it.\nAs of now, we‚Äôve got to know about use strict in general.\nIn the next chapters, as we learn language features, we‚Äôll see the differences between the strict and old modes. Luckily, there aren‚Äôt many and they actually make our lives better.\nThe purpose of¬†\u0026quot;use strict\u0026quot;¬†is to indicate that the code should be executed in \u0026ldquo;strict mode\u0026rdquo;.\nWith strict mode, you can not, for example, use undeclared variables.\nJavaScript¬†Window - The Browser Object Model In JavaScript, window is a global object that represents the browser window or tab. It is the top-level object in the browser\u0026rsquo;s client-side execution environment and provides access to various properties and methods for controlling the browser window.\nconsole The console object provides access to the browser\u0026rsquo;s debugging console.\nconsole.log(\u0026#34;Hello, World!\u0026#34;); console.warn(\u0026#34;Be carefull\u0026#34;); console.error(\u0026#34;You made a mistake\u0026#34;); log(): Outputs a message to the console. warn(): Outputs a warning message to the console. error(): Outputs an error message to the console. clear(): Clears the console. Interaction: alert, prompt, confirm As we‚Äôll be using the browser as our demo environment, let‚Äôs see a couple of functions to interact with the user:¬†alert,¬†prompt¬†and¬†confirm.\nalert() The¬†alert()¬†method displays an alert box with a message and an OK button.\nThe¬†alert()¬†method is used when you want information to come through to the user.\nalert(\u0026#34;Hello\\nHow are you?\u0026#34;); prompt() The¬†prompt()¬†method displays a dialog box that prompts the user for input.\nThe¬†prompt()¬†method returns the input value if the user clicks \u0026ldquo;OK\u0026rdquo;, otherwise it returns¬†null.\nA prompt box is used if you want the user to input a value.\nWhen a prompt box pops up, the user will have to click either \u0026ldquo;OK\u0026rdquo; or \u0026ldquo;Cancel\u0026rdquo; to proceed.\nDo not overuse this method. It prevents the user from accessing other parts of the page until the box is closed.\nresult = prompt(title, [default]); let age = prompt(\u0026#39;How old are you?\u0026#39;, 100); console.log(`You are ${age} years old!`); // You are 100 years old! confirm() The¬†confirm()¬†method displays a dialog box with a message, an OK button, and a Cancel button.\nThe¬†confirm()¬†method returns¬†true¬†if the user clicked \u0026ldquo;OK\u0026rdquo;, otherwise¬†false.\nA confirm box is often used if you want the user to verify or accept something.\nA confirm box takes the focus away from the current window, and forces the user to read the message.\nDo not overuse this method. It prevents the user from accessing other parts of the page until the box is closed.\nVariables A¬†variable¬†is a ‚Äúnamed storage‚Äù for data. We can use variables to store goodies, visitors, and other data.\nTo create a variable in JavaScript, use the¬†let¬†keyword.\nThe statement below creates (in other words:¬†declares) a variable with the name ‚Äúmessage‚Äù:\nlet message; Now, we can put some data into it by using the assignment operator¬†=:\nlet message; message = \u0026#39;Hello\u0026#39;; // store the string \u0026#39;Hello\u0026#39; in the variable named message The string is now saved into the memory area associated with the variable. We can access it using the variable name:\nlet message; message = \u0026#39;Hello!\u0026#39;; console.log(message); // shows the variable content To be concise, we can combine the variable declaration and assignment into a single line:\nlet message = \u0026#39;Hello!\u0026#39;; // define the variable and assign the value console.log(message); // Hello! We can also declare multiple variables in one line:\nlet user = \u0026#39;John\u0026#39;, age = 25, message = \u0026#39;Hello\u0026#39;; That might seem shorter, but we don‚Äôt recommend it. For the sake of better readability, please use a single line per variable.\nThe multiline variant is a bit longer, but easier to read:\nlet user = \u0026#39;John\u0026#39;; let age = 25; let message = \u0026#39;Hello\u0026#39;; Technically, all these variants do the same thing. So, it‚Äôs a matter of personal taste and aesthetics.\nvar¬†instead of¬†let\nIn older scripts, you may also find another keyword:¬†var¬†instead of¬†let:\n`_var_` message `=` `'Hello'``;`\nThe¬†var¬†keyword is¬†almost¬†the same as¬†let. It also declares a variable but in a slightly different, ‚Äúold-school‚Äù way.\nbut the main difference Variables, declared with¬†var, are either function-scoped or global-scoped. They are visible through blocks.\nThere are subtle differences between¬†let¬†and¬†var, but they do not matter to us yet. We‚Äôll cover them in detail in the chapter¬†The old \u0026ldquo;var\u0026rdquo;.\nFunctional languages\nIt‚Äôs interesting to note that there exist so-called¬†pure functional¬†programming languages, such as¬†Haskell, that forbid changing variable values.\nIn such languages, once the value is stored ‚Äúin the box‚Äù, it‚Äôs there forever. If we need to store something else, the language forces us to create a new box (declare a new variable). We can‚Äôt reuse the old one.\nThough it may seem a little odd at first sight, these languages are quite capable of serious development. More than that, there are areas like parallel computations where this limitation confers certain benefits.\nConstants To declare a constant (unchanging) variable, use¬†const¬†instead of¬†let:\nconst myBirthday = \u0026#39;18.04.1982\u0026#39;; Variables declared using¬†const¬†are called ‚Äúconstants‚Äù. They cannot be reassigned. An attempt to do so would cause an error:\nconst myBirthday = \u0026#39;18.04.1982\u0026#39;; myBirthday = \u0026#39;01.01.2001\u0026#39;; // error, can\u0026#39;t reassign the constant! When a programmer is sure that a variable will never change, they can declare it with¬†const¬†to guarantee and communicate that fact to everyone.\nUppercase constants There is a widespread practice to use constants as aliases for difficult-to-remember values that are known before execution.\nSuch constants are named using capital letters and underscores.\nFor instance, let‚Äôs make constants for colors in so-called ‚Äúweb‚Äù (hexadecimal) format:\nconst COLOR_RED = \u0026#34;#F00\u0026#34;; const COLOR_GREEN = \u0026#34;#0F0\u0026#34;; const COLOR_BLUE = \u0026#34;#00F\u0026#34;; const COLOR_ORANGE = \u0026#34;#FF7F00\u0026#34;; // ...when we need to pick a color let color = COLOR_ORANGE; console.log(color); // #FF7F00 COLOR_ORANGE¬†is much easier to remember than¬†\u0026quot;#FF7F00\u0026quot;. It is much easier to mistype¬†\u0026quot;#FF7F00\u0026quot;¬†than¬†COLOR_ORANGE. When reading the code,¬†COLOR_ORANGE¬†is much more meaningful than¬†#FF7F00. When should we use capitals for a constant and when should we name it normally? Let‚Äôs make that clear.\nBeing a ‚Äúconstant‚Äù just means that a variable‚Äôs value never changes. But some constants are known before execution (like a hexadecimal value for red) and some constants are¬†calculated¬†in run-time, during the execution, but do not change after their initial assignment.\nconst pageLoadTime = /* time taken by a webpage to load */; The value of¬†pageLoadTime¬†is not known before the page load, so it‚Äôs named normally. But it‚Äôs still a constant because it doesn‚Äôt change after the assignment.\nIn other words, capital-named constants are only used as aliases for ‚Äúhard-coded‚Äù values.\nData types A value in JavaScript is always of a certain type. For example, a string or a number.\nWe can put any type in a variable. For example, a variable can at one moment be a string and then store a number:\n// no error let message = \u0026#34;hello\u0026#34;; message = 123456; Programming languages that allow such things, such as JavaScript, are called ‚Äúdynamically typed‚Äù, meaning that there exist data types, but variables are not bound to any of them.\n1. Number: The¬†number¬†type represents both integer and floating point numbers.\nlet n = 123; n = 12.345; There are many operations for numbers, e.g. multiplication¬†*, division¬†/, addition¬†+, subtraction¬†-, and so on.\nBesides regular numbers, there are so-called ‚Äúspecial numeric values‚Äù which also belong to this data type:¬†Infinity,¬†-Infinity¬†and¬†NaN.\nInfinity¬†represents the mathematical¬†Infinity¬†‚àû. It is a special value that‚Äôs greater than any number. console.log( 1 / 0 ); // Infinity Or just reference it directly:\nNaN¬†represents a computational error. It is a result of an incorrect or an undefined mathematical operation, for instance: console.log( \u0026#34;not a number\u0026#34; / 2 ); // NaN, such division is erroneous NaN¬†is sticky. Any further mathematical operation on¬†NaN¬†returns¬†NaN:\nconsole.log( NaN + 1 ); // NaN console.log( 3 * NaN ); // NaN console.log( \u0026#34;not a number\u0026#34; / 2 - 1 ); // NaN So, if there‚Äôs a¬†NaN¬†somewhere in a mathematical expression, it propagates to the whole result (there‚Äôs only one exception to that:¬†NaN ** 0¬†is¬†1).\nBigInt In JavaScript, the ‚Äúnumber‚Äù type cannot safely represent integer values larger than¬†(253-1)¬†(that‚Äôs¬†9007199254740991), or less than¬†-(253-1)¬†for negatives.\nTo be really precise, the ‚Äúnumber‚Äù type can store larger integers (up to¬†1.7976931348623157 * 10308), but outside of the safe integer range¬†¬±(253-1)¬†there‚Äôll be a precision error, because not all digits fit into the fixed 64-bit storage. So an ‚Äúapproximate‚Äù value may be stored.\nconsole.log(9007199254740991 + 1); // 9007199254740992 console.log(9007199254740991 + 2); // 9007199254740992 So to say, all odd integers greater than¬†(253-1)¬†can‚Äôt be stored at all in the ‚Äúnumber‚Äù type.\nFor most purposes¬†¬±(253-1)¬†range is quite enough, but sometimes we need the entire range of really big integers, e.g. for cryptography or microsecond-precision timestamps.\nBigInt¬†type was recently added to the language to represent integers of arbitrary length.\nA¬†BigInt¬†value is created by appending¬†n¬†to the end of an integer:\n// the \u0026#34;n\u0026#34; at the end means it\u0026#39;s a BigInt const bigInt = 1234567890123456789012345678901234567890n; 2. String A string in JavaScript must be surrounded by quotes.\nlet str = \u0026#34;Hello\u0026#34;; let str2 = \u0026#39;Single quotes are ok too\u0026#39;; let phrase = `can embed another ${str}`; In JavaScript, there are 3 types of quotes.\nDouble quotes:¬†\u0026quot;Hello\u0026quot;. Single quotes:¬†'Hello'. Backticks:¬†`Hello`. Double and single quotes are ‚Äúsimple‚Äù quotes. There‚Äôs practically no difference between them in JavaScript.\nBackticks are ‚Äúextended functionality‚Äù quotes. They allow us to embed variables and expressions into a string by wrapping them in¬†${‚Ä¶}, for example:\nlet name = \u0026#34;John\u0026#34;; // embed a variable console.log( `Hello, ${name}!` ); // Hello, John! // embed an expression console.log( `the result is ${1 + 2}` ); // the result is 3 There is no¬†character¬†type.\nIn some languages, there is a special ‚Äúcharacter‚Äù type for a single character. For example, in the C language and in Java it is called ‚Äúchar‚Äù.\nIn JavaScript, there is no such type. There‚Äôs only one type:¬†string. A string may consist of zero characters (be empty), one character or many of them.\n3. Boolean (logical type) The boolean type has only two values:¬†true¬†and¬†false.\nThis type is commonly used to store yes/no values:¬†true¬†means ‚Äúyes, correct‚Äù, and¬†false¬†means ‚Äúno, incorrect‚Äù.\nFor instance:\nlet nameFieldChecked = true; // yes, name field is checked let ageFieldChecked = false; // no, age field is not checked 4. The ‚Äúnull‚Äù value The special¬†null¬†value does not belong to any of the types described above.\nIt forms a separate type of its own which contains only the¬†null¬†value:\nlet age = null; In JavaScript,¬†null¬†is not a ‚Äúreference to a non-existing object‚Äù or a ‚Äúnull pointer‚Äù like in some other languages.\nIt‚Äôs just a special value which represents ‚Äúnothing‚Äù, ‚Äúempty‚Äù or ‚Äúvalue unknown‚Äù.\nThe code above states that¬†age¬†is unknown.\nThe \u0026ldquo;undefined\u0026rdquo; value The special value¬†undefined¬†also stands apart. It makes a type of its own, just like¬†null.\nThe meaning of¬†undefined¬†is ‚Äúvalue is not assigned‚Äù.\nIf a variable is declared, but not assigned, then its value is¬†undefined:\nlet age; console.log(age); // shows \u0026#34;undefined\u0026#34; Technically, it is possible to explicitly assign¬†undefined¬†to a variable:\nlet age = 100; // change the value to undefined age = undefined; console.log(age); // \u0026#34;undefined\u0026#34; ‚Ä¶But it\u0026rsquo;s don‚Äôt recommend doing that. Normally, one uses¬†null¬†to assign an ‚Äúempty‚Äù or ‚Äúunknown‚Äù value to a variable, while¬†undefined¬†is reserved as a default initial value for unassigned things.\nObjects and Symbols The¬†object¬†type is special.\nAll other types are called ‚Äúprimitive‚Äù because their values can contain only a single thing (be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex entities.\nBeing that important, objects deserve a special treatment. Deal with them later in the chapter¬†Objects, after we learn more about primitives.\nThe¬†symbol¬†type is used to create unique identifiers for objects. We have to mention it here for the sake of completeness, but also postpone the details till we know objects.\nThe typeof operator The¬†typeof¬†operator returns the type of the operand. It‚Äôs useful when we want to process values of different types differently or just want to do a quick check.\nA call to¬†typeof x¬†returns a string with the type name:\ntypeof undefined // \u0026#34;undefined\u0026#34; typeof 0 // \u0026#34;number\u0026#34; typeof 10n // \u0026#34;bigint\u0026#34; typeof true // \u0026#34;boolean\u0026#34; typeof \u0026#34;foo\u0026#34; // \u0026#34;string\u0026#34; typeof Symbol(\u0026#34;id\u0026#34;) // \u0026#34;symbol\u0026#34; typeof Math // \u0026#34;object\u0026#34; (1) typeof null // \u0026#34;object\u0026#34; (2) typeof alert// \u0026#34;function\u0026#34; (3) The¬†typeof(x)¬†syntax\nYou may also come across another syntax:¬†typeof(x). It‚Äôs the same as¬†typeof x.\nTo put it clear:¬†typeof¬†is an operator, not a function. The parentheses here aren‚Äôt a part of¬†typeof. It‚Äôs the kind of parentheses used for mathematical grouping.\nUsually, such parentheses contain a mathematical expression, such as¬†(2 + 2), but here they contain only one argument¬†(x). Syntactically, they allow to avoid a space between the¬†typeof¬†operator and its argument, and some people like it.\nSome people prefer¬†typeof(x), although the¬†typeof x¬†syntax is much more common.\nType Conversions Most of the time, operators and functions automatically convert the values given to them to the right type.\nFor example,¬†console.log¬†automatically converts any value to a string to show it. Mathematical operations convert values to numbers.\nThere are also cases when we need to explicitly convert a value to the expected type.\nString Conversion String conversion happens when we need the string form of a value.\nFor example,¬†console.log(value)¬†does it to show the value.\nWe can also call the¬†String(value)¬†function to convert a value to a string:\nlet value = true; console.log(typeof value); // boolean value = String(value); // now value is a string \u0026#34;true\u0026#34; console.log(typeof value); // string String conversion is mostly obvious. A¬†false¬†becomes¬†\u0026quot;false\u0026quot;,¬†null¬†becomes¬†\u0026quot;null\u0026quot;, etc.\nNumeric Conversion Numeric conversion in mathematical functions and expressions happens automatically.\nFor example, when division¬†/¬†is applied to non-numbers:\nconsole.log( \u0026#34;6\u0026#34; / \u0026#34;2\u0026#34; ); // 3, strings are converted to numbers We can use the¬†Number(value)¬†function to explicitly convert a¬†value¬†to a number:\nlet str = \u0026#34;123\u0026#34;; console.log(typeof str); // string let num = Number(str); // becomes a number 123 console.log(typeof num); // number Explicit conversion is usually required when we read a value from a string-based source like a text form but expect a number to be entered.\nIf the string is not a valid number, the result of such a conversion is¬†NaN. For instance:\nlet age = Number(\u0026#34;an arbitrary string instead of a number\u0026#34;); console.log(age); // NaN, conversion failed Numeric conversion rules:\nValue Becomes‚Ä¶ undefined NaN null 0 true¬†and¬†false 1¬†and¬†0 string Whitespaces (includes spaces, tabs¬†\\t, newlines¬†\\n¬†etc.) from the start and end are removed. If the remaining string is empty, the result is¬†0. Otherwise, the number is ‚Äúread‚Äù from the string. An error gives¬†NaN. console.log( Number(\u0026#34; 123 \u0026#34;) ); // 123 console.log( Number(\u0026#34;123z\u0026#34;) ); // NaN (error reading a number at \u0026#34;z\u0026#34;) console.log( Number(true) ); // 1 console.log( Number(false) ); // 0 Boolean Conversion Boolean conversion is the simplest one.\nIt happens in logical operations (later we‚Äôll meet condition tests and other similar things) but can also be performed explicitly with a call to¬†Boolean(value).\nThe conversion rule:\nValues that are intuitively ‚Äúempty‚Äù, like¬†0, an empty string,¬†null,¬†undefined, and¬†NaN, become¬†false. Other values become¬†true. console.log( Boolean(1) ); // true console.log( Boolean(0) ); // false console.log( Boolean(\u0026#34;hello\u0026#34;) ); // true console.log( Boolean(\u0026#34;\u0026#34;) ); // false Please note: the string with zero¬†\u0026quot;0\u0026quot;¬†is¬†true\nSome languages (namely PHP) treat¬†\u0026quot;0\u0026quot;¬†as¬†false. But in JavaScript, a non-empty string is always¬†true.\nalert( Boolean(\u0026#34;0\u0026#34;) ); // true alert( Boolean(\u0026#34; \u0026#34;) ); // spaces, also true (any non-empty string is true) Basic operators, maths We know many operators from school. They are things like addition¬†+, multiplication¬†*, subtraction¬†-, and so on.\nIn this chapter, we‚Äôll start with simple operators, then concentrate on JavaScript-specific aspects, not covered by school arithmetic.\nMaths The following math operations are supported:\nAddition¬†+, Subtraction¬†-, Multiplication¬†*, Division¬†/, Remainder¬†%, Exponentiation¬†**. Remainder The remainder operator¬†%, despite its appearance, is not related to percents.\nThe result of¬†a % b¬†is the¬†remainder¬†of the integer division of¬†a¬†by¬†b.\nFor instance:\nconsole.log(5 % 2); // 1, the remainder of 5 divided by 2 console.log(8 % 3); // 2, the remainder of 8 divided by 3 console.log(8 % 4); // 0, the remainder of 8 divided by 4 Exponentiation: The exponentiation operator¬†a ** b¬†raises¬†a¬†to the power of¬†b.\nIn school maths, we write that as ab.\nFor instance:\nconsole.log(2 ** 2); // 2¬≤ = 4 console.log(2 ** 3); // 2¬≥ = 8 console.log(2 ** 4); // 2‚Å¥ = 16 Just like in maths, the exponentiation operator is defined for non-integer numbers as well.\nFor example, a square root is an exponentiation by ¬Ω:\nconsole.log(4 ** (1 / 2)); // 2 (power of 1/2 is the same as a square root) console.log(8 ** (1 / 3)); // 2 (power of 1/3 is the same as a cubic root) String concatenation with binary Let‚Äôs meet the features of JavaScript operators that are beyond school arithmetics.\nUsually, the plus operator¬†+¬†sums numbers.\nBut, if the binary¬†+¬†is applied to strings, it merges (concatenates) them:\nlet s = \u0026#34;my\u0026#34; + \u0026#34;string\u0026#34;; console.log(s); // mystring Note that if any of the operands is a string, then the other one is converted to a string too.\nconsole.log( \u0026#39;1\u0026#39; + 2 ); // \u0026#34;12\u0026#34; console.log( 2 + \u0026#39;1\u0026#39; ); // \u0026#34;21\u0026#34; See, it doesn‚Äôt matter whether the first operand is a string or the second one.\nHere‚Äôs a more complex example:\nconsole.log(2 + 2 + \u0026#39;1\u0026#39; ); // \u0026#34;41\u0026#34; and not \u0026#34;221\u0026#34; Here, operators work one after another. The first¬†+¬†sums two numbers, so it returns¬†4, then the next¬†+¬†adds the string¬†1¬†to it, so it‚Äôs like¬†4 + '1' = '41'.\nconsole.log(\u0026#39;1\u0026#39; + 2 + 2); // \u0026#34;122\u0026#34; and not \u0026#34;14\u0026#34; The binary¬†+¬†is the only operator that supports strings in such a way. Other arithmetic operators work only with numbers and always convert their operands to numbers.\nHere‚Äôs the demo for subtraction and division:\nconsole.log( 6 - \u0026#39;2\u0026#39; ); // 4, converts \u0026#39;2\u0026#39; to a number console.log( \u0026#39;6\u0026#39; / \u0026#39;2\u0026#39; ); // 3, converts both operands to numbers Numeric conversion, unary The plus¬†+¬†exists in two forms: the binary form that we used above and the unary form.\nThe unary plus or, in other words, the plus operator¬†+¬†applied to a single value, doesn‚Äôt do anything to numbers. But if the operand is not a number, the unary plus converts it into a number.\nFor example:\n// No effect on numbers let x = 1; console.log( +x ); // 1 let y = -2; console.log( +y ); // -2 // Converts non-numbers console.log( +true ); // 1 console.log( +\u0026#34;\u0026#34; ); // 0 It actually does the same thing as¬†Number(...), but is shorter.\nThe binary plus would add them as strings:\nlet apples = \u0026#34;2\u0026#34;; let oranges = \u0026#34;3\u0026#34;; console.log( apples + oranges ); // \u0026#34;23\u0026#34;, the binary plus concatenates strings If we want to treat them as numbers, we need to convert and then sum them:\nlet apples = \u0026#34;2\u0026#34;; let oranges = \u0026#34;3\u0026#34;; // both values converted to numbers before the binary plus console.log( +apples + +oranges ); // 5 // the longer variant // console.log( Number(apples) + Number(oranges) ); // 5 From a mathematician‚Äôs standpoint, the abundance of pluses may seem strange. But from a programmer‚Äôs standpoint, there‚Äôs nothing special: unary pluses are applied first, they convert strings to numbers, and then the binary plus sums them up.\nOperator Precedence: If an expression has more than one operator, the execution order is defined by their¬†precedence, or, in other words, the default priority order of operators.\nPrecedence Name Sign ‚Ä¶ ‚Ä¶ ‚Ä¶ 14 unary plus + 14 unary negation - 13 exponentiation ** 12 multiplication * 12 division / 11 addition + 11 subtraction - ‚Ä¶ ‚Ä¶ ‚Ä¶ 2 assignment = ‚Ä¶ ‚Ä¶ ‚Ä¶ Assignment Let‚Äôs note that an assignment¬†=¬†is also an operator. It is listed in the precedence table with the very low priority of¬†2.\nThat‚Äôs why, when we assign a variable, like¬†x = 2 * 2 + 1, the calculations are done first and then the¬†=¬†is evaluated, storing the result in¬†x.\nlet x = 2 * 2 + 1; console.log( x ); // 5 Assignment = returns a value The fact of¬†=¬†being an operator, not a ‚Äúmagical‚Äù language construct has an interesting implication.\nAll operators in JavaScript return a value. That‚Äôs obvious for¬†+¬†and¬†-, but also true for¬†=.\nThe call¬†x = value¬†writes the¬†value¬†into¬†x¬†and then returns it.\nHere‚Äôs a demo that uses an assignment as part of a more complex expression:\nlet a = 1; let b = 2; let c = 3 - (a = b + 1); console.log( a ); // 3 console.log c ); // 0 In the example above, the result of expression¬†(a = b + 1)¬†is the value which was assigned to¬†a¬†(that is¬†3). It is then used for further evaluations.\nFunny code, isn‚Äôt it? We should understand how it works, because sometimes we see it in JavaScript libraries.\nAlthough, please don‚Äôt write the code like that. Such tricks definitely don‚Äôt make code clearer or readable.\nModify-in-place We often need to apply an operator to a variable and store the new result in that same variable.\nFor example:\nlet n = 2; n = n + 5; n = n * 2; This notation can be shortened using the operators¬†+=¬†and¬†*=:\nlet n = 2; n += 5; // now n = 7 (same as n = n + 5) n *= 2; // now n = 14 (same as n = n * 2) alert( n ); // 14 Increment/decrement Increasing or decreasing a number by one is among the most common numerical operations.\nSo, there are special operators for it:\nIncrement¬†++¬†increases a variable by 1: let counter = 2; counter++; // works the same as counter = counter + 1, but is shorter alert( counter ); // 3 Decrement¬†--¬†decreases a variable by 1: let counter = 2; counter--; // works the same as counter = counter - 1, but is shorter alert( counter ); // 1 Important: Increment/decrement can only be applied to variables. Trying to use it on a value like¬†5++¬†will give an error.\nThe operators¬†++¬†and¬†--¬†can be placed either before or after a variable.\nWhen the operator goes after the variable, it is in ‚Äúpostfix form‚Äù:¬†counter++. The ‚Äúprefix form‚Äù is when the operator goes before the variable:¬†++counter. Both of these statements do the same thing: increase¬†counter¬†by¬†1.\nIs there any difference? Yes, but we can only see it if we use the returned value of¬†++/--.\nLet‚Äôs clarify. As we know, all operators return a value. Increment/decrement is no exception. The prefix form returns the new value while the postfix form returns the old value (prior to increment/decrement).\nTo see the difference, here‚Äôs an example:\nlet counter = 1; let a = ++counter; // (*) alert(a); // 2 In the line¬†(*), the¬†prefix¬†form¬†++counter¬†increments¬†counter¬†and returns the new value,¬†2. So, the¬†alert¬†shows¬†2.\nNow, let‚Äôs use the postfix form:\nlet counter = 1; let a = counter++; // (*) changed ++counter to counter++ alert(a); // 1 In the line¬†(*), the¬†postfix¬†form¬†counter++¬†also increments¬†counter¬†but returns the¬†old¬†value (prior to increment). So, the¬†alert¬†shows¬†1.\nIncrement/decrement among other operators\nThe operators¬†++/--¬†can be used inside expressions as well. Their precedence is higher than most other arithmetical operations.\nFor instance:\nlet counter = 1; alert( 2 * ++counter ); // 4 Compare With:\nlet counter = 1; alert( 2 * counter++ ); // 2, because counter++ returns the \u0026#34;old\u0026#34; value Though technically okay, such notation usually makes code less readable. One line does multiple things ‚Äì not good.\nWhile reading code, a fast ‚Äúvertical‚Äù eye-scan can easily miss something like¬†counter++¬†and it won‚Äôt be obvious that the variable increased.\nWe advise a style of ‚Äúone line ‚Äì one action‚Äù:\nlet counter = 1; alert( 2 * counter ); counter++; Bitwise operators Bitwise operators treat arguments as 32-bit integer numbers and work on the level of their binary representation.\nThese operators are not JavaScript-specific. They are supported in most programming languages.\nThe list of operators:\nAND (¬†\u0026amp;¬†) OR (¬†|¬†) XOR (¬†^¬†) NOT (¬†~¬†) LEFT SHIFT (¬†\u0026lt;\u0026lt;¬†) RIGHT SHIFT (¬†\u0026gt;\u0026gt;¬†) ZERO-FILL RIGHT SHIFT (¬†\u0026gt;\u0026gt;\u0026gt;¬†) These operators are used very rarely, when we need to fiddle with numbers on the very lowest (bitwise) level. We won‚Äôt need these operators any time soon, as web development has little use of them, but in some special areas, such as cryptography, they are useful. You can read the¬†Bitwise Operators¬†chapter on MDN when a need arises.\nComma The comma operator¬†,¬†is one of the rarest and most unusual operators. Sometimes, it‚Äôs used to write shorter code, so we need to know it in order to understand what‚Äôs going on.\nThe comma operator allows us to evaluate several expressions, dividing them with a comma¬†,. Each of them is evaluated but only the result of the last one is returned.\nlet a = (1 + 2, 3 + 4); alert( a ); // 7 (the result of 3 + 4) Here, the first expression¬†1 + 2¬†is evaluated and its result is thrown away. Then,¬†3 + 4¬†is evaluated and returned as the result.\nComma has a very low precedence\nPlease note that the comma operator has very low precedence, lower than¬†=, so parentheses are important in the example above.\nWithout them:¬†a = 1 + 2, 3 + 4¬†evaluates¬†+¬†first, summing the numbers into¬†a = 3, 7, then the assignment operator¬†=¬†assigns¬†a = 3, and the rest is ignored. It‚Äôs like¬†(a = 1 + 2), 3 + 4.\nWhy do we need an operator that throws away everything except the last expression?\nSometimes, people use it in more complex constructs to put several actions in one line.\nFor example:\n// three operations in one line for (a = 1, b = 3, c = a * b; a \u0026lt; 10; a++) { ... } Comparisons We know many comparison operators from maths.\nIn JavaScript they are written like this:\nGreater/less than:¬†a \u0026gt; b,¬†a \u0026lt; b. Greater/less than or equals:¬†a \u0026gt;= b,¬†a \u0026lt;= b. Equals:¬†a == b, please note the double equality sign¬†==¬†means the equality test, while a single one¬†a = b¬†means an assignment. Not equals: In maths the notation is¬†‚â†, but in JavaScript it‚Äôs written as¬†a != b. In this article we‚Äôll learn more about different types of comparisons, how JavaScript makes them, including important peculiarities.\nAt the end you‚Äôll find a good recipe to avoid ‚ÄúJavaScript quirks‚Äù-related issues.\nBoolean is the result All comparison operators return a boolean value:\ntrue¬†‚Äì means ‚Äúyes‚Äù, ‚Äúcorrect‚Äù or ‚Äúthe truth‚Äù. false¬†‚Äì means ‚Äúno‚Äù, ‚Äúwrong‚Äù or ‚Äúnot the truth‚Äù. For example:\nconsole.log( 2 \u0026gt; 1 ); // true (correct) console.log( 2 == 1 ); // false (wrong) console.log( 2 != 1 ); // true (correct) A comparison result can be assigned to a variable, just like any value:\nlet result = 5 \u0026gt; 4; // assign the result of the comparison console.log( result ); // true String comparison To see whether a string is greater than another, JavaScript uses the so-called ‚Äúdictionary‚Äù or ‚Äúlexicographical‚Äù order.\nIn other words, strings are compared letter-by-letter.\nFor example:\nconsole.log( \u0026#39;Z\u0026#39; \u0026gt; \u0026#39;A\u0026#39; ); // true console.log( \u0026#39;Glow\u0026#39; \u0026gt; \u0026#39;Glee\u0026#39; ); // true console.log( \u0026#39;Bee\u0026#39; \u0026gt; \u0026#39;Be\u0026#39; ); // true The algorithm to compare two strings is simple:\nCompare the first character of both strings. If the first character from the first string is greater (or less) than the other string‚Äôs, then the first string is greater (or less) than the second. We‚Äôre done. Otherwise, if both strings‚Äô first characters are the same, compare the second characters the same way. Repeat until the end of either string. If both strings end at the same length, then they are equal. Otherwise, the longer string is greater. In the first example above, the comparison¬†'Z' \u0026gt; 'A'¬†gets to a result at the first step.\nThe second comparison¬†'Glow'¬†and¬†'Glee'¬†needs more steps as strings are compared character-by-character:\nG¬†is the same as¬†G. l¬†is the same as¬†l. o¬†is greater than¬†e. Stop here. The first string is greater. Not a real dictionary, but Unicode order\nThe comparison algorithm given above is roughly equivalent to the one used in dictionaries or phone books, but it‚Äôs not exactly the same.\nFor instance, case matters. A capital letter¬†\u0026quot;A\u0026quot;¬†is not equal to the lowercase¬†\u0026quot;a\u0026quot;. Which one is greater? The lowercase¬†\u0026quot;a\u0026quot;. Why? Because the lowercase character has a greater index in the internal encoding table JavaScript uses (Unicode). We‚Äôll get back to specific details and consequences of this in the chapter¬†Strings.\nComparison of different types When comparing values of different types, JavaScript converts the values to numbers.\nFor example:\nconsole.log( \u0026#39;2\u0026#39; \u0026gt; 1 ); // true, string \u0026#39;2\u0026#39; becomes a number 2 console.log( \u0026#39;01\u0026#39; == 1 ); // true, string \u0026#39;01\u0026#39; becomes a number 1 For boolean values,¬†true¬†becomes¬†1¬†and¬†false¬†becomes¬†0.\nFor example:\nalert( true == 1 ); // true alert( false == 0 ); // true A funny consequence\nIt is possible that at the same time:\nTwo values are equal. One of them is¬†true¬†as a boolean and the other one is¬†false¬†as a boolean. For example:\nlet a = 0; alert( Boolean(a) ); // false let b = \u0026#34;0\u0026#34;; alert( Boolean(b) ); // true alert(a == b); // true! From JavaScript‚Äôs standpoint, this result is quite normal. An equality check converts values using the numeric conversion (hence¬†\u0026quot;0\u0026quot;¬†becomes¬†0), while the explicit¬†Boolean¬†conversion uses another set of rules.\nStrict equality A regular equality check¬†==¬†has a problem. It cannot differentiate¬†0¬†from¬†false:\nalert( 0 == false ); // true The same thing happens with an empty string:\nalert( \u0026#39;\u0026#39; == false ); // true This happens because operands of different types are converted to numbers by the equality operator¬†==. An empty string, just like¬†false, becomes a zero.\nWhat to do if we‚Äôd like to differentiate¬†0¬†from¬†false?\nA strict equality operator¬†===¬†checks the equality without type conversion.\nIn other words, if¬†a¬†and¬†b¬†are of different types, then¬†a === b¬†immediately returns¬†false¬†without an attempt to convert them.\nLet‚Äôs try it:\nalert( 0 === false ); // false, because the types are different There is also a ‚Äústrict non-equality‚Äù operator¬†!==¬†analogous to¬†!=.\nThe strict equality operator is a bit longer to write, but makes it obvious what‚Äôs going on and leaves less room for errors.\nComparison with null and undefined There‚Äôs a non-intuitive behavior when¬†null¬†or¬†undefined¬†are compared to other values.\nFor a strict equality check¬†===\nThese values are different, because each of them is a different type.\nalert( null === undefined ); // false For a non-strict check¬†==\nThere‚Äôs a special rule. These two are a ‚Äúsweet couple‚Äù: they equal each other (in the sense of¬†==), but not any other value.\nFor maths and other comparisons¬†\u0026lt; \u0026gt; \u0026lt;= \u0026gt;=\nnull/undefined¬†are converted to numbers:¬†null¬†becomes¬†0, while¬†undefined¬†becomes¬†NaN.\nNow let‚Äôs see some funny things that happen when we apply these rules. And, what‚Äôs more important, how to not fall into a trap with them.\nStrange result: null vs 0 Let‚Äôs compare¬†null¬†with a zero:\nalert( null \u0026gt; 0 ); // (1) false alert( null == 0 ); // (2) false alert( null \u0026gt;= 0 ); // (3) true Mathematically, that‚Äôs strange. The last result states that ‚Äúnull¬†is greater than or equal to zero‚Äù, so in one of the comparisons above it must be¬†true, but they are both false.\nThe reason is that an equality check¬†==¬†and comparisons¬†\u0026gt; \u0026lt; \u0026gt;= \u0026lt;=¬†work differently. Comparisons convert¬†null¬†to a number, treating it as¬†0. That‚Äôs why (3)¬†null \u0026gt;= 0¬†is true and (1)¬†null \u0026gt; 0¬†is false.\nOn the other hand, the equality check¬†==¬†for¬†undefined¬†and¬†null¬†is defined such that, without any conversions, they equal each other and don‚Äôt equal anything else. That‚Äôs why (2)¬†null == 0¬†is false.\nAn incomparable undefined The value¬†undefined¬†shouldn‚Äôt be compared to other values:\nalert( undefined \u0026gt; 0 ); // false (1) alert( undefined \u0026lt; 0 ); // false (2) alert( undefined == 0 ); // false (3) Why does it dislike zero so much? Always false!\nWe get these results because:\nComparisons¬†(1)¬†and¬†(2)¬†return¬†false¬†because¬†undefined¬†gets converted to¬†NaN¬†and¬†NaN¬†is a special numeric value which returns¬†false¬†for all comparisons. The equality check¬†(3)¬†returns¬†false¬†because¬†undefined¬†only equals¬†null,¬†undefined, and no other value. Avoid Problems Why did we go over these examples? Should we remember these peculiarities all the time? Well, not really. Actually, these tricky things will gradually become familiar over time, but there‚Äôs a solid way to avoid problems with them:\nTreat any comparison with¬†undefined/null¬†except the strict equality¬†===¬†with exceptional care. Don‚Äôt use comparisons¬†\u0026gt;= \u0026gt; \u0026lt; \u0026lt;=¬†with a variable which may be¬†null/undefined, unless you‚Äôre really sure of what you‚Äôre doing. If a variable can have these values, check for them separately. Conditional branching: if, \u0026lsquo;?\u0026rsquo; Sometimes, we need to perform different actions based on different conditions.\nTo do that, we can use the¬†if¬†statement and the conditional operator¬†?, that‚Äôs also called a ‚Äúquestion mark‚Äù operator.\nThe ‚Äúif‚Äù statement The¬†if(...)¬†statement evaluates a condition in parentheses and, if the result is¬†true, executes a block of code.\nFor example:\nlet year = prompt(\u0026#34;In which year was ECMAScript-2015 specification published?\u0026#34;,\u0026#34;\u0026#34;); if (year == 2015) alert(\u0026#34;You are right!\u0026#34;); In the example above, the condition is a simple equality check (year == 2015), but it can be much more complex.\nIf we want to execute more than one statement, we have to wrap our code block inside curly braces:\nif (year == 2015) { alert( \u0026#34;That\u0026#39;s correct!\u0026#34; ); alert( \u0026#34;You\u0026#39;re so smart!\u0026#34; ); } We recommend wrapping your code block with curly braces¬†{}¬†every time you use an¬†if¬†statement, even if there is only one statement to execute. Doing so improves readability\nBoolean conversion The¬†if (‚Ä¶)¬†statement evaluates the expression in its parentheses and converts the result to a boolean.\nLet‚Äôs recall the conversion rules from the chapter¬†Type Conversions:\nA number¬†0, an empty string¬†\u0026quot;\u0026quot;,¬†null,¬†undefined, and¬†NaN¬†all become¬†false. Because of that they are called ‚Äúfalsy‚Äù values. Other values become¬†true, so they are called ‚Äútruthy‚Äù. So, the code under this condition would never execute:\nif (0) { // 0 is falsy ... } ‚Ä¶and inside this condition ‚Äì it always will:\nif (1) { // 1 is truthy ... } We can also pass a pre-evaluated boolean value to¬†if, like this:\nlet cond = (year == 2015); // equality evaluates to true or false if (cond) { ... } The ‚Äúelse‚Äù clause The if statement may contain an optional else block. It executes when the condition is falsy.\nFor example:\nlet year = prompt(\u0026#39;In which year was the ECMAScript-2015 specification published?\u0026#39;, \u0026#39;\u0026#39;); if (year == 2015) { alert( \u0026#39;You guessed it right!\u0026#39; ); } else { alert( \u0026#39;How can you be so wrong?\u0026#39; ); // any value except 2015 } Several conditions: ‚Äúelse if‚Äù Sometimes, we‚Äôd like to test several variants of a condition. The else if clause lets us do that.\nFor example:\nlet year = prompt(\u0026#39;In which year was the ECMAScript-2015 specification published?\u0026#39;, \u0026#39;\u0026#39;); if (year \u0026lt; 2015) { alert( \u0026#39;Too early...\u0026#39; ); } else if (year \u0026gt; 2015) { alert( \u0026#39;Too late\u0026#39; ); } else { alert( \u0026#39;Exactly!\u0026#39; ); } In the code above, JavaScript first checks¬†year \u0026lt; 2015. If that is falsy, it goes to the next condition¬†year \u0026gt; 2015. If that is also falsy, it shows the last¬†alert.\nThere can be more¬†else if¬†blocks. The final¬†else¬†is optional.\nConditional operator ‚Äò?‚Äô Sometimes, we need to assign a variable depending on a condition.\nFor instance:\nlet accessAllowed; let age = prompt(\u0026#39;How old are you?\u0026#39;, \u0026#39;\u0026#39;); if (age \u0026gt; 18) { accessAllowed = true; } else { accessAllowed = false; } alert(accessAllowed); The so-called ‚Äúconditional‚Äù or ‚Äúquestion mark‚Äù operator lets us do that in a shorter and simpler way.\nThe operator is represented by a question mark ?. Sometimes it‚Äôs called ‚Äúternary‚Äù, because the operator has three operands. It is actually the one and only operator in JavaScript which has that many.\nThe syntax is:\nlet result = condition ? value1 : value2; The¬†condition¬†is evaluated: if it‚Äôs truthy then¬†value1¬†is returned, otherwise ‚Äì¬†value2.\nFor example:\nlet accessAllowed = (age \u0026gt; 18) ? true : false; Technically, we can omit the parentheses around¬†age \u0026gt; 18. The question mark operator has a low precedence, so it executes after the comparison¬†\u0026gt;.\nThis example will do the same thing as the previous one:\n// the comparison operator \u0026#34;age \u0026gt; 18\u0026#34; executes first anyway // (no need to wrap it into parentheses) let accessAllowed = age \u0026gt; 18 ? true : false; But parentheses make the code more readable, so we recommend using them.\nPlease note: In the example above, you can avoid using the question mark operator because the comparison itself returns¬†true/false:\n// the same let accessAllowed = age \u0026gt; 18; Multiple ‚Äò?‚Äô A sequence of question mark operators¬†?¬†can return a value that depends on more than one condition.\nFor instance:\nlet age = prompt(\u0026#34;age?\u0026#34;, 18); let message = age \u0026lt; 3 ? \u0026#34;Hi, baby!\u0026#34; : age \u0026lt; 18 ? \u0026#34;Hello!\u0026#34; : age \u0026lt; 100 ? \u0026#34;Greetings!\u0026#34; : \u0026#34;What an unusual age!\u0026#34;; alert(message); It may be difficult at first to grasp what‚Äôs going on. But after a closer look, we can see that it‚Äôs just an ordinary sequence of tests:\nThe first question mark checks whether¬†age \u0026lt; 3. If true ‚Äì it returns¬†'Hi, baby!'. Otherwise, it continues to the expression after the colon ‚Äú:‚Äù, checking¬†age \u0026lt; 18. If that‚Äôs true ‚Äì it returns¬†'Hello!'. Otherwise, it continues to the expression after the next colon ‚Äú:‚Äù, checking¬†age \u0026lt; 100. If that‚Äôs true ‚Äì it returns¬†'Greetings!'. Otherwise, it continues to the expression after the last colon ‚Äú:‚Äù, returning¬†'What an unusual age!'. Here‚Äôs how this looks using¬†if..else:\nif (age \u0026lt; 3) { message = \u0026#39;Hi, baby!\u0026#39;; } else if (age \u0026lt; 18) { message = \u0026#39;Hello!\u0026#39;; } else if (age \u0026lt; 100) { message = \u0026#39;Greetings!\u0026#39;; } else { message = \u0026#39;What an unusual age!\u0026#39;; } Logical operators There are four logical operators in JavaScript:¬†||¬†(OR),¬†\u0026amp;\u0026amp;¬†(AND),¬†!¬†(NOT),¬†??¬†(Nullish Coalescing). Here we cover the first three, the¬†??¬†operator is in the next article.\nAlthough they are called ‚Äúlogical‚Äù, they can be applied to values of any type, not only boolean. Their result can also be of any type.\nLet‚Äôs see the details.\n|| (OR) The ‚ÄúOR‚Äù operator is represented with two vertical line symbols:\nresult = a || b; In classical programming, the logical OR is meant to manipulate boolean values only. If any of its arguments are¬†true, it returns¬†true, otherwise it returns¬†false.\nIn JavaScript, the operator is a little bit trickier and more powerful. But first, let‚Äôs see what happens with boolean values.\nThere are four possible logical combinations:\nconsole.log( true || true ); // true console.log( false || true ); // true console.log( true || false ); // true console.log( false || false ); // false As we can see, the result is always¬†true¬†except for the case when both operands are¬†false.\nIf an operand is not a boolean, it‚Äôs converted to a boolean for the evaluation.\nFor instance, the number¬†1¬†is treated as¬†true, the number¬†0¬†as¬†false:\nif (1 || 0) { // works just like if( true || false ) alert( \u0026#39;truthy!\u0026#39; ); } Most of the time, OR¬†||¬†is used in an¬†if¬†statement to test if¬†any¬†of the given conditions is¬†true.\nFor example:\nlet hour = 9; if (hour \u0026lt; 10 || hour \u0026gt; 18) { alert( \u0026#39;The office is closed.\u0026#39; ); } We can pass more conditions:\nlet hour = 12; let isWeekend = true; if (hour \u0026lt; 10 || hour \u0026gt; 18 || isWeekend) { alert( \u0026#39;The office is closed.\u0026#39; ); // it is the weekend } OR \u0026ldquo;||\u0026rdquo; finds the first truthy value The logic described above is somewhat classical. Now, let‚Äôs bring in the ‚Äúextra‚Äù features of JavaScript.\nThe extended algorithm works as follows.\nGiven multiple OR‚Äôed values:\nresult = value1 || value2 || value3; The OR || operator does the following:\nEvaluates operands from left to right. For each operand, converts it to boolean. If the result is true, stops and returns the original value of that operand. If all operands have been evaluated (i.e. all were false), returns the last operand. A value is returned in its original form, without the conversion.\nIn other words, a chain of OR || returns the first truthy value or the last one if no truthy value is found.\nFor instance:\nconsole.log(1 || 0); // 1 (1 is truthy) console.log(null || 1); // 1 (1 is the first truthy value) console.log(null || 0 || 1); // 1 (the first truthy value) console.log(undefined || null || 0); // 0 (all falsy, returns the last value) This leads to some interesting usage compared to a ‚Äúpure, classical, boolean-only OR‚Äù.\nGetting the first truthy value from a list of variables or expressions.\nFor instance, we have firstName, lastName and nickName variables, all optional (i.e. can be undefined or have falsy values).\nLet‚Äôs use OR || to choose the one that has the data and show it (or \u0026ldquo;Anonymous\u0026rdquo; if nothing set):\nlet firstName = \u0026#34;\u0026#34;; let lastName = \u0026#34;\u0026#34;; let nickName = \u0026#34;SuperCoder\u0026#34;; console.log( firstName || lastName || nickName || \u0026#34;Anonymous\u0026#34;); // SuperCoder If all variables were falsy,¬†\u0026quot;Anonymous\u0026quot;¬†would show up.\nShort-circuit evaluation.\nAnother feature of OR¬†||¬†operator is the so-called ‚Äúshort-circuit‚Äù evaluation.\nIt means that¬†||¬†processes its arguments until the first truthy value is reached, and then the value is returned immediately, without even touching the other argument.\nThe importance of this feature becomes obvious if an operand isn‚Äôt just a value, but an expression with a side effect, such as a variable assignment or a function call.\nIn the example below, only the second message is printed:\ntrue || alert(\u0026#34;not printed\u0026#34;); false || alert(\u0026#34;printed\u0026#34;); In the first line, the OR¬†||¬†operator stops the evaluation immediately upon seeing¬†true, so the¬†alert¬†isn‚Äôt run.\nSometimes, people use this feature to execute commands only if the condition on the left part is falsy.\n\u0026amp;\u0026amp; (AND) The AND operator is represented with two ampersands¬†\u0026amp;\u0026amp;:\nresult = a \u0026amp;\u0026amp; b; In classical programming, AND returns¬†true¬†if both operands are truthy and¬†false¬†otherwise:\nconsole.log( true \u0026amp;\u0026amp; true ); // true console.log( false \u0026amp;\u0026amp; true ); // false console.log( true \u0026amp;\u0026amp; false ); // false console.log( false \u0026amp;\u0026amp; false ); // false An example with¬†if:\nlet hour = 12; let minute = 30; if (hour == 12 \u0026amp;\u0026amp; minute == 30) { alert( \u0026#39;The time is 12:30\u0026#39; ); } Just as with OR, any value is allowed as an operand of AND:\nif (1 \u0026amp;\u0026amp; 0) { // evaluated as true \u0026amp;\u0026amp; false alert( \u0026#34;won\u0026#39;t work, because the result is falsy\u0026#34; ); } AND ‚Äú\u0026amp;\u0026amp;‚Äù finds the first falsy value Given multiple AND‚Äôed values:\nresult = value1 \u0026amp;\u0026amp; value2 \u0026amp;\u0026amp; value3; The AND¬†\u0026amp;\u0026amp;¬†operator does the following:\nEvaluates operands from left to right. For each operand, converts it to a boolean. If the result is¬†false, stops and returns the original value of that operand. If all operands have been evaluated (i.e. all were truthy), returns the last operand. In other words, AND returns the first falsy value or the last value if none were found.\nThe rules above are similar to OR. The difference is that AND returns the first¬†falsy¬†value while OR returns the first¬†truthy¬†one.\nExamples:\n// if the first operand is truthy, // AND returns the second operand: alert( 1 \u0026amp;\u0026amp; 0 ); // 0 alert( 1 \u0026amp;\u0026amp; 5 ); // 5 // if the first operand is falsy, // AND returns it. The second operand is ignored alert( null \u0026amp;\u0026amp; 5 ); // null alert( 0 \u0026amp;\u0026amp; \u0026#34;no matter what\u0026#34; ); // 0 We can also pass several values in a row. See how the first falsy one is returned:\nalert( 1 \u0026amp;\u0026amp; 2 \u0026amp;\u0026amp; null \u0026amp;\u0026amp; 3 ); // null When all values are truthy, the last value is returned:\nalert( 1 \u0026amp;\u0026amp; 2 \u0026amp;\u0026amp; 3 ); // 3, the last one Precedence of AND \u0026amp;\u0026amp; is higher than OR || The precedence of AND \u0026amp;\u0026amp; operator is higher than OR ||.\nSo the code a \u0026amp;\u0026amp; b || c \u0026amp;\u0026amp; d is essentially the same as if the \u0026amp;\u0026amp; expressions were in parentheses: (a \u0026amp;\u0026amp; b) || (c \u0026amp;\u0026amp; d).\nDon‚Äôt replace¬†if¬†with¬†||¬†or¬†\u0026amp;\u0026amp;\nSometimes, people use the AND¬†\u0026amp;\u0026amp;¬†operator as a ‚Äúshorter way to write¬†if‚Äù.\nFor instance:\nlet x = 1; (x \u0026gt; 0) \u0026amp;\u0026amp; alert( \u0026#39;Greater than zero!\u0026#39; ); The action in the right part of¬†\u0026amp;\u0026amp;¬†would execute only if the evaluation reaches it. That is, only if¬†(x \u0026gt; 0)¬†is true.\nSo we basically have an analogue for:\nlet x = 1; if (x \u0026gt; 0) alert( \u0026#39;Greater than zero!\u0026#39; ); Although, the variant with¬†\u0026amp;\u0026amp;¬†appears shorter,¬†if¬†is more obvious and tends to be a little bit more readable. So we recommend using every construct for its purpose: use¬†if¬†if we want¬†if¬†and use¬†\u0026amp;\u0026amp;¬†if we want AND.\n! (NOT) The boolean NOT operator is represented with an exclamation sign !.\nThe syntax is pretty simple:\nresult = !value; The operator accepts a single argument and does the following:\nConverts the operand to boolean type: true/false. Returns the inverse value.\nFor instance:\nalert( !true ); // false alert( !0 ); // true A double NOT¬†!!¬†is sometimes used for converting a value to boolean type:\nalert( !!\u0026#34;non-empty string\u0026#34; ); // true alert( !!null ); // false That is, the first NOT converts the value to boolean and returns the inverse, and the second NOT inverses it again. In the end, we have a plain value-to-boolean conversion.\nThere‚Äôs a little more verbose way to do the same thing ‚Äì a built-in¬†Boolean¬†function:\nalert( Boolean(\u0026#34;non-empty string\u0026#34;) ); // true alert( Boolean(null) ); // false The precedence of NOT¬†!¬†is the highest of all logical operators, so it always executes first, before¬†\u0026amp;\u0026amp;¬†or¬†||.\nNullish coalescing operator \u0026lsquo;??\u0026rsquo; The nullish coalescing operator is written as two question marks¬†??.\nAs it treats¬†null¬†and¬†undefined¬†similarly, we‚Äôll use a special term here, in this article. For brevity, we‚Äôll say that a value is ‚Äúdefined‚Äù when it‚Äôs neither¬†null¬†nor¬†undefined.\nThe result of¬†a ?? b¬†is:\nif¬†a¬†is defined, then¬†a, if¬†a¬†isn‚Äôt defined, then¬†b. In other words,¬†??¬†returns the first argument if it‚Äôs not¬†null/undefined. Otherwise, the second one.\nThe nullish coalescing operator isn‚Äôt anything completely new. It‚Äôs just a nice syntax to get the first ‚Äúdefined‚Äù value of the two.\nWe can rewrite¬†result = a ?? b¬†using the operators that we already know, like this:\nresult = (a !== null \u0026amp;\u0026amp; a !== undefined) ? a : b; Now it should be absolutely clear what ?? does. Let‚Äôs see where it helps.\nThe common use case for ?? is to provide a default value.\nFor example, here we show user if its value isn‚Äôt null/undefined, otherwise Anonymous:\nlet user; alert(user ?? \u0026#34;Anonymous\u0026#34;); // Anonymous (user is undefined) Here‚Äôs the example with¬†user¬†assigned to a name:\nlet user = \u0026#34;John\u0026#34;; alert(user ?? \u0026#34;Anonymous\u0026#34;); // John (user is not null/undefined) We can also use a sequence of¬†??¬†to select the first value from a list that isn‚Äôt¬†null/undefined.\nLet‚Äôs say we have a user‚Äôs data in variables¬†firstName,¬†lastName¬†or¬†nickName. All of them may be not defined, if the user decided not to fill in the corresponding values.\nWe‚Äôd like to display the user name using one of these variables, or show ‚ÄúAnonymous‚Äù if all of them are¬†null/undefined.\nLet‚Äôs use the¬†??¬†operator for that:\nlet firstName = null; let lastName = null; let nickName = \u0026#34;Supercoder\u0026#34;; // shows the first defined value: alert(firstName ?? lastName ?? nickName ?? \u0026#34;Anonymous\u0026#34;); // Supercoder Loops: while and for The ‚Äúwhile‚Äù loop The¬†while¬†loop has the following syntax:\nwhile (condition) { // code // so-called \u0026#34;loop body\u0026#34; } While the condition is truthy, the code from the loop body is executed.\nFor instance, the loop below outputs i while i \u0026lt; 3:\nlet i = 0; while (i \u0026lt; 3) { // shows 0, then 1, then 2 alert( i ); i++; } A single execution of the loop body is called¬†an iteration. The loop in the example above makes three iterations.\nIf¬†i++¬†was missing from the example above, the loop would repeat (in theory) forever. In practice, the browser provides ways to stop such loops, and in server-side JavaScript, we can kill the process.\nAny expression or variable can be a loop condition, not just comparisons: the condition is evaluated and converted to a boolean by¬†while.\nFor instance, a shorter way to write¬†while (i != 0)¬†is¬†while (i):\nlet i = 3; while (i) { // when i becomes 0, the condition becomes falsy, and the loop stops alert( i ); i--; } Curly braces are not required for a single-line body\nIf the loop body has a single statement, we can omit the curly braces¬†{‚Ä¶}:\nlet i = 3; while (i) alert(i--); The ‚Äúdo‚Ä¶while‚Äù loop The condition check can be moved below the loop body using the do..while syntax:\ndo { // loop body } while (condition); The loop will first execute the body, then check the condition, and, while it‚Äôs truthy, execute it again and again.\nlet i = 0; do { alert( i ); i++; } while (i \u0026lt; 3); This form of syntax should only be used when you want the body of the loop to execute¬†at least once¬†regardless of the condition being truthy. Usually, the other form is preferred:¬†while(‚Ä¶) {‚Ä¶}.\nThe ‚Äúfor‚Äù loop The for loop is more complex, but it‚Äôs also the most commonly used loop.\nIt looks like this:\nfor (begin; condition; step) { // ... loop body ... } Let‚Äôs learn the meaning of these parts by example. The loop below runs alert(i) for i from 0 up to (but not including) 3:\nfor (let i = 0; i \u0026lt; 3; i++) { // shows 0, then 1, then 2 alert(i); } Let‚Äôs examine the¬†for¬†statement part-by-part:\npart begin let i = 0 executes once upon entering the loop condition i\u0026lt; 3 Checked before every loop iteration. If false, the loop stops body alert(i) Run again and again while the condition is truthy step i++ Executes after the body on each iteration. The general loop algorithm works like this: Run begin ‚Üí (if condition ‚Üí run body and run step) ‚Üí (if condition ‚Üí run body and run step) ‚Üí (if condition ‚Üí run body and run step) ‚Üí ... That is,¬†begin¬†executes once, and then it iterates: after each¬†condition¬†test,¬†body¬†and¬†step¬†are executed.\nIf you are new to loops, it could help to go back to the example and reproduce how it runs step-by-step on a piece of paper.\nHere‚Äôs exactly what happens in our case:\n// for (let i = 0; i \u0026lt; 3; i++) alert(i) // run begin let i = 0 // if condition ‚Üí run body and run step if (i \u0026lt; 3) { alert(i); i++ } // if condition ‚Üí run body and run step if (i \u0026lt; 3) { alert(i); i++ } // if condition ‚Üí run body and run step if (i \u0026lt; 3) { alert(i); i++ } // ...finish, because now i == 3 Breaking the loop Normally, a loop exits when its condition becomes falsy.\nBut we can force the exit at any time using the special¬†break¬†directive.\nFor example, the loop below asks the user for a series of numbers, ‚Äúbreaking‚Äù when no number is entered:\nlet sum = 0; while (true) { let value = +prompt(\u0026#34;Enter a number\u0026#34;, \u0026#39;\u0026#39;); if (!value) break; // (*) sum += value; } alert( \u0026#39;Sum: \u0026#39; + sum ); The¬†break¬†directive is activated at the line¬†(*)¬†if the user enters an empty line or cancels the input. It stops the loop immediately, passing control to the first line after the loop. Namely,¬†alert.\nThe combination ‚Äúinfinite loop +¬†break¬†as needed‚Äù is great for situations when a loop‚Äôs condition must be checked not in the beginning or end of the loop, but in the middle or even in several places of its body.\nContinue to the next iteration The¬†continue¬†directive is a ‚Äúlighter version‚Äù of¬†break. It doesn‚Äôt stop the whole loop. Instead, it stops the current iteration and forces the loop to start a new one (if the condition allows).\nWe can use it if we‚Äôre done with the current iteration and would like to move on to the next one.\nThe loop below uses¬†continue¬†to output only odd values:\nfor (let i = 0; i \u0026lt; 10; i++) { // if true, skip the remaining part of the body if (i % 2 == 0) continue; alert(i); // 1, then 3, 5, 7, 9 } For even values of¬†i, the¬†continue¬†directive stops executing the body and passes control to the next iteration of¬†for¬†(with the next number). So the¬†alert¬†is only called for odd values.\nNo¬†break/continue¬†to the right side of ‚Äò?‚Äô\nPlease note that syntax constructs that are not expressions cannot be used with the ternary operator¬†?. In particular, directives such as¬†break/continue¬†aren‚Äôt allowed there.\nFor example, if we take this code:\nif (i \u0026gt; 5) { alert(i); } else { continue; } ‚Ä¶and rewrite it using a question mark:\n(i \u0026gt; 5) ? alert(i) : continue; // continue isn\u0026#39;t allowed here ‚Ä¶it stops working: there‚Äôs a syntax error.\nThis is just another reason not to use the question mark operator¬†?¬†instead of¬†if.\nLabels for break/continue Sometimes we need to break out from multiple nested loops at once.\nFor example, in the code below we loop over¬†i¬†and¬†j, prompting for the coordinates¬†(i, j)¬†from¬†(0,0)¬†to¬†(2,2):\nfor (let i = 0; i \u0026lt; 3; i++) { for (let j = 0; j \u0026lt; 3; j++) { let input = prompt(`Value at coords (${i},${j})`, \u0026#39;\u0026#39;); // what if we want to exit from here to Done (below)? } } alert(\u0026#39;Done!\u0026#39;); We need a way to stop the process if the user cancels the input.\nThe ordinary¬†break¬†after¬†input¬†would only break the inner loop. That‚Äôs not sufficient ‚Äì labels, come to the rescue!\nA¬†label¬†is an identifier with a colon before a loop:\nlabelName: for (...) { ... } The¬†break \u0026lt;labelName\u0026gt;¬†statement in the loop below breaks out to the label:\nouter: for (let i = 0; i \u0026lt; 3; i++) { for (let j = 0; j \u0026lt; 3; j++) { let input = prompt(`Value at coords (${i},${j})`, \u0026#39;\u0026#39;); // if an empty string or canceled, then break out of both loops if (!input) break outer; // (*) // do something with the value... } } alert(\u0026#39;Done!\u0026#39;); In the code above,¬†break outer¬†looks upwards for the label named¬†outer¬†and breaks out of that loop.\nSo the control goes straight from¬†(*)¬†to¬†alert('Done!').\nWe can also move the label onto a separate line:\nouter: for (let i = 0; i \u0026lt; 3; i++) { ... } The¬†continue¬†directive can also be used with a label. In this case, code execution jumps to the next iteration of the labeled loop.\nLabels do not allow to ‚Äújump‚Äù anywhere\nLabels do not allow us to jump into an arbitrary place in the code.\nFor example, it is impossible to do this:\nbreak label; // jump to the label below (doesn\u0026#39;t work) label: for (...) A¬†break¬†directive must be inside a code block. Technically, any labelled code block will do, e.g.:\nlabel: { // ... break label; // works // ... } ‚Ä¶Although, 99.9% of the time¬†break¬†is used inside loops, as we‚Äôve seen in the examples above.\nA¬†continue¬†is only possible from inside a loop.\nThe \u0026ldquo;switch\u0026rdquo; statement A¬†switch¬†statement can replace multiple¬†if¬†checks.\nIt gives a more descriptive way to compare a value with multiple variants.\nThe syntax The¬†switch¬†has one or more¬†case¬†blocks and an optional default.\nIt looks like this:\nswitch(x) { case \u0026#39;value1\u0026#39;: // if (x === \u0026#39;value1\u0026#39;) ... [break] case \u0026#39;value2\u0026#39;: // if (x === \u0026#39;value2\u0026#39;) ... [break] default: ... [break] } The value of¬†x¬†is checked for a strict equality to the value from the first¬†case¬†(that is,¬†value1) then to the second (value2) and so on. If the equality is found,¬†switch¬†starts to execute the code starting from the corresponding¬†case, until the nearest¬†break¬†(or until the end of¬†switch). If no case is matched then the¬†default¬†code is executed (if it exists). Type matters Let‚Äôs emphasize that the equality check is always strict. The values must be of the same type to match.\nFor example, let‚Äôs consider the code:\nlet arg = prompt(\u0026#34;Enter a value?\u0026#34;); switch (arg) { case \u0026#39;0\u0026#39;: case \u0026#39;1\u0026#39;: alert( \u0026#39;One or zero\u0026#39; ); break; case \u0026#39;2\u0026#39;: alert( \u0026#39;Two\u0026#39; ); break; case 3: alert( \u0026#39;Never executes!\u0026#39; ); break; default: alert( \u0026#39;An unknown value\u0026#39; ); } For¬†0,¬†1, the first¬†alert¬†runs. For¬†2¬†the second¬†alert¬†runs. But for¬†3, the result of the¬†prompt¬†is a string¬†\u0026quot;3\u0026quot;, which is not strictly equal¬†===¬†to the number¬†3. So we‚Äôve got a dead code in¬†case 3! The¬†default¬†variant will execute. Functions Quite often we need to perform a similar action in many places of the script.\nFor example, we need to show a nice-looking message when a visitor logs in, logs out and maybe somewhere else.\nFunctions are the main ‚Äúbuilding blocks‚Äù of the program. They allow the code to be called many times without repetition.\nWe‚Äôve already seen examples of built-in functions, like alert(message), prompt(message, default) and confirm(question). But we can create functions of our own as well.\nFunction Declaration To create a function we can use a function declaration.\nIt looks like this:\nfunction showMessage() { alert( \u0026#39;Hello everyone!\u0026#39; ); } The¬†function¬†keyword goes first, then goes the¬†name of the function, then a list of¬†parameters¬†between the parentheses (comma-separated, empty in the example above, we‚Äôll see examples later) and finally the code of the function, also named ‚Äúthe function body‚Äù, between curly braces.\nfunction name(parameter1, parameter2, ... parameterN) { // body } Our new function can be called by its name:¬†showMessage().\nThe call showMessage() executes the code of the function. Here we will see the message two times.\nThis example clearly demonstrates one of the main purposes of functions: to avoid code duplication.\nIf we ever need to change the message or the way it is shown, it‚Äôs enough to modify the code in one place: the function which outputs it.\nLocal variables A variable declared inside a function is only visible inside that function.\nFor example:\nfunction showMessage() { let message = \u0026#34;Hello, I\u0026#39;m JavaScript!\u0026#34;; // local variable alert( message ); } showMessage(); // Hello, I\u0026#39;m JavaScript! alert( message ); // \u0026lt;-- Error! The variable is local to the function Outer Variables A function can access an outer variable as well, for example:\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { let message = \u0026#39;Hello, \u0026#39; + userName; alert(message); } showMessage(); // Hello, John The function has full access to the outer variable. It can modify it as well.\nFor instance:\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { userName = \u0026#34;Bob\u0026#34;; // (1) changed the outer variable let message = \u0026#39;Hello, \u0026#39; + userName; alert(message); } alert( userName ); // John before the function call showMessage(); alert( userName ); // Bob, the value was modified by the function The outer variable is only used if there‚Äôs no local one.\nIf a same-named variable is declared inside the function then it¬†shadows¬†the outer one. For instance, in the code below the function uses the local¬†userName. The outer one is ignored:\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { let userName = \u0026#34;Bob\u0026#34;; // declare a local variable let message = \u0026#39;Hello, \u0026#39; + userName; // Bob alert(message); } // the function will create and use its own userName showMessage(); alert( userName ); // John, unchanged, the function did not access the outer variable Parameters We can pass arbitrary data to functions using parameters.\nIn the example below, the function has two parameters:¬†from¬†and¬†text.\nfunction showMessage(from, text) { // parameters: from, text alert(from + \u0026#39;: \u0026#39; + text); } showMessage(\u0026#39;Ann\u0026#39;, \u0026#39;Hello!\u0026#39;); // Ann: Hello! (1) showMessage(\u0026#39;Ann\u0026#39;, \u0026#34;What\u0026#39;s up?\u0026#34;); // Ann: What\u0026#39;s up? (2) When the function is called in lines (1) and (2), the given values are copied to local variables from and text. Then the function uses them.\nHere‚Äôs one more example: we have a variable from and pass it to the function. Please note: the function changes from, but the change is not seen outside, because a function always gets a copy of the value:\nfunction showMessage(from, text) { from = \u0026#39;*\u0026#39; + from + \u0026#39;*\u0026#39;; // make \u0026#34;from\u0026#34; look nicer alert( from + \u0026#39;: \u0026#39; + text ); } let from = \u0026#34;Ann\u0026#34;; showMessage(from, \u0026#34;Hello\u0026#34;); // *Ann*: Hello // the value of \u0026#34;from\u0026#34; is the same, the function modified a local copy alert( from ); // Ann When a value is passed as a function parameter, it‚Äôs also called an argument.\nIn other words, to put these terms straight:\nA parameter is the variable listed inside the parentheses in the function declaration (it‚Äôs a declaration time term). An argument is the value that is passed to the function when it is called (it‚Äôs a call time term). We declare functions listing their parameters, then call them passing arguments.\nIn the example above, one might say: ‚Äúthe function showMessage is declared with two parameters, then called with two arguments: from and \u0026ldquo;Hello\u0026rdquo;‚Äù.\nDefault values If a function is called, but an argument is not provided, then the corresponding value becomes undefined.\nFor instance, the aforementioned function showMessage(from, text) can be called with a single argument:\nfunction showMessage(from, text = \u0026#34;no text given\u0026#34;) { alert( from + \u0026#34;: \u0026#34; + text ); } showMessage(\u0026#34;Ann\u0026#34;); // Ann: no text given Default parameters in old JavaScript code Several years ago, JavaScript didn‚Äôt support the syntax for default parameters. So people used other ways to specify them.\nNowadays, we can come across them in old scripts.\nFor example, an explicit check for undefined:\nfunction showMessage(from, text) { if (text === undefined) { text = \u0026#39;no text given\u0026#39;; } alert( from + \u0026#34;: \u0026#34; + text ); } ‚Ä¶Or using the¬†||¬†operator:\nfunction showMessage(from, text) { // If the value of text is falsy, assign the default value // this assumes that text == \u0026#34;\u0026#34; is the same as no text at all text = text || \u0026#39;no text given\u0026#39;; ... } Alternative default parameters Sometimes it makes sense to assign default values for parameters at a later stage after the function declaration.\nWe can check if the parameter is passed during the function execution, by comparing it with¬†undefined:\nfunction showMessage(text) { // ... if (text === undefined) { // if the parameter is missing text = \u0026#39;empty message\u0026#39;; } alert(text); } showMessage(); // empty message Returning a value A function can return a value back into the calling code as the result.\nThe simplest example would be a function that sums two values:\nfunction sum(a, b) { return a + b; } let result = sum(1, 2); console.log( result ); // 3 A function with an empty¬†return¬†or without it returns¬†undefined\nIf a function does not return a value, it is the same as if it returns¬†undefined\nfunction doNothing() { /* empty */ } alert( doNothing() === undefined ); // true An empty¬†return¬†is also the same as¬†return undefined:\nfunction doNothing() { return; } alert( doNothing() === undefined ); // true One function ‚Äì one action\nA function should do exactly what is suggested by its name, no more.\nTwo independent actions usually deserve two functions, even if they are usually called together (in that case we can make a 3rd function that calls those two).\nA few examples of breaking this rule:\ngetAge¬†‚Äì would be bad if it shows an¬†alert¬†with the age (should only get). createForm¬†‚Äì would be bad if it modifies the document, adding a form to it (should only create it and return). checkPermission¬†‚Äì would be bad if it displays the¬†access granted/denied¬†message (should only perform the check and return the result). These examples assume common meanings of prefixes. You and your team are free to agree on other meanings, but usually they‚Äôre not much different. In any case, you should have a firm understanding of what a prefix means, what a prefixed function can and cannot do. All same-prefixed functions should obey the rules. And the team should share the knowledge.\nFunction expressions In JavaScript, a function is not a ‚Äúmagical language structure‚Äù, but a special kind of value.\nThe syntax that we used before is called a¬†Function Declaration:\nfunction sayHi() { alert( \u0026#34;Hello\u0026#34; ); } There is another syntax for creating a function that is called a Function Expression.\nIt allows us to create a new function in the middle of any expression.\nFor example:\nlet sayHi = function() { alert( \u0026#34;Hello\u0026#34; ); }; Here we can see a variable¬†sayHi¬†getting a value, the new function, created as¬†function() { alert(\u0026quot;Hello\u0026quot;); }.\nAs the function creation happens in the context of the assignment expression (to the right side of¬†=), this is a¬†Function Expression.\nPlease note, there‚Äôs no name after the¬†function¬†keyword. Omitting a name is allowed for Function Expressions.\nHere we immediately assign it to the variable, so the meaning of these code samples is the same: ‚Äúcreate a function and put it into the variable¬†sayHi‚Äù.\nIn more advanced situations, that we‚Äôll come across later, a function may be created and immediately called or scheduled for a later execution, not stored anywhere, thus remaining anonymous.\nFunction is a value Let‚Äôs reiterate: no matter how the function is created, a function is a value. Both examples above store a function in the¬†sayHi¬†variable.\nWe can even print out that value using¬†alert:\nfunction sayHi() { alert( \u0026#34;Hello\u0026#34; ); } alert( sayHi ); // shows the function code Please note that the last line does not run the function, because there are no parentheses after¬†sayHi. There are programming languages where any mention of a function name causes its execution, but JavaScript is not like that.\nIn JavaScript, a function is a value, so we can deal with it as a value. The code above shows its string representation, which is the source code.\nSurely, a function is a special value, in the sense that we can call it like¬†sayHi().\nBut it‚Äôs still a value. So we can work with it like with other kinds of values.\nWe can copy a function to another variable:\nfunction sayHi() { // (1) create alert( \u0026#34;Hello\u0026#34; ); } let func = sayHi; // (2) copy func(); // Hello // (3) run the copy (it works)! sayHi(); // Hello // this still works too (why wouldn\u0026#39;t it) Here‚Äôs what happens above in detail:\nThe Function Declaration¬†(1)¬†creates the function and puts it into the variable named¬†sayHi. Line¬†(2)¬†copies it into the variable¬†func. Please note again: there are no parentheses after¬†sayHi. If there were, then¬†func = sayHi()¬†would write¬†the result of the call¬†sayHi()¬†into¬†func, not¬†the function¬†sayHi¬†itself. Now the function can be called as both¬†sayHi()¬†and¬†func(). We could also have used a Function Expression to declare¬†sayHi, in the first line:\nlet sayHi = function() { // (1) create alert( \u0026#34;Hello\u0026#34; ); }; let func = sayHi; // ... Everything would work the same.\nWhy is there a semicolon at the end?\nYou might wonder, why do Function Expressions have a semicolon¬†;¬†at the end, but Function Declarations do not:\nfunction sayHi() { // ... } let sayHi = function() { // ... }; The answer is simple: a Function Expression is created here as function(‚Ä¶) {‚Ä¶} inside the assignment statement: let sayHi = ‚Ä¶;. The semicolon ; is recommended at the end of the statement, it‚Äôs not a part of the function syntax.\nThe semicolon would be there for a simpler assignment, such as let sayHi = 5;, and it‚Äôs also there for a function assignment.\nfunction callbacks Let‚Äôs look at more examples of passing functions as values and using function expressions.\nWe‚Äôll write a function¬†ask(question, yes, no)¬†with three parameters:\nquestion\nText of the question\nyes\nFunction to run if the answer is ‚ÄúYes‚Äù\nno\nFunction to run if the answer is ‚ÄúNo‚Äù\nThe function should ask the¬†question¬†and, depending on the user‚Äôs answer, call¬†yes()¬†or¬†no():\nfunction ask(question, yes, no) { if (confirm(question)) yes() else no(); } function showOk() { alert( \u0026#34;You agreed.\u0026#34; ); } function showCancel() { alert( \u0026#34;You canceled the execution.\u0026#34; ); } // usage: functions showOk, showCancel are passed as arguments to ask ask(\u0026#34;Do you agree?\u0026#34;, showOk, showCancel); In practice, such functions are quite useful. The major difference between a real-life¬†ask¬†and the example above is that real-life functions use more complex ways to interact with the user than a simple¬†confirm. In the browser, such functions usually draw a nice-looking question window. But that‚Äôs another story.\nThe arguments¬†showOk¬†and¬†showCancel¬†of¬†ask¬†are called¬†callback functions¬†or just¬†callbacks.\nThe idea is that we pass a function and expect it to be ‚Äúcalled back‚Äù later if necessary. In our case,¬†showOk¬†becomes the callback for ‚Äúyes‚Äù answer, and¬†showCancel¬†for ‚Äúno‚Äù answer.\nWe can use Function Expressions to write an equivalent, shorter function:\nfunction ask(question, yes, no) { if (confirm(question)) yes() else no(); } ask( \u0026#34;Do you agree?\u0026#34;, function() { alert(\u0026#34;You agreed.\u0026#34;); }, function() { alert(\u0026#34;You canceled the execution.\u0026#34;); } ); Here, functions are declared right inside the¬†ask(...)¬†call. They have no name, and so are called¬†anonymous. Such functions are not accessible outside of¬†ask¬†(because they are not assigned to variables), but that‚Äôs just what we want here.\nSuch code appears in our scripts very naturally, it‚Äôs in the spirit of JavaScript.\nA function is a value representing an ‚Äúaction‚Äù Regular values like strings or numbers represent the data.\nA function can be perceived as an action.\nWe can pass it between variables and run when we want.\nFunction Expression vs Function Declaration Let‚Äôs formulate the key differences between Function Declarations and Expressions.\nFirst, the syntax: how to differentiate between them in the code.\nFunction Declaration:¬†a function, declared as a separate statement, in the main code flow: // Function Declaration function sum(a, b) { return a + b; } Function Expression:¬†a function, created inside an expression or inside another syntax construct. Here, the function is created on the right side of the ‚Äúassignment expression‚Äù¬†=: // Function Expression let sum = function(a, b) { return a + b; }; The more subtle difference is¬†when¬†a function is created by the JavaScript engine.\nA Function Expression is created when the execution reaches it and is usable only from that moment. Once the execution flow passes to the right side of the assignment¬†let sum = function‚Ä¶¬†‚Äì here we go, the function is created and can be used (assigned, called, etc. ) from now on.\nFunction Declarations are different.\nA Function Declaration can be called earlier than it is defined. For example, a global Function Declaration is visible in the whole script, no matter where it is.\nThat‚Äôs due to internal algorithms. When JavaScript prepares to run the script, it first looks for global Function Declarations in it and creates the functions. We can think of it as an ‚Äúinitialization stage‚Äù.\nAnd after all Function Declarations are processed, the code is executed. So it has access to these functions.\nFor example, this works:\nsayHi(\u0026#34;John\u0026#34;); // Hello, John function sayHi(name) { alert( `Hello, ${name}` ); } The Function Declaration sayHi is created when JavaScript is preparing to start the script and is visible everywhere in it.\n‚Ä¶If it were a Function Expression, then it wouldn‚Äôt work\nsayHi(\u0026#34;John\u0026#34;); // error! let sayHi = function(name) { // (*) no magic any more alert( `Hello, ${name}` ); }; In strict mode, when a Function Declaration is within a code block, it‚Äôs visible everywhere inside that block. But not outside of it. When to choose Function Declaration versus Function Expression? As a rule of thumb, when we need to declare a function, the first thing to consider is Function Declaration syntax. It gives more freedom in how to organize our code, because we can call such functions before they are declared.\nThat‚Äôs also better for readability, as it‚Äôs easier to look up function f(‚Ä¶) {‚Ä¶} in the code than let f = function(‚Ä¶) {‚Ä¶};. Function Declarations are more ‚Äúeye-catching‚Äù.\n‚Ä¶But if a Function Declaration does not suit us for some reason, or we need a conditional declaration (we‚Äôve just seen an example), then Function Expression should be used.\nSummary Functions are values. They can be assigned, copied or declared in any place of the code. If the function is declared as a separate statement in the main code flow, that‚Äôs called a ‚ÄúFunction Declaration‚Äù. If the function is created as a part of an expression, it‚Äôs called a ‚ÄúFunction Expression‚Äù. Function Declarations are processed before the code block is executed. They are visible everywhere in the block. Function Expressions are created when the execution flow reaches them. In most cases when we need to declare a function, a Function Declaration is preferable, because it is visible prior to the declaration itself. That gives us more flexibility in code organization, and is usually more readable.\nSo we should use a Function Expression only when a Function Declaration is not fit for the task. We‚Äôve seen a couple of examples of that in this chapter, and will see more in the future.\nArrow functions, the basics There‚Äôs another very simple and concise syntax for creating functions, that‚Äôs often better than Function Expressions.\nIt‚Äôs called ‚Äúarrow functions‚Äù, because it looks like this:\nlet func = (arg1, arg2, ..., argN) =\u0026gt; expression; This creates a function¬†func¬†that accepts arguments¬†arg1..argN, then evaluates the¬†expression¬†on the right side with their use and returns its result.\nIn other words, it‚Äôs the shorter version of:\nlet func = function(arg1, arg2, ..., argN) { return expression; }; Let‚Äôs see a concrete example:\nlet sum = (a, b) =\u0026gt; a + b; /* This arrow function is a shorter form of: let sum = function(a, b) { return a + b; }; */ alert( sum(1, 2) ); // 3 As you can see,¬†(a, b) =\u0026gt; a + b¬†means a function that accepts two arguments named¬†a¬†and¬†b. Upon the execution, it evaluates the expression¬†a + b¬†and returns the result.\nIf we have only one argument, then parentheses around parameters can be omitted, making that even shorter. For example:\nlet double = n =\u0026gt; n * 2; // roughly the same as: let double = function(n) { return n * 2 } alert( double(3) ); // 6 If there are no arguments, parentheses are empty, but they must be present: let sayHi = () =\u0026gt; alert(\u0026#34;Hello!\u0026#34;); sayHi(); Arrow functions can be used in the same way as Function Expressions.\nFor instance, to dynamically create a function:\nlet age = prompt(\u0026#34;What is your age?\u0026#34;, 18); let welcome = (age \u0026lt; 18) ? () =\u0026gt; alert(\u0026#39;Hello!\u0026#39;) : () =\u0026gt; alert(\u0026#34;Greetings!\u0026#34;); welcome(); Arrow functions may appear unfamiliar and not very readable at first, but that quickly changes as the eyes get used to the structure.\nThey are very convenient for simple one-line actions, when we‚Äôre just too lazy to write many words.\nMultiline arrow functions The arrow functions that we‚Äôve seen so far were very simple. They took arguments from the left of =\u0026gt;, evaluated and returned the right-side expression with them.\nSometimes we need a more complex function, with multiple expressions and statements. In that case, we can enclose them in curly braces. The major difference is that curly braces require a return within them to return a value (just like a regular function does).\nLike this:\nlet sum = (a, b) =\u0026gt; { // the curly brace opens a multiline function let result = a + b; return result; // if we use curly braces, then we need an explicit \u0026#34;return\u0026#34; }; alert( sum(1, 2) ); // 3 More to come Here we praised arrow functions for brevity. But that‚Äôs not all!\nArrow functions have other interesting features.\nTo study them in-depth, we first need to get to know some other aspects of JavaScript, so we‚Äôll return to arrow functions later in the chapter Arrow functions revisited.\nFor now, we can already use arrow functions for one-line actions and callbacks.\nSummary Arrow functions are handy for simple actions, especially for one-liners. They come in two flavors:\nWithout curly braces:¬†(...args) =\u0026gt; expression¬†‚Äì the right side is an expression: the function evaluates it and returns the result. Parentheses can be omitted, if there‚Äôs only a single argument, e.g.¬†n =\u0026gt; n*2. With curly braces:¬†(...args) =\u0026gt; { body }¬†‚Äì brackets allow us to write multiple statements inside the function, but we need an explicit¬†return¬†to return something. ","permalink":"http://localhost:1313/posts/fundamentals-of-javascript/","summary":"\u003cp\u003e\u003cimg alt=\"JS Image\" loading=\"lazy\" src=\"/posts/assets/web/JS/js.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eJavaScript was originally created to bring static web pages to life, enabling them to respond dynamically to user interactions. Its code, known as scripts, is directly embedded within HTML documents and executed by the browser as soon as the page loads. Because these scripts are delivered and interpreted as plain text, they bypass the need for a separate compilation process‚Äîthis makes development swift and flexible.\u003c/p\u003e\n\u003cp\u003eThis interpretive nature is a key characteristic of JavaScript and distinguishes it from compiled languages like Java. Whereas Java requires a compile step to transform code into bytecode before execution, JavaScript‚Äôs immediate execution model facilitates rapid testing and iterative development. Over time, JavaScript has evolved from a simple tool for adding interactivity to a robust language capable of handling complex web applications, manipulating the Document Object Model (DOM), and even running on servers through environments like Node.js.\u003c/p\u003e","title":"Fundamentals of JavaScript"},{"content":"\nI recently uploaded a video showcasing my Arch Linux (btw) setup just for fun, and to my surprise, it went viral within the Linux community! Since then, I‚Äôve received numerous messages asking about the installation process. Although I wanted to make a detailed video tutorial, my laptop\u0026rsquo;s older specs make it difficult to handle both recording and installation simultaneously. So, I‚Äôve decided to write this article to guide you through the installation process using my dotfiles and the installation script from Ja.Kool.It. Below, you‚Äôll find a step-by-step guide to get started.\n1. Install ArchLinux With Minimal Configuration Make a Bootable USB First Download ArchLinux ISO from official site : Download Link Second Download for Your Operating System Ventoy Extract the Ventoy Folder and Write it on your USB. Copy ArchLinux ISO into USB. if you Don\u0026rsquo;t Know how to use ventoy read this article Boot From USB Restart Your Computer and Press the Boot Menu key according to your Computer. In Boot Menu Select Your USB It will open ventoy and show you all ISO file available in USB Select the ArchLinux ISO and Open in Normal Mode. Connect to Internet For wired internet you don\u0026rsquo;t need to do anyting For wireless Command Given Below $ iwctl [iwd]# From the [iwd]# prompt you will need figure out your device name. Then, assuming you know the SSID (service set identifier) of your wireless network, go ahead and connect like so:\n[iwd]# device list # You should see something like this: # # Devices # ------------------------------------------------------------- # Name Address Powered Adapter Mode # ------------------------------------------------------------- # wlan0 ... on ... ... [iwd]# station YOURDEVICE connect YOURSSID For a secured wireless network, you will be prompted for the WiFi password. Once you enter the correct password, you‚Äôll be off to the races!\nMaking Partition Ready for Archinstall for that first we will use the cfdisk to make partitions and then mfks for formatting that $ lsblk if will show your all partitions and there information\n$ cfdisk it show you all of your information about your drives\nYou have to make 3 partitions\nEFI boot Partition - Type Must be EFI System Swap Partition - Type Must be Swap Partition Root Partition - Type Must be Linux File System after Make Partitions write and exit the cfdisk and Run these commands and just change paths\n$ mkfs.ext4 /path/to/root/partition $ mfks.vfat -F 32 /path/to/efi/partition $ mkswap /path/to/swap/partition we will use the pre-mounted disk configuration for that run\n$ mkdir /mnt/archinstall $ mount /path/to/root/partition /mnt/archinstall $ mkdir /mnt/archinstall/boot $ mount /path/to/efi/partition/ /mnt/archinstall/boot $ swapon /path/to/swap/partition now we are done with partitioning the partitions\nUpdate System and Run ArchInstall $ pacman -Sy archinstall archlinux-keyring $ archinstall Actual Installation Start Here After running the archinstall command it will show you something like this.\nLocales : In locales select your keyboard layout, locale language, and endcoding Mirrors : In Mirrors select best mirror region according to your location Disk Configuration : -\u0026gt;Partitioning-\u0026gt;Pre-mounted Configuration-\u0026gt; Enter /mnt/archinstall Swap : Enable it if you made the swap partition Boot Loader : Select which boot loader do you need like grub, system-d-boot Unified kernel images : Enable if you want Hostname : Select your hostname what you want Root Password : Enter Your Root Password User account : make a account for normal user Profile : Select-\u0026gt;Type-\u0026gt;Minimal Audio : Select-\u0026gt;Pipewire Kernels : Select one or many according your need. if don\u0026rsquo;t know don\u0026rsquo;t touch it Network configuration : Select-\u0026gt;Use NetworkManager Additional packages : git vim Optional repositories : Enable additional repos if you want like multilib Timezone : Select timezone according to your location Automatic time sync (NTP) : Leave Enabled after that just press the install and wait for installation to be finished\nCongratulationsüéâ!! You have successfully installed the ArchLinux and now you can say that I use Arch btw\n2. Installing JaKooLit Arch-Hyprland Script. reboot your system and login with username and password and connect with internet and clone the repo and preform these operations.\ngit clone --depth=1 https://github.com/JaKooLit/Arch-Hyprland.git ~/Arch-Hyprland cd ~/Arch-Hyprland chmod +x install.sh ./install.sh select the option according the option given in image I have explained each one of them and those without comment means go with that are in image.\nAfter selecting all the options, I will start installing Hyprland and additional components. During the installation, you may be prompted to enter the password 2-3 times, so stay attentive. Once the installation is successful, it will show a prompt to press \u0026lsquo;Y\u0026rsquo; to reboot the system.\nYou have successfully installed Archlinux+Hyprland.\n3. My Dotfiles Configuration To set up your environment using these dotfiles, follow these steps:\nClone the Repository: git clone https://github.com/ahmad9059/dotfiles.git cd dotfiles Backup Existing Dotfiles: Before copying new configurations, it\u0026rsquo;s wise to back up your current dotfiles: mkdir -p ~/dotfiles_backup cp ~/.config ~/dotfiles_backup -r cp ~/.tmux.conf ~/dotfiles_backup cp ~/.zshrc ~/dotfiles_backup Copy New Configurations: Remember you must in dotfiles folder to run following commands cp -r .config ~/ cp .zshrc ~/ cp -r .themes ~/.themes cd .icons cp .icons.zip ~/ cd ~/ unzip .icons.zip rm .icons.zip After the installation, you can start using the configured applications. Open your GTK settings and set the widget theme to Andromeda-dark, the icon theme to Dracula, and the mouse cursor to Future-black Cursors.\nPackages¬†pacman: Install of these Packages using pacman\nsudo pacman -S foot alacritty lsd bat tmux neovim tldr obs-studio vlc yazi Packages¬†yay(Optional): Install of these Packages Using yay. Remember they are according to my preference like I have install vscode, telegram etc.\nyay -S thorium-browser-bin visual-studio-code-bin 64gram-desktop-bin apple-fonts fum Congratulations! You have successfully completed the installation.\n","permalink":"http://localhost:1313/posts/archlinux-installation-guide/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/posts/assets/archlinux/archlinux.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eI recently uploaded a video showcasing my Arch Linux (btw) setup just for fun, and to my surprise, it went viral within the Linux community! Since then, I‚Äôve received numerous messages asking about the installation process. Although I wanted to make a detailed video tutorial, my laptop\u0026rsquo;s older specs make it difficult to handle both recording and installation simultaneously. So, I‚Äôve decided to write this article to guide you through the installation process using my dotfiles and the installation script from Ja.Kool.It. Below, you‚Äôll find a step-by-step guide to get started.\u003c/p\u003e","title":"ArchLinux Installation Guide Using My Dotfiles"},{"content":"Tailwind CSS is a utility-first CSS framework designed to allow developers to build custom designs quickly. Instead of writing custom styles, Tailwind provides a collection of utility classes that you can use to style elements directly in the HTML.\n1. Installation and Setup How to install Tailwind using CDN For quick prototyping, you can include Tailwind directly in your project with a CDN. Add the following to your HTML \u0026lt;head\u0026gt; tag:\nAdd the Play CDN script tag to the¬†\u0026lt;head\u0026gt;¬†of your HTML file, and start using Tailwind‚Äôs utility classes to style your content.\n\u0026lt;script src=\u0026#34;https://unpkg.com/@tailwindcss/browser@4\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 2. Key Concepts in Tailwind CSS Utility-First Approach Tailwind uses small utility classes like text-center, bg-blue-500, and mt-4 to control elements\u0026rsquo; design directly in the HTML. This eliminates the need for writing custom CSS.\nResponsive Design Tailwind provides responsive utilities that help you design mobile-first and scale up for larger screens. You can add breakpoints to utilities using sm:, md:, lg:, xl:, etc.\n3. Core Concepts Colors Tailwind provides a set of predefined colors. You can apply them using classes like bg-blue-500 or text-red-600. Example:\n\u0026lt;div class=\u0026#34;bg-blue-500 text-white p-4\u0026#34;\u0026gt; This is a blue background with white text. \u0026lt;/div\u0026gt; Spacing (Padding and Margin) Tailwind has utilities for margin (m-*) and padding (p-*), where * is a scale value. Example:\n\u0026lt;div class=\u0026#34;m-4 p-6\u0026#34;\u0026gt; This element has 1rem margin and 1.5rem padding. \u0026lt;/div\u0026gt; Typography Tailwind provides utilities for font size (text-*), font weight (font-*), text color (text-*), and line height (leading-*). Example:\n\u0026lt;p class=\u0026#34;text-lg font-semibold leading-relaxed\u0026#34;\u0026gt; This is a large, semi-bold text with relaxed line height. \u0026lt;/p\u0026gt; 4. Layout Utilities Flexbox and Grid Tailwind CSS makes it easy to use Flexbox and CSS Grid with utilities like flex, grid, flex-col, justify-center, etc. Example of Flexbox:\n\u0026lt;div class=\u0026#34;flex justify-center items-center h-screen\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bg-gray-200 p-6\u0026#34;\u0026gt;Center me!\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Example of Grid:\n\u0026lt;div class=\u0026#34;grid grid-cols-3 gap-4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bg-red-500\u0026#34;\u0026gt;Item 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-blue-500\u0026#34;\u0026gt;Item 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-green-500\u0026#34;\u0026gt;Item 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Container The .container class centers your content and applies responsive width.\n\u0026lt;div class=\u0026#34;container mx-auto p-4\u0026#34;\u0026gt; Content here will be centered. \u0026lt;/div\u0026gt; 5. Customization You can customize Tailwind‚Äôs default theme using the tailwind.config.js file. For example, you can change the color palette, font sizes, spacing, etc.\nmodule.exports = { theme: { extend: { colors: { customBlue: \u0026#39;#123456\u0026#39;, }, }, }, } 7. Tailwind Directives @tailwind base;: Applies the base styles like resets. @tailwind components;: Injects component-level styles. @tailwind utilities;: Includes utility classes like padding, margin, colors, etc. @apply: Use this directive to group utilities into a single class (useful for custom components). .btn { @apply bg-blue-500 text-white p-2 rounded; } 8. Handling States with Pseudo-Classes Tailwind provides utilities for pseudo-classes such as hover:, focus:, active:, etc. Example:\n\u0026lt;button class=\u0026#34;bg-blue-500 hover:bg-blue-700 text-white p-2\u0026#34;\u0026gt; Hover me! \u0026lt;/button\u0026gt; 9. Transitions and Animations You can add smooth transitions and animations using Tailwind‚Äôs utility classes. Example:\n\u0026lt;div class=\u0026#34;transition ease-in-out duration-500 transform hover:scale-110\u0026#34;\u0026gt; Hover to scale up! \u0026lt;/div\u0026gt; 10. Plugins Tailwind allows you to extend its functionality with plugins, such as for forms, typography, or aspect ratio utilities. Example of installing a plugin:\nnpm install @tailwindcss/forms Then, add it to your tailwind.config.js:\nmodule.exports = { plugins: [ require(\u0026#39;@tailwindcss/forms\u0026#39;), ], } 11. Tailwind CSS with JIT Mode Just-in-time (JIT) mode generates only the classes you use, reducing file size and speeding up development. To enable JIT:\nmodule.exports = { mode: \u0026#39;jit\u0026#39;, content: [\u0026#39;./**/*.html\u0026#39;], } 12. Example Project \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Tailwind Example\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;https://cdn.tailwindcss.com\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;bg-gray-100 text-gray-900\u0026#34;\u0026gt; \u0026lt;header class=\u0026#34;bg-blue-500 text-white p-4\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;text-xl font-bold\u0026#34;\u0026gt;My Tailwind Page\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;main class=\u0026#34;p-6\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bg-white p-4 rounded shadow-md\u0026#34;\u0026gt;Card 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-white p-4 rounded shadow-md\u0026#34;\u0026gt;Card 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-white p-4 rounded shadow-md\u0026#34;\u0026gt;Card 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer class=\u0026#34;bg-gray-800 text-white p-4 text-center\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026amp;copy; 2025 My Tailwind Site\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","permalink":"http://localhost:1313/posts/tailwind-css/","summary":"\u003cp\u003eTailwind CSS is a utility-first CSS framework designed to allow developers to build custom designs quickly. Instead of writing custom styles, Tailwind provides a collection of utility classes that you can use to style elements directly in the HTML.\u003c/p\u003e\n\u003ch3 id=\"1-installation-and-setup\"\u003e1. Installation and Setup\u003c/h3\u003e\n\u003chr\u003e\n\u003ch4 id=\"how-to-install-tailwind-using-cdn\"\u003eHow to install Tailwind using CDN\u003c/h4\u003e\n\u003cp\u003eFor quick prototyping, you can include Tailwind directly in your project with a CDN. Add the following to your HTML \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e tag:\u003c/p\u003e","title":"Tailwind CSS - A Utility-First CSS Framework"},{"content":"CSS (Cascadia Styling Sheet) is the style sheet language that\u0026rsquo;s use to specify how a document written in HTML or XML should be presented and styled.\nCSS Boilerplate *{ margin: 0; padding: 0; box-sizing: border-box; } html,body{ width: 100%; height: 100%; } How to Link CSS with HTML Add the line after tittle tag in your html file\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;\nTips:\nWe use . dot to target class in CSS We use # hash to target id in CSS Also if you want to target tag we can simply target like h3{} Div: box means div and also when e have more than one element and also when there is rectangle shape, very high change there is div ;). Units in CSS px : It is use to define the measurement in pixels. 1px = 1/96th of inch % : It is used to define the measurement as a percentage that is relative to another value (maybe to their parent element). vh : It is relative to the height of the viewpoint(screen). 1vh = 1% or 1/100 of the height of the viewpoint vw : It is relative to the width of the viewpoint(screen). 1vm or 1/100 of the width of the width of viewpoint em : Relative to the font-size of the element 2em means 2 times the size of the current font rem : Relative to font-size of the root element like html tag. vmin : Relative to 1% of viewport\u0026rsquo;s* smaller dimension vmax : Relative to 1% of viewport\u0026rsquo;s* larger dimension Tip: There are mainly two type of fonts sans-serif and serif. The difference is the presence of decorative strokes, or serifs at the beginning and end of letters.\nExamples\nMargin VS Padding: padding: padding is the space inside an element, between its content and its border. margin: margin is the space outside an element, between the element\u0026rsquo;s border and other elements. border: A shorthand property for border-width, border-style, border-color ex: border: 3px solid gray border-radius: A shorthand property for the for border *_radius properties. We can also add radius on only one corner. like using these properties border-bottom-left-radius, border-bottom-right-radius,border-top-left-radius,border-top-right-radius Block VS Inline VS Inline-Block: Block Element:- Start on a new line (occupy full width) and take-up 100% of the width by default. You can set height, width, margin,padding. ex: \u0026lt;div\u0026gt;, \u0026lt;p\u0026gt;, \u0026lt;h1\u0026gt;.\nInline Element:- Do not start on a new line and only take-up as much width as their content/required. Height and width cannot be set/change. ex: \u0026lt;span\u0026gt;,\u0026lt;a\u0026gt;,\u0026lt;strong\u0026gt;.\nInline-Block Element:- Behave like inline element(do not start on a new line). Allow setting height,width like block elements. Useful for layouts purposes without breaking the flow.ex: \u0026lt;img\u0026gt;,button,\u0026lt;input\u0026gt;.\ndisplay: specifies how a certain HTML should be displayed. attributes: block,inline,inline-block Position Absolute VS Position Relative: Position Absolute:-\nAn element with position: absolute is removed from the normal document flow. It is positioned relative to its nearest positioned ancestor (an ancestor with position: relative, absolute, or fixed). If no such ancestor exists, it is positioned relative to the initial containing block (viewport). It does not occupy space in the normal layout, allowing it to move freely within its containing block. Position Relative:-\nAn element with position: relative remains in the normal document flow. It is positioned relative to its original position, using top, right, bottom, and left values. Space for the element is still reserved in the layout, so it affects other elements. position: specifies the type of positioning method used for an element absolute,relative,fixed. Background Properties: background: A shorthand property for all the background properties. It set by img(),color, linear-gradiant(to bottom right, red,yellow) etc. background-size: Specifies the size of the background images like cover,contain etc. background-repeat: Sets if/how a background image will be repeated. like no-repeat, round etc. background-position: specifies the position of a background image like center,right, left,top,bottom. Flexbox: Flexbox is a CSS layout model designed to help arrange elements in a responsive flexible way. It simplifies alignment, distribution, and spacing of items within a container-even when their size is unknown or dynamic. The Flexbox model is one-dimensional, meaning it handles either row or a column layout, Unlike CSS Grid which is two-dimensional(rows and columns). Key Concepts:\nFlex Container: The parent element that holds flex items. We can define a flex container by applying display: flex; to it. Flex items: The child elements of a flex container that will be laid out according to the flexbox rules. Main Axis and Cross Axis: Main Axis(x-axis): This axis along which flex items are placed. It depends on the flex-direction property (row by default). Cross Axis(y-axis): The perpendicular axis to the main axis. for example, if the flex-direction is row, the cross axis will be vertical. display: flex; Defines the element as flex container. flex-direction: Specifies the direction of the main axis like row, column,row-reverse,column-reverse. justify-content: Aligns items along the main axis like start,center,space-between,space-evenlly. align-items: Aligns items along the cross-axis stretch,center, flex-start,flex-end. flex-wrap: The¬†flex-wrap¬†property specifies whether the flexible items should wrap or not. like nowrap,wrap,wrap-reverse. flex-shrink: The¬†flex-shrink¬†property specifies how the item will shrink relative to the rest of the flexible items inside the same container. value like 0 or 1. Pseudo-Class and Pseudo-Elements:- Pseudo-elements and pseudo-classes are both powerful CSS features used to style elements based on specific states or to target parts of elements that aren\u0026rsquo;t directly available in the DOM, although they serve similar purposes, modifying or styling elements based on conditions, they function differently.\nPseudo-Classes: They targets an element in a specific state, and we use : for pseudo-classes. Syntax: selector:pesudo-class\nCommon Examples:\n:hover when an element is hovered. :focus when an element is focused. :th-child(n) targets the nth child of parent. :active when an element is being clicked. :visited for visited links Pseudo-Elements: Targets part of an element or inserts content before/after it. we use :: for elements. Syntax: selector::pesudo-element\nCommon Examples:\n::before insert content before an element. ::after inserts content after an element. ::first-letter styles the first-letter. ::first-line styles the first line. ::selection styles the selected text. Pseudo Classes Pseudo-Elements Interact with element states (e.g., :hover, :focus) Target parts of an element or add content (e.g., ::before, ::first-letter). Color Science and their Units 1. Color Name: CSS provides a set of predefined names that are recognized by all browsers ex: red,green,blue,black (total around 140 standard names) Example: background-color: red;\n2. Hexadecimal Notation(#RRGGBB): A more precise way to specify color in CSS is using hexadecimal(hx) notation. Hex values are written in the form #RRGGBB, where:\n#RR : represent the red component. #GG : represent the green component. #BB : represent the blue component. The values range is 00-FF, 00 means no color and FF means full intensity. Example: background-color: #11111b; 3. RGB Functional Notation: The rgb notation uses the same concept as hex but, specifies values in the decimal range from 0-255. The format is rgb(red,green,blue), where each color component is an integer between 0(no color) and 255(full intensity). Example: background-color: rgb(255,0.0);\n4. RGBA Functional Notation: rgba() extends the rgb() notation by adding an alpha channel for transparency. The format is rgba(red,green,blue,alpha), where alpha value is a decimal between 0(completely transparent) and 1(completely opoque). Example: background-color: rgba(255,0,0,0.5).\nGrid in CSS CSS Grid Layout is a powerful two-dimensional layout system designed to handle both rows and columns. It provides a way to create web layouts without relying on floats or positioning.\nCore Concepts of CSS Grid; Grid Container: The parent element where display: grid; is applied. Grid Items: The direct child elements of a grid container. Grid Lines: Horizontal and vertical lines that divide the gird into cells. Defining a Grid: Columns and Rows: Use grid-template-columns and grid-template-rows to define the grid. grid-template-columns: Specifies the size of the columns, and how many columns in a grid layout grid-template-rows: Specifies the size of the rows in a grid layout. Gap between Grid items: Use gap,row-gap,column-gap to create spacing. Alignment and Justification: align-items: Aligns items vertically inside the container. justify-items: Aligns items horizontally inside the container. align-content: Vertically aligns the whole grid inside the container (when total grid size is smaller than container). jusitfy-content: Horizontally aligns the whole grid inside the container (when total grid size is smaller than container). other useful: justify-self: Aligns the content for a specific grid item along the row axis align-self: Aligns the content for a specific grid item along the column axis grid-row-start: Specifies where to start the grid item grid-row-end: Specifies where to end the grid item grid-column-start: Specifies where to start the grid item grid-column-end: Specifies where to end the grid item grid-row: A shorthand property for the¬†grid-row-start¬†and the¬†grid-row-end¬†properties.ex: grid-row: 1 / 3; grid-column: A shorthand property for the¬†grid-column-start¬†and the¬†grid-column-end¬†properties.ex: grid-column: 1 / 4; CSS Grid vs Flexbox CSS Grid Flexbox Two-dimensional layout One-dimensional layout Suitable for complex layouts Ideal for simpler layouts (row/column) Explicit rows and columns No rows/columns concept Responsive Web Design 1.Understanding Units The first thing in responsiveness is to understand the Absolute(like px) and Relative(em,vh) Units and given are units in css.\nAbsolute Units These units are fixed and not affected by the size of other elements or the viewport.\npx (pixels): A single pixel on the screen. cm (centimeters): A physical centimeter. mm (millimeters): A physical millimeter. in (inches): A physical inch (1 inch = 2.54 cm). Relative Units These units are based on the size of other elements, the viewport, or the font size.\nRelative to the Font Size em: Relative to the font size of the parent element. rem (root em): Relative to the font size of the root element (\u0026lt;html\u0026gt;). ex: Relative to the height of the lowercase letter \u0026ldquo;x\u0026rdquo; in the current font. ch: Relative to the width of the character \u0026ldquo;0\u0026rdquo; (zero) in the current font. Relative to the Viewport vw (viewport width): 1% of the viewport‚Äôs width. vh (viewport height): 1% of the viewport‚Äôs height. vmin: 1% of the smaller dimension (width or height) of the viewport. vmax: 1% of the larger dimension (width or height) of the viewport. Relative to the Element‚Äôs Size % (percentage): Relative to the size of the parent element. 3. Flexbox Flexbox is a powerful tool for creating responsive layouts that adapt to different screen sizes and devices. Below are key takeaways for using Flexbox in responsive design:\nGeneral Concepts Flex Direction: Use flex-direction: row; for horizontal layouts. Switch to flex-direction: column; for vertical layouts on smaller screens using media queries. Flex Wrap: Use flex-wrap: wrap; to allow flex items to wrap onto new lines if necessary. Flex Property: Use the flex property with percentages (e.g., flex: 50%;) to adjust the width of items based on the screen size. 3. CSS Media Queries Media query is a CSS technique introduced in CSS3. It uses the¬†@mediarule to include a block of CSS properties only if a certain condition is true.\nExample If the browser window is 600px or smaller, the background color will be lightblue:\n@media (max-width: 600px) { body { background-color: lightblue; } Add a Breakpoint: Earlier in this tutorial we made a web page with rows and columns, and it was responsive, but it did not look good on a small screen.\nMedia queries can help with that. We can add a breakpoint where certain parts of the design will behave differently on each side of the breakpoint.\nAlways Design for Mobile First Mobile First means designing for mobile before designing for desktop or any other device (This will make the page display faster on smaller devices).\nThis means that we must make some changes in our CSS.\nInstead of changing styles when the width gets¬†smaller¬†than 768px, we should change the design when the width gets¬†larger¬†than 768px. This will make our design Mobile First:\nTypical Device Breakpoints There are tons of screens and devices with different heights and widths, so it is hard to create an exact breakpoint for each device. To keep things simple you could target five groups:\n/* Extra small devices (phones, 600px and down) */ @media only screen and (max-width: 600px) {...} /* Small devices (portrait tablets and large phones, 600px and up) */ @media only screen and (min-width: 600px) {...} /* Medium devices (landscape tablets, 768px and up) */ @media only screen and (min-width: 768px) {...} /* Large devices (laptops/desktops, 992px and up) */ @media only screen and (min-width: 992px) {...} /* Extra large devices (large laptops and desktops, 1200px and up) */ @media only screen and (min-width: 1200px) {...} CSS Animations CSS allows animation of HTML elements without using JavaScript!. An animation lets an element gradually change from one style to another. You can change as many CSS properties you want, as many times as you want. To use CSS animation, you must first specify some keyframes for the animation. Keyframes hold what styles the element will have at certain times. Animations is just transaction from initial to final position. The @keyframes Rule: When you specify CSS styles inside the @keyframes rule, the animation will gradually change from the current to the new style at certain times.\n@keyframes animation-name { to{ /* Intial properties */ left: 0%; rotate: 0; top: 0; } from{ /* final properties */ left: 75%; rotate: 360deg; border-radius: 50%; background-color: green; } } /* we can also give animation in percenatge so when the animation is 25% complete, 50% complete, and again when the animation is 100% complete: */ @keyframes animation-name { 0%{ left: 0%; rotate: 0; top: 0; } 25%{ left: 75%; top: 0; background-color: blue; } 50%{ left: 75%; top: 73%; rotate: 360deg; background-color: green; } 75%{ left: 0; top: 73%; background-color: aqua; } 100%{ left: 0; top: 0; } } CSS Animation Properties Property Description @keyframes Specifies the animation code animation A shorthand property for setting all the animation properties. animation:¬†example 5s linear 2s infinite alternate; animation-delay specifies a delay for start of an animation. like 1s,5s animation-direction Specifies whether an animation should be played forwards, backward or in alternate cycles.normal,reverse,alternate,alternate-reverse. animation-duration specifies how long time an animation should take to complete one cycle like. 2s,4s. animation-iteration-count Specifies the number of times an animation should be played. like 2,4, or infinite. animation-name Specifies the name of the @keyframes animation. animation-fill-mode Specifies a style for the element when animation is not playing or completed(before it starts, after it ends, or both).none,forwards,backwards,both. animation-timing-function Specifes the speed curve of the animation like ease,linear,ease-in,ease-out,ease-in-out,cubic-bezier(n,n,n,n) Animation-timing-function: ease¬†- Specifies an animation with a slow start, then fast, then end slowly (this is default) linear¬†- Specifies an animation with the same speed from start to end ease-in¬†- Specifies an animation with a slow start ease-out¬†- Specifies an animation with a slow end ease-in-out¬†- Specifies an animation with a slow start and end cubic-bezier(n,n,n,n)¬†- Lets you define your own values in a cubic-bezier function. ","permalink":"http://localhost:1313/posts/css/","summary":"\u003cp\u003eCSS (Cascadia Styling Sheet) is the style sheet language that\u0026rsquo;s use to specify how a document written in HTML or XML should be presented and styled.\u003c/p\u003e\n\u003ch2 id=\"css-boilerplate\"\u003eCSS Boilerplate\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003e*\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003emargin\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003epadding\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003ebox-sizing\u003c/span\u003e: \u003cspan style=\"color:#ff79c6\"\u003eborder-box\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003ehtml\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e,\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003ebody\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003ewidth\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e100\u003c/span\u003e\u003cspan style=\"color:#8be9fd\"\u003e%\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003eheight\u003c/span\u003e: \u003cspan style=\"color:#bd93f9\"\u003e100\u003c/span\u003e\u003cspan style=\"color:#8be9fd\"\u003e%\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"how-to-link-css-with-html\"\u003eHow to Link CSS with HTML\u003c/h2\u003e\n\u003cp\u003eAdd the line after tittle tag in your html file\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTips:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWe use \u003ccode\u003e.\u003c/code\u003e dot to target class in CSS\u003c/li\u003e\n\u003cli\u003eWe use \u003ccode\u003e#\u003c/code\u003e hash to target id in CSS\u003c/li\u003e\n\u003cli\u003eAlso if you want to target tag we can simply target like h3{}\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eDiv:\u003c/em\u003e box means div and also when e have more than one element and also when there is rectangle shape, very high change there is div ;).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"units-in-css\"\u003eUnits in CSS\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003epx :\u003c/strong\u003e It is use to define the measurement in pixels. \u003ccode\u003e1px = 1/96th of inch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e% :\u003c/strong\u003e It is used to define the measurement as a percentage that is relative to another value (maybe to their \u003ccode\u003eparent element\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evh :\u003c/strong\u003e It is relative to the height of the \u003ccode\u003eviewpoint(screen)\u003c/code\u003e. \u003ccode\u003e1vh = 1% or 1/100 of the height of the viewpoint\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evw :\u003c/strong\u003e It is relative to the width of the \u003ccode\u003eviewpoint(screen)\u003c/code\u003e. \u003ccode\u003e1vm or 1/100 of the width of the width of viewpoint\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eem :\u003c/strong\u003e Relative to the font-size of the element \u003ccode\u003e2em means 2 times the size of the current font\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003erem :\u003c/strong\u003e Relative to font-size of the root element like \u003ccode\u003ehtml tag\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evmin :\u003c/strong\u003e Relative to 1% of viewport\u0026rsquo;s* smaller dimension\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003evmax :\u003c/strong\u003e Relative to 1% of viewport\u0026rsquo;s* larger dimension\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cem\u003eTip:\u003c/em\u003e There are mainly two type of fonts sans-serif and serif. The difference is the presence of decorative strokes, or serifs at the beginning and end of letters.\u003c/p\u003e","title":"CSS - Cascading Style Sheets"},{"content":"HTML(Hyper Text Markup Language) is the standard language use to create and structure content on the web.\nWhy learn html: because we need to create website for that we need html, or because of content.\nGetting with HTML Tip: type - html:5 / ! - for boilerplate code\nBoilerplate Code \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;!-- tells that we are using HTML5 --\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;!--The tag represents the root of an HTML document.--\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- head is a container for metadata (data about data)--\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;!--tag defines metadata about an HTML document--\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;!--defines the title of the document.--\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- defines the document\u0026#39;s body.--\u0026gt; \u0026lt;!-- content added here --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Tags in HTML \u0026lt;h1\u0026gt;\u0026lt;/h1\u0026gt; - heading tag and Most Importance \u0026lt;h2\u0026gt;\u0026lt;/h2\u0026gt; - less Importance than h1 \u0026lt;h3\u0026gt;\u0026lt;/h3\u0026gt; - less Importance than h2 \u0026lt;h4\u0026gt;\u0026lt;/h4\u0026gt; - less Importance than h3 \u0026lt;h5\u0026gt;\u0026lt;/h5\u0026gt; - less Importance than h4 \u0026lt;h6\u0026gt;\u0026lt;/h6\u0026gt; - less Importance than h5 \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; - paragraph tag used to add paragraph/text on website \u0026lt;b\u0026gt;\u0026lt;/b\u0026gt; - used to bold the text \u0026lt;i\u0026gt;\u0026lt;/i\u0026gt; - used to italic the text \u0026lt;sup\u0026gt;\u0026lt;/sup\u0026gt; - used for to add super script \u0026lt;sub\u0026gt;\u0026lt;/sub\u0026gt; - used to add sub script \u0026lt;br\u0026gt;\u0026lt;/br\u0026gt; - used to break line \u0026lt;hr\u0026gt; - used to add horizontal row \u0026lt;ol\u0026gt;\u0026lt;/ol\u0026gt; - used to add ordered list \u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt; - used to add unordered list \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; - used to add items in list \u0026lt;a href =\u0026quot;source\u0026quot;\u0026gt; \u0026lt;/a\u0026gt; - used to make text clickable/hyperlink Tip: to open link in new tab use this target=\u0026quot;_blank\u0026quot; \u0026lt;img src=\u0026quot;source\u0026quot; alt=\u0026quot; \u0026quot;\u0026gt; - used to add image to website \u0026lt;form\u0026gt;\u0026lt;/form\u0026gt; - used to create the form \u0026lt;label\u0026gt;\u0026lt;/label\u0026gt; - used to add label to input field \u0026lt;input id =\u0026quot;abc\u0026quot; type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot; \u0026gt; - used to add input field \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; div is rectangle in his nature with 0 height div is used to combine multiple elements together in html \u0026lt;table\u0026gt;\u0026lt;/table\u0026gt; - A table in HTML consists of table cells inside rows and columns. \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; - Each table cell is defined by a and a tag \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt; - table row starts with a and ends with a tag \u0026lt;th\u0026gt;\u0026lt;/th\u0026gt; - Defines a header cell in a table Input Types for Input tag text : \u0026lt;input type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot;\u0026gt; email : \u0026lt;input type=\u0026quot;email\u0026quot; placeholder=\u0026quot;Email\u0026quot;\u0026gt; password : \u0026lt;input type=\u0026quot;password\u0026quot; placeholder=\u0026quot;Password\u0026quot;\u0026gt; checkbox : \u0026lt;input type=\u0026quot;checkbox\u0026quot; \u0026gt; radio button : \u0026lt;input type=\u0026quot;radio\u0026quot; \u0026gt; Male file : \u0026lt;input type=\u0026quot;file\u0026quot; \u0026gt; range : \u0026lt;input type=\u0026quot;range\u0026quot; \u0026gt; color: \u0026lt;input type=\u0026quot;color\u0026quot; \u0026gt; date : \u0026lt;input type=\u0026quot;date\u0026quot; \u0026gt; submit : \u0026lt;input type=\u0026quot;submit\u0026quot; \u0026gt; id: id is attribute that is used to assign id to an element. It is very helpful when we have multiple of same type but we need to treat them differently. id must be unique of element.\nclass: As we know that we are not allowed to assign same id to different element but when we need this type of thing we use the class attribute.\nHTML5 Semantics HTML5 semantics refers to the use of specific tags like \u0026lt;header\u0026gt;,\u0026lt;footer\u0026gt;,\u0026lt;nav\u0026gt;,\u0026lt;article\u0026gt;,\u0026lt;section\u0026gt;,etc, to provide clearer structure and meaning to web content. This improves accessibility, better SEO, and facilitates better better understanding by both human and machines, These tags did not to something special they act like normal div but with clearer structure and meaning about there content.\nSemantics Elements \u0026lt;header\u0026gt; : First section website can be called header nav : Navigation bar. \u0026lt;main\u0026gt; : complete website in this tag. \u0026lt;section\u0026gt; : A page can split into sections like introduction, contact information, Details, etc and each of these sections can be in a different section tag. \u0026lt;article\u0026gt; : It contains independent content which does not require any other context, blog post, newspaper article etc. \u0026lt;aside\u0026gt; : It is used to place content in a sidebar i.e aside from the existing content. IT is related to surrounding context. \u0026lt;footer\u0026gt; : Footer located at the bottom of any article or document, they can contain contact details, copyright information etc. There can be multiple footers on a page. \u0026lt;audio\u0026gt; : use to add audio support \u0026lt;video\u0026gt; : use to add video support ","permalink":"http://localhost:1313/posts/html/","summary":"\u003cp\u003eHTML(Hyper Text Markup Language) is the standard language use to create and structure content on the web.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhy learn html:\u003c/strong\u003e because we need to create website for that we need html, or because of content.\u003c/p\u003e\n\u003ch2 id=\"getting-with-html\"\u003eGetting with HTML\u003c/h2\u003e\n\u003cp\u003eTip: type - \u003ccode\u003ehtml:5\u003c/code\u003e / \u003ccode\u003e!\u003c/code\u003e - for boilerplate code\u003c/p\u003e\n\u003ch5 id=\"boilerplate-code\"\u003eBoilerplate Code\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- tells that we are using HTML5 --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003ehtml\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003elang\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!--The tag represents the root of an HTML document.--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003ehead\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- head is a container for metadata (data about data)--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003echarset\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!--tag defines metadata about an HTML document--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003emeta\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003ename\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;viewport\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003econtent\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003etitle\u003c/span\u003e\u0026gt;Document\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003etitle\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!--defines the title of the document.--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003ehead\u003c/span\u003e\u0026gt; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#ff79c6\"\u003ebody\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- defines the document\u0026#39;s body.--\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#6272a4\"\u003e\u0026lt;!-- content added here --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003ebody\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#ff79c6\"\u003ehtml\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"tags-in-html\"\u003eTags in HTML\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;\u0026lt;/h1\u0026gt;\u003c/code\u003e - heading tag and Most Importance\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;\u0026lt;/h2\u0026gt;\u003c/code\u003e - less Importance than h1\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h3\u0026gt;\u0026lt;/h3\u0026gt;\u003c/code\u003e - less Importance than h2\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h4\u0026gt;\u0026lt;/h4\u0026gt;\u003c/code\u003e - less Importance than h3\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h5\u0026gt;\u0026lt;/h5\u0026gt;\u003c/code\u003e - less Importance than h4\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;h6\u0026gt;\u0026lt;/h6\u0026gt;\u003c/code\u003e - less Importance than h5\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;\u003c/code\u003e - paragraph tag used to add paragraph/text on website\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;b\u0026gt;\u0026lt;/b\u0026gt;\u003c/code\u003e - used to bold the text\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;i\u0026gt;\u0026lt;/i\u0026gt;\u003c/code\u003e - used to italic the text\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;sup\u0026gt;\u0026lt;/sup\u0026gt;\u003c/code\u003e - used for to add super script\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;sub\u0026gt;\u0026lt;/sub\u0026gt;\u003c/code\u003e - used to add sub script\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;br\u0026gt;\u0026lt;/br\u0026gt;\u003c/code\u003e - used to break line\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;hr\u0026gt;\u003c/code\u003e - used to add horizontal row\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u0026lt;/ol\u0026gt;\u003c/code\u003e - used to add ordered list\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt;\u003c/code\u003e - used to add unordered list\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;\u003c/code\u003e - used to add items in list\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;a href =\u0026quot;source\u0026quot;\u0026gt; \u0026lt;/a\u0026gt;\u003c/code\u003e - used to make text clickable/hyperlink\n\u003cul\u003e\n\u003cli\u003eTip: to open link in new tab use this \u003ccode\u003etarget=\u0026quot;_blank\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;img src=\u0026quot;source\u0026quot; alt=\u0026quot; \u0026quot;\u0026gt;\u003c/code\u003e - used to add image to website\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;form\u0026gt;\u0026lt;/form\u0026gt;\u003c/code\u003e - used to create the form\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;label\u0026gt;\u0026lt;/label\u0026gt;\u003c/code\u003e - used to add label to input field\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;input id =\u0026quot;abc\u0026quot; type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot; \u0026gt;\u003c/code\u003e - used to add input field\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u003c/code\u003e\n\u003col\u003e\n\u003cli\u003ediv is rectangle in his nature with 0 height\u003c/li\u003e\n\u003cli\u003ediv is used to combine multiple elements together in html\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u0026lt;/table\u0026gt;\u003c/code\u003e - A table in HTML consists of table cells inside rows and columns.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;td\u0026gt;\u0026lt;/td\u0026gt;\u003c/code\u003e - Each table cell is defined by a and a tag\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003c/code\u003e - table row starts with a and ends with a tag\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;th\u0026gt;\u0026lt;/th\u0026gt;\u003c/code\u003e - Defines a header cell in a table\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"input-types-for-input-tag\"\u003eInput Types for Input tag\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003etext :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Name\u0026quot;\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eemail :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;email\u0026quot; placeholder=\u0026quot;Email\u0026quot;\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003epassword :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;password\u0026quot; placeholder=\u0026quot;Password\u0026quot;\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003echeckbox :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;checkbox\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eradio button :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;radio\u0026quot; \u0026gt; Male\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003efile :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;file\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003erange :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;range\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecolor:\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;color\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003edate :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;date\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003esubmit :\u003c/strong\u003e \u003ccode\u003e\u0026lt;input type=\u0026quot;submit\u0026quot; \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"id\"\u003eid:\u003c/h5\u003e\n\u003cp\u003eid is attribute that is used to assign id to an element. It is very helpful when we have multiple of same type but we need to treat them differently. id must be unique of element.\u003c/p\u003e","title":"HTML - The Language of the Web"},{"content":"\nWeb development is a continuously evolving field, and becoming a proficient full-stack developer in 2025 requires not only mastering essential basics but also adopting advanced tools and concepts. This roadmap will guide you, step by step, through the skills and technologies you need to become job-ready and adaptable to industry trends.\nWeb Development [Basic] (3 Months) üìÑ Topics Covered: 1. HTML \u0026amp; CSS Build at least 100 static landing pages to master the fundamentals and different layouts. 2. Git and GitHub Learn the foundations of version control: Creating repositories Branching and merging workflows Collaborating on platforms like GitHub 3. Basic JavaScript Core Concepts: Variables Functions Control Flow (if/else, loops) Data Structures (objects, arrays) DOM APIs: Event handling DOM manipulation Using browser-native features 4. Build the Following Projects Digital Clock Build a digital clock with accurate timed updates.\nStopwatch and Timer App Create an app with stopwatch and countdown timer functionality.\nTodo App with Local Storage Save user data (tasks) using localStorage.\nWeather App Fetch live weather data using APIs based on the user‚Äôs location.\n**Monkey Typing Game Create a typing test with stats like speed (WPM) and accuracy.\nImage Slider Build an interactive slider component.\nBreak Time (15 Days): Quick Networking and Internet Basics Learn essential network and web communication concepts: **What is the Internet?, **How it works?** Understanding Protocols (HTTP, HTTPS, FTP, TCP/IP) **TCP vs UDP Protocol Basics of DNS and **DNS Records** (A, CNAME, MX, TXT) Client-Server Architecture Diving into topics like 3-way TCP Handshakes, IP Addresses (Private vs Public), and Subnet Masks Basic Backend Development (3 Months) üìÑ Topics Covered: Servers: Understand the function of a server. Differentiate between Web Servers, API Servers, and File Servers. Cloud Servers vs On-Premises Servers Introduce virtualization concepts.\nNode.js Learn how to build REST APIs with Node.js: Using frameworks like Express.js, Hono.js, or Intent.js\nConcepts like Headers, Body, and HTTP Methods Databases (DB): Integrate MongoDB with Mongoose (NoSQL Database). Learn SQL databases with PostgreSQL. Compare SQL vs NoSQL Databases. Introduce **ORM Frameworks** (Prisma, Drizzle, Knex). **Authentication and Authorization**: **JWT vs Sessions** Learn different identification and security methods.\n**Build Backend Projects**: Simple CRUD Applications (like task managers) E-Commerce API Weather API Wrapper Task Management API **Advanced Backend Concepts**: **Redis** and caching systems Queue systems (BullMQ, SQS) Rate limiting strategies for APIs Batch processing jobs for async tasks **Database Optimizations** and indexing **Soft Skills for Developers**: Build a presence on platforms like Twitter. Share what you\u0026rsquo;re learning and building to connect with others.\nShare feedback and ask for advanced learning topics. Build confidence while solving real-life problems. React.js (2 Months) React.js is one of the most popular front-end libraries for building web interfaces.\nüìÑ Topics Covered: **Why Use React?** Understand the advantages of component-based architecture. **React Fundamentals**: **Hooks** (useState, useEffect, useReducer) **Components** and JSX Component lifecycle Adding styling with **TailwindCSS** State management using **Redux** and **Zustand** **Routing with React Router**: Learn navigation in React-based apps **React Projects**: **Todo App with Local Storage** **Weather App** **Amazon-like Working Clone** (FE only) **YouTube Clone** (using Google APIs for video data) Full-Stack Applications (MERN or PERN) Begin combining front-end and back-end skills to create complex applications:\nReal-Time Collaboration Tools (like Google Docs) Multi-Vendor E-Commerce Platforms Social Media Automation Tools (similar to LinkedIn‚Äôs automation tools) Video Conferencing Applications (leveraging **WebRTC or SFU**) Live Streaming Studio (with RTMP) Advanced whiteboarding tools Connectors for workflow automation (Zapier-like APIs) Cloud Basics (AWS) (1.5 Months) Learn the fundamentals of hosting, deploying, and scaling applications on servers.\nüìÑ Topics Covered: **AWS Services**: **EC2**, Load Balancers, CloudFront, S3 Storage **Private and Public VPC** IAM Roles and Federated Management Depict networking setups using Internet Gateways. **Scripts and Automation**: Learn how to automate deployments with **CloudFormation Templates**. Become Unstoppable (Advanced Topics) Master niche tools and technologies to thrive in enterprise environments.\n1. **Distributed Systems** Learn **microservices architecture**: Communication strategies like REST, gRPC, Saga patterns. Understanding CAP Theorem and data sharding. 2. **API Design and Optimization** **GraphQL** and **gRPC** for fast and scalable APIs. API version control and rate-limiting (use Redis, HATEOAS). 3. **Caching Strategies** CDN integration and distributed caches using Redis. Optimize performance with **cache partitioning**. 4. **Authentication \u0026amp; Authorization** Secure APIs with **OAuth 2.0, JWT**, and session management. Implement **Role-Based Access Control (RBAC)**. 5. **Database Optimization** Schema optimization with indexing. Learn SQL Query Optimization. Explore distributed databases (like CockroachDB, Cassandra). 6. **Observability** Set up dashboards with **Prometheus and Grafana**. Implement **distributed tracing** for debugging. Final Thought on Becoming Full-Stack in 2025 This roadmap provides a clear and structured guide to becoming a proficient full-stack developer by 2025. It covers everything from the basics of HTML to advanced distributed systems, ensuring you\u0026rsquo;re equipped to handle real-world challenges with confidence.\nHappy coding! üöÄ\n","permalink":"http://localhost:1313/posts/web-dev-roadmap/","summary":"\u003cp\u003e\u003cimg alt=\"cover-image\" loading=\"lazy\" src=\"/posts/assets/web-dev-roadmap/web-dev-roadmap.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eWeb development is a continuously evolving field, and becoming a proficient full-stack developer in 2025 requires not only mastering essential basics but also adopting advanced tools and concepts. This roadmap will guide you, step by step, through the skills and technologies you need to become job-ready and adaptable to industry trends.\u003c/p\u003e\n\u003ch2 id=\"web-development-basic-3-months\"\u003eWeb Development [Basic] (3 Months)\u003c/h2\u003e\n\u003ch3 id=\"-topics-covered\"\u003eüìÑ Topics Covered:\u003c/h3\u003e\n\u003ch4 id=\"1-html--css\"\u003e1. HTML \u0026amp; CSS\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eBuild \u003cstrong\u003eat least 100 static landing pages\u003c/strong\u003e to master the fundamentals and different layouts.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"2-git-and-github\"\u003e2. Git and GitHub\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eLearn the foundations of version control:\u003c/li\u003e\n\u003cli\u003eCreating repositories\u003c/li\u003e\n\u003cli\u003eBranching and merging workflows\u003c/li\u003e\n\u003cli\u003eCollaborating on platforms like GitHub\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"3-basic-javascript\"\u003e3. Basic JavaScript\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCore Concepts:\u003c/li\u003e\n\u003cli\u003eVariables\u003c/li\u003e\n\u003cli\u003eFunctions\u003c/li\u003e\n\u003cli\u003eControl Flow (if/else, loops)\u003c/li\u003e\n\u003cli\u003eData Structures (objects, arrays)\u003c/li\u003e\n\u003cli\u003eDOM APIs:\u003c/li\u003e\n\u003cli\u003eEvent handling\u003c/li\u003e\n\u003cli\u003eDOM manipulation\u003c/li\u003e\n\u003cli\u003eUsing browser-native features\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"4-build-the-following-projects\"\u003e4. Build the Following Projects\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDigital Clock\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBuild a digital clock with accurate timed updates.\u003c/p\u003e","title":"Becoming a Full-Stack Web Developer in 2025"},{"content":"\nThere comes a time in life when everything around you seems stifling. Every breath becomes a fight; the air seems weighty and pushes against your chest. Until you feel as though you are drowning, the weight of unmet expectations, unresolved grief, and constant disappointment presses down on your soul. Running away is not really an option; you yearn for escape; mountain tops call with promises of seclusion, vast roads whisper freedom into your ears. You thus withdraw inside, running back to yourself as the last haven remaining.\nThe never-ending battle to articulate what you are going through wears you out. Exhaustion penetrates into your bones, therefore rendering the act of hoping or trusting an impossible task. Love seems far, as like it belongs in a world you are no longer able to reach. You paste on a brave front at first since that is what others expect. You convince everyone you are good while donning a mask of normalcy. Still, the lies get more difficult to maintain quickly. You start to shun people‚Äînot out of indifference but rather because you have nothing left to offer. Plans are called off, messages go unacknowledged, calls are dismissed. Loneliness starts to be your haven since it feels safer than you could want. Alone, you can breathe without thinking about others.\nYou haven\u0026rsquo;t ceased yearning connection. Somewhere deep within, a part of you still yearns for closeness‚Äîfor someone who knows. Still, the suffering has caused you caution. You want the flames of your rage and grief to scorish those you love, but you worry bringing your inner turmoil upon others. You thus build towering, impervious barriers to keep everyone out. Your narrative too weighty to discuss, hence it appears impossible to explain your emotions. You worry about being misinterpreted and about people judging you for the wounds you bear as much as for your behavior. Vulnerability seems like a trap, and in a society where rumors travel like wildfire the risk is too large.\nStill, the damage stays, chewing away at you. The weight of past mistakes and losses hangs on your soul like a shadow not going to erase. The toughest is nighttime. The silence sharpens everything‚Äîthe regrets, the \u0026ldquo;what-ifs,\u0026rdquo; the memories of what you had and lost. \u0026ldquo;If only,\u0026rdquo; you consider. If only you had chosen another course. Just you would have been sufficient. Your chest hurts constantly, a faint aching never going away. The tears have stopped even though the suffering seems too great to contain. Even alone, crying seems like a luxury you cannot afford right now.\nThough certain emotions never alter with time. Despite the years and the heartache, that love you carried for someone still persists, stubborn and immobile. You know, though, you cannot go back to what was. Your heart‚Äîfragile, wounded‚Äîno longer has the strength to fall another time; the trust you once freely offered feels irreversibly damaged.\nThough it is debilitating, pain does not define you. Indeed, it shapes you, but it does not define you totally. Healing is nonlinear, messy, and usually frustrating. Setbacks and times when the weight seems intolerable will abound. Even in those times, though, it\u0026rsquo;s crucial to forgive yourself‚Äîfor the times you felt weak or stumbled under pressure. Honor the love you bear, even if it is complex or mixed-fevers. Above all, hang on. Because the weight won\u0026rsquo;t last permanently regardless of how heavy it feels right now. Deepest scars can heal as well. The darkest darkness lift too, finally.\n","permalink":"http://localhost:1313/posts/forher/","summary":"\u003cp\u003e\u003cimg alt=\"cover-image\" loading=\"lazy\" src=\"/posts/assets/forher/forher.webp\"\u003e\u003c/p\u003e\n\u003cp\u003eThere comes a time in life when everything around you seems stifling. Every breath becomes a fight; the air seems weighty and pushes against your chest. Until you feel as though you are drowning, the weight of unmet expectations, unresolved grief, and constant disappointment presses down on your soul. Running away is not really an option; you yearn for escape; mountain tops call with promises of seclusion, vast roads whisper freedom into your ears. You thus withdraw inside, running back to yourself as the last haven remaining.\u003c/p\u003e","title":"What It Means to Feel for Someone"},{"content":"This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can‚Äôt cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax.\nHeadings Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores. Strong emphasis, aka bold, with asterisks or underscores. Combined emphasis with asterisks and underscores. Strikethrough with two tildes. Bold and nested italic. All bold and italic. Bold and italic nested.\nLists Ordered: First ordered list item Another item Actual numbers don\u0026rsquo;t matter, just that it\u0026rsquo;s a number 1st. 2nd. 3rd. Unordered: This is a list item\nThis is a nested list item This is a nested list item This is another list item This is another list item\nWrite the press release\nUpdate the website\nContact the media\nLinks This is a link.\nThis link has a title attribute.\nTables Syntax Description Header Title Paragraph Text Blockquotes Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.\nYou can reference a footnote like this.\nAll generalizations are false, including this one. ‚Äî Mark Twain. 1\nCode Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print(s) #include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; void heapify(int *arr, int index, int n) { int largest = index; int left = 2 * index + 1; int right = 2 * index + 2; if (left \u0026lt; n \u0026amp;\u0026amp; arr[left] \u0026gt; arr[largest]) largest = left; if (right \u0026lt; n \u0026amp;\u0026amp; arr[right] \u0026gt; arr[largest]) largest = right; if (largest != index) { swap(arr[largest], arr[index]); heapify(arr, largest, n); } } void buildHeap(int *arr, int n) { for (int i = (n / 2) - 1; i \u0026gt;= 0; i--) { heapify(arr, i, n); } } void heapSort(int *arr, int n) { buildHeap(arr, n); for (int i = n - 1; i \u0026gt; 0; i--) { swap(arr[i], arr[0]); heapify(arr, 0, i); } } void print(int *arr, int size) { for (int i = 0; i \u0026lt; size; i++) cout \u0026lt;\u0026lt; arr[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; } int main() { int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; buildHeap(arr, 10); print(arr, 10); heapSort(arr, 10); print(arr, 10); return 0; } No language indicated, so no syntax highlighting. But let\u0026#39;s throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. You can remove line numbers, change the highlighting theme, and more. See Syntax Highlighting and Highlight.\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello, World!\\n\u0026#34;); return 0; } Math You can use LaTeX-style math with $ and $$ delimiters. For example, $x^2$ renders as $x^2$, and $$\\frac{x}{y}$$ renders as: $$\\frac{x}{y}$$\nWe can throw this scary-looking equation at you:\n$$ \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\ldots} } } } $$\nHorizontal Rules Three or more\u0026hellip; Hyphens ---, Asterisks ***, or Underscores ___.\nMiscellaneous Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:scroll-auto to only The world is flat. apply the scroll-auto utility on hover.\nterm definition another definition https://www.brainyquote.com/quotes/mark_twain_137872.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/posts/markdown/","summary":"\u003cp\u003eThis Markdown cheat sheet \u003cstrong\u003eprovides\u003c/strong\u003e a quick overview of all the Markdown syntax elements. It can‚Äôt cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic \u003cem\u003esyntax\u003c/em\u003e and extended syntax.\u003c/p\u003e\n\u003ch1 id=\"headings\"\u003eHeadings\u003c/h1\u003e\n\u003chr\u003e\n\u003ch1 id=\"heading-1\"\u003eHeading 1\u003c/h1\u003e\n\u003ch2 id=\"heading-2\"\u003eHeading 2\u003c/h2\u003e\n\u003ch3 id=\"heading-3\"\u003eHeading 3\u003c/h3\u003e\n\u003ch4 id=\"heading-4\"\u003eHeading 4\u003c/h4\u003e\n\u003ch5 id=\"heading-5\"\u003eHeading 5\u003c/h5\u003e\n\u003ch6 id=\"heading-6\"\u003eHeading 6\u003c/h6\u003e\n\u003ch1 id=\"emphasis\"\u003eEmphasis\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003eEmphasis, aka italics, with asterisks or underscores. \u003cstrong\u003eStrong emphasis\u003c/strong\u003e, aka bold, with asterisks or underscores. Combined emphasis with asterisks and underscores. \u003cdel\u003eStrikethrough\u003c/del\u003e with two tildes. \u003cstrong\u003e\u003cem\u003eBold and nested italic\u003c/em\u003e\u003c/strong\u003e. \u003cstrong\u003e\u003cem\u003eAll bold and italic\u003c/em\u003e\u003c/strong\u003e. \u003cstrong\u003e\u003cem\u003e\u003cem\u003eBold and italic nested\u003c/em\u003e\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e","title":"Markdown Cheat Sheet"}]